

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 18 10:28:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  001F9A                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _BandaMorta
    91  001F9A  0A                 	db	10
    92                           
    93                           ;initializer for _Lmin
    94  001F9B  59                 	db	89
    95                           
    96                           ;initializer for _Lmax
    97  001F9C  93                 	db	147
    98                           
    99                           	psect	idataBANK0
   100  001F9D                     __pidataBANK0:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _T
   104  001F9D  D7                 	db	215
   105  001F9E  A3                 	db	163
   106  001F9F  3B                 	db	59
   107                           
   108                           	psect	smallconst
   109  000800                     __psmallconst:
   110                           	opt stack 0
   111  000800  00                 	db	0
   112  000801                     _dpowers:
   113                           	opt stack 0
   114  000801  0001               	dw	1
   115  000803  000A               	dw	10
   116  000805  0064               	dw	100
   117  000807  03E8               	dw	1000
   118  000809  2710               	dw	10000
   119  00080B                     __end_of_dpowers:
   120                           	opt stack 0
   121  0000                     _PORTEbits	set	3972
   122  0000                     _RCONbits	set	4048
   123  0000                     _INTCON2bits	set	4081
   124  0000                     _T0CONbits	set	4053
   125  0000                     _CCP1CON	set	4029
   126  0000                     _PR2	set	4043
   127  0000                     _T2CON	set	4042
   128  0000                     _PORTB	set	3969
   129  0000                     _TRISE	set	3990
   130  0000                     _TRISD	set	3989
   131  0000                     _TRISC	set	3988
   132  0000                     _TRISB	set	3987
   133  0000                     _TRISA	set	3986
   134  0000                     _CMCON	set	4020
   135  0000                     _TMR0L	set	4054
   136  0000                     _CCP1CONbits	set	4029
   137  0000                     _CCPR1L	set	4030
   138  0000                     _PORTAbits	set	3968
   139  0000                     _PORTBbits	set	3969
   140  0000                     _INTCONbits	set	4082
   141  0000                     _ADRESL	set	4035
   142  0000                     _ADRESH	set	4036
   143  0000                     _ADCON0bits	set	4034
   144  0000                     _ADCON0	set	4034
   145  0000                     _ADCON2	set	4032
   146  0000                     _ADCON1	set	4033
   147  0000                     _PORTDbits	set	3971
   148  00080B                     STR_4:
   149  00080B  65                 	db	101	;'e'
   150  00080C  3A                 	db	58	;':'
   151  00080D  25                 	db	37
   152  00080E  69                 	db	105	;'i'
   153  00080F  00                 	db	0
   154  000810                     STR_3:
   155  000810  66                 	db	102	;'f'
   156  000811  3A                 	db	58	;':'
   157  000812  25                 	db	37
   158  000813  69                 	db	105	;'i'
   159  000814  00                 	db	0
   160  000815                     STR_2:
   161  000815  70                 	db	112	;'p'
   162  000816  3A                 	db	58	;':'
   163  000817  25                 	db	37
   164  000818  69                 	db	105	;'i'
   165  000819  00                 	db	0
   166  00081A                     STR_1:
   167  00081A  72                 	db	114	;'r'
   168  00081B  3A                 	db	58	;':'
   169  00081C  25                 	db	37
   170  00081D  69                 	db	105	;'i'
   171  00081E  00                 	db	0
   172                           
   173                           ; #config settings
   174  00081F  00                 	db	0	; dummy byte at the end
   175  0000                     
   176                           	psect	cinit
   177  001BB8                     __pcinit:
   178                           	opt stack 0
   179  001BB8                     start_initialization:
   180                           	opt stack 0
   181  001BB8                     __initialization:
   182                           	opt stack 0
   183                           
   184                           ; Initialize objects allocated to BANK0 (3 bytes)
   185                           ; load TBLPTR registers with __pidataBANK0
   186  001BB8  0E9D               	movlw	low __pidataBANK0
   187  001BBA  6EF6               	movwf	tblptrl,c
   188  001BBC  0E1F               	movlw	high __pidataBANK0
   189  001BBE  6EF7               	movwf	tblptrh,c
   190  001BC0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   191  001BC2  6EF8               	movwf	tblptru,c
   192  001BC4  0009               	tblrd		*+	;fetch initializer
   193  001BC6  CFF5 F0E6          	movff	tablat,__pdataBANK0
   194  001BCA  0009               	tblrd		*+	;fetch initializer
   195  001BCC  CFF5 F0E7          	movff	tablat,__pdataBANK0+1
   196  001BD0  0009               	tblrd		*+	;fetch initializer
   197  001BD2  CFF5 F0E8          	movff	tablat,__pdataBANK0+2
   198                           
   199                           ; Initialize objects allocated to COMRAM (3 bytes)
   200                           ; load TBLPTR registers with __pidataCOMRAM
   201  001BD6  0E9A               	movlw	low __pidataCOMRAM
   202  001BD8  6EF6               	movwf	tblptrl,c
   203  001BDA  0E1F               	movlw	high __pidataCOMRAM
   204  001BDC  6EF7               	movwf	tblptrh,c
   205  001BDE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   206  001BE0  6EF8               	movwf	tblptru,c
   207  001BE2  0009               	tblrd		*+	;fetch initializer
   208  001BE4  CFF5 F05B          	movff	tablat,__pdataCOMRAM
   209  001BE8  0009               	tblrd		*+	;fetch initializer
   210  001BEA  CFF5 F05C          	movff	tablat,__pdataCOMRAM+1
   211  001BEE  0009               	tblrd		*+	;fetch initializer
   212  001BF0  CFF5 F05D          	movff	tablat,__pdataCOMRAM+2
   213                           
   214                           ; Clear objects allocated to BANK1 (16 bytes)
   215  001BF4  EE01  F000         	lfsr	0,__pbssBANK1
   216  001BF8  0E10               	movlw	16
   217  001BFA                     clear_0:
   218  001BFA  6AEE               	clrf	postinc0,c
   219  001BFC  06E8               	decf	wreg,f,c
   220  001BFE  E1FD               	bnz	clear_0
   221                           
   222                           ; Clear objects allocated to BANK0 (79 bytes)
   223  001C00  EE00  F060         	lfsr	0,__pbssBANK0
   224  001C04  0E4F               	movlw	79
   225  001C06                     clear_1:
   226  001C06  6AEE               	clrf	postinc0,c
   227  001C08  06E8               	decf	wreg,f,c
   228  001C0A  E1FD               	bnz	clear_1
   229                           
   230                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   231  001C0C  6A5E               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   232                           
   233                           ; Clear objects allocated to COMRAM (18 bytes)
   234  001C0E  EE00  F049         	lfsr	0,__pbssCOMRAM
   235  001C12  0E12               	movlw	18
   236  001C14                     clear_2:
   237  001C14  6AEE               	clrf	postinc0,c
   238  001C16  06E8               	decf	wreg,f,c
   239  001C18  E1FD               	bnz	clear_2
   240  001C1A                     end_of_initialization:
   241                           	opt stack 0
   242  001C1A                     __end_of__initialization:
   243                           	opt stack 0
   244  001C1A  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   245  001C1C  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   246  001C1E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   247  001C20  6EF8               	movwf	tblptru,c
   248  001C22  0100               	movlb	0
   249  001C24  EF5D  F006         	goto	_main	;jump to C main() function
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           tblptrl	equ	0xFF6
   253                           tablat	equ	0xFF5
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bitbssCOMRAM
   258  0002F0                     __pbitbssCOMRAM:
   259                           	opt stack 0
   260  0002F0                     _d:
   261                           	opt stack 0
   262  0002F0                     	ds	1
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	bssCOMRAM
   271  000049                     __pbssCOMRAM:
   272                           	opt stack 0
   273  000049                     _tick_time:
   274                           	opt stack 0
   275  000049                     	ds	4
   276  00004D                     _pwm:
   277                           	opt stack 0
   278  00004D                     	ds	4
   279  000051                     _aux:
   280                           	opt stack 0
   281  000051                     	ds	2
   282  000053                     _out0:
   283                           	opt stack 0
   284  000053                     	ds	4
   285  000057                     _erro0:
   286                           	opt stack 0
   287  000057                     	ds	4
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           
   295                           	psect	dataCOMRAM
   296  00005B                     __pdataCOMRAM:
   297                           	opt stack 0
   298  00005B                     _BandaMorta:
   299                           	opt stack 0
   300  00005B                     	ds	1
   301  00005C                     _Lmin:
   302                           	opt stack 0
   303  00005C                     	ds	1
   304  00005D                     _Lmax:
   305                           	opt stack 0
   306  00005D                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	bssBANK0
   315  000060                     __pbssBANK0:
   316                           	opt stack 0
   317  000060                     _delay1000:
   318                           	opt stack 0
   319  000060                     	ds	4
   320  000064                     _delay502:
   321                           	opt stack 0
   322  000064                     	ds	4
   323  000068                     _delay501:
   324                           	opt stack 0
   325  000068                     	ds	4
   326  00006C                     _delay500:
   327                           	opt stack 0
   328  00006C                     	ds	4
   329  000070                     _delay100:
   330                           	opt stack 0
   331  000070                     	ds	4
   332  000074                     _fb:
   333                           	opt stack 0
   334  000074                     	ds	4
   335  000078                     _ref:
   336                           	opt stack 0
   337  000078                     	ds	4
   338  00007C                     _derivativo:
   339                           	opt stack 0
   340  00007C                     	ds	4
   341  000080                     _integral:
   342                           	opt stack 0
   343  000080                     	ds	4
   344  000084                     _erro1:
   345                           	opt stack 0
   346  000084                     	ds	4
   347  000088                     _k3:
   348                           	opt stack 0
   349  000088                     	ds	4
   350  00008C                     _k2:
   351                           	opt stack 0
   352  00008C                     	ds	4
   353  000090                     _k1:
   354                           	opt stack 0
   355  000090                     	ds	4
   356  000094                     _kd:
   357                           	opt stack 0
   358  000094                     	ds	3
   359  000097                     _ki:
   360                           	opt stack 0
   361  000097                     	ds	3
   362  00009A                     _kp:
   363                           	opt stack 0
   364  00009A                     	ds	3
   365  00009D                     _enS:
   366                           	opt stack 0
   367  00009D                     	ds	2
   368  00009F                     _buf:
   369                           	opt stack 0
   370  00009F                     	ds	16
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           
   378                           	psect	dataBANK0
   379  0000E6                     __pdataBANK0:
   380                           	opt stack 0
   381  0000E6                     _T:
   382                           	opt stack 0
   383  0000E6                     	ds	3
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391                           	psect	bssBANK1
   392  000100                     __pbssBANK1:
   393                           	opt stack 0
   394  000100                     _buf2:
   395                           	opt stack 0
   396  000100                     	ds	16
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           
   404                           	psect	cstackBANK1
   405  000110                     __pcstackBANK1:
   406                           	opt stack 0
   407  000110                     ___fttol@sign1:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x0
   411  000110                     	ds	1
   412  000111                     ___fttol@lval:
   413                           	opt stack 0
   414                           
   415                           ; 4 bytes @ 0x1
   416  000111                     	ds	4
   417  000115                     ___fttol@exp1:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x5
   421  000115                     	ds	1
   422  000116                     ??_main:
   423                           
   424                           ; 1 bytes @ 0x6
   425  000116                     	ds	1
   426  000117                     main@estado:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x7
   430  000117                     	ds	2
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           
   438                           	psect	cstackBANK0
   439  0000AF                     __pcstackBANK0:
   440                           	opt stack 0
   441  0000AF                     ??_interrupcoes:
   442                           
   443                           ; 1 bytes @ 0x0
   444  0000AF                     	ds	23
   445  0000C6                     ?___lwdiv:
   446                           	opt stack 0
   447  0000C6                     ?___ftpack:
   448                           	opt stack 0
   449  0000C6                     Lcd_Port@a:
   450                           	opt stack 0
   451  0000C6                     atraso_ms@val:
   452                           	opt stack 0
   453  0000C6                     atraso_us@valor:
   454                           	opt stack 0
   455  0000C6                     ___lwdiv@dividend:
   456                           	opt stack 0
   457  0000C6                     ___ftpack@arg:
   458                           	opt stack 0
   459                           
   460                           ; 3 bytes @ 0x17
   461  0000C6                     	ds	2
   462  0000C8                     atraso_ms@i1:
   463                           	opt stack 0
   464  0000C8                     atraso_us@i:
   465                           	opt stack 0
   466  0000C8                     ___lwdiv@divisor:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x19
   470  0000C8                     	ds	1
   471  0000C9                     ___ftpack@exp:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x1A
   475  0000C9                     	ds	1
   476  0000CA                     atraso_ms@j1:
   477                           	opt stack 0
   478  0000CA                     atraso_us@j:
   479                           	opt stack 0
   480  0000CA                     ___ftpack@sign:
   481                           	opt stack 0
   482  0000CA                     ___lwdiv@counter:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x1B
   486  0000CA                     	ds	1
   487  0000CB                     ??___ftpack:
   488  0000CB                     Lcd_Cmd@a:
   489                           	opt stack 0
   490  0000CB                     Lcd_Write_Char@temp:
   491                           	opt stack 0
   492  0000CB                     ___lwdiv@quotient:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x1C
   496  0000CB                     	ds	1
   497  0000CC                     Lcd_Set_Cursor@b:
   498                           	opt stack 0
   499  0000CC                     Lcd_Write_Char@y:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x1D
   503  0000CC                     	ds	1
   504  0000CD                     ?___lwmod:
   505                           	opt stack 0
   506  0000CD                     Lcd_Set_Cursor@a:
   507                           	opt stack 0
   508  0000CD                     Lcd_Write_Char@a:
   509                           	opt stack 0
   510  0000CD                     ___lwmod@dividend:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x1E
   514  0000CD                     	ds	1
   515  0000CE                     ?___ftmul:
   516                           	opt stack 0
   517  0000CE                     Lcd_Set_Cursor@z:
   518                           	opt stack 0
   519  0000CE                     Lcd_Write_String@a:
   520                           	opt stack 0
   521  0000CE                     ___ftmul@f1:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x1F
   525  0000CE                     	ds	1
   526  0000CF                     Lcd_Set_Cursor@y:
   527                           	opt stack 0
   528  0000CF                     ___lwmod@divisor:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x20
   532  0000CF                     	ds	1
   533  0000D0                     Lcd_Set_Cursor@temp:
   534                           	opt stack 0
   535  0000D0                     Lcd_Write_String@i:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x21
   539  0000D0                     	ds	1
   540  0000D1                     ___lwmod@counter:
   541                           	opt stack 0
   542  0000D1                     ___ftmul@f2:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x22
   546  0000D1                     	ds	1
   547  0000D2                     ?_sprintf:
   548                           	opt stack 0
   549  0000D2                     sprintf@sp:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x23
   553  0000D2                     	ds	2
   554  0000D4                     ??___ftmul:
   555  0000D4                     sprintf@f:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x25
   559  0000D4                     	ds	3
   560  0000D7                     ___ftmul@exp:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x28
   564  0000D7                     	ds	1
   565  0000D8                     ___ftmul@f3_as_product:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x29
   569  0000D8                     	ds	2
   570  0000DA                     ??_sprintf:
   571                           
   572                           ; 1 bytes @ 0x2B
   573  0000DA                     	ds	1
   574  0000DB                     ___ftmul@cntr:
   575                           	opt stack 0
   576  0000DB                     sprintf@ap:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x2C
   580  0000DB                     	ds	1
   581  0000DC                     ___ftmul@sign:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x2D
   585  0000DC                     	ds	1
   586  0000DD                     ?___fttol:
   587                           	opt stack 0
   588  0000DD                     sprintf@flag:
   589                           	opt stack 0
   590  0000DD                     ___fttol@f1:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0x2E
   594  0000DD                     	ds	1
   595  0000DE                     sprintf@prec:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x2F
   599  0000DE                     	ds	1
   600  0000DF                     sprintf@val:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x30
   604  0000DF                     	ds	2
   605  0000E1                     ??___fttol:
   606  0000E1                     sprintf@c:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x32
   610  0000E1                     	ds	5
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           wreg	equ	0xFE8
   617                           
   618                           	psect	cstackCOMRAM
   619  000001                     __pcstackCOMRAM:
   620                           	opt stack 0
   621  000001                     ?_ADC_read:
   622                           	opt stack 0
   623  000001                     ?i2___ftpack:
   624                           	opt stack 0
   625  000001                     ?___lmul:
   626                           	opt stack 0
   627  000001                     i2___ftpack@arg:
   628                           	opt stack 0
   629  000001                     ___lmul@multiplier:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x0
   633  000001                     	ds	2
   634  000003                     ??_ADC_read:
   635                           
   636                           ; 1 bytes @ 0x2
   637  000003                     	ds	1
   638  000004                     i2___ftpack@exp:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x3
   642  000004                     	ds	1
   643  000005                     ADC_read@canal:
   644                           	opt stack 0
   645  000005                     i2___ftpack@sign:
   646                           	opt stack 0
   647  000005                     ___lmul@multiplicand:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x4
   651  000005                     	ds	1
   652  000006                     ??i2___ftpack:
   653                           
   654                           ; 1 bytes @ 0x5
   655  000006                     	ds	3
   656  000009                     ?___altoft:
   657                           	opt stack 0
   658  000009                     ___lmul@product:
   659                           	opt stack 0
   660  000009                     ___altoft@c:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x8
   664  000009                     	ds	4
   665  00000D                     ??___altoft:
   666                           
   667                           ; 1 bytes @ 0xC
   668  00000D                     	ds	4
   669  000011                     ___altoft@exp:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x10
   673  000011                     	ds	1
   674  000012                     ___altoft@sign:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x11
   678  000012                     	ds	1
   679  000013                     ?___ftdiv:
   680                           	opt stack 0
   681  000013                     ?i2___ftmul:
   682                           	opt stack 0
   683  000013                     ___ftdiv@f1:
   684                           	opt stack 0
   685  000013                     i2___ftmul@f1:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x12
   689  000013                     	ds	3
   690  000016                     ___ftdiv@f2:
   691                           	opt stack 0
   692  000016                     i2___ftmul@f2:
   693                           	opt stack 0
   694                           
   695                           ; 3 bytes @ 0x15
   696  000016                     	ds	3
   697  000019                     ??___ftdiv:
   698  000019                     ??i2___ftmul:
   699                           
   700                           ; 1 bytes @ 0x18
   701  000019                     	ds	3
   702  00001C                     ___ftdiv@cntr:
   703                           	opt stack 0
   704  00001C                     i2___ftmul@exp:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x1B
   708  00001C                     	ds	1
   709  00001D                     ___ftdiv@f3:
   710                           	opt stack 0
   711  00001D                     i2___ftmul@f3_as_product:
   712                           	opt stack 0
   713                           
   714                           ; 3 bytes @ 0x1C
   715  00001D                     	ds	3
   716  000020                     ___ftdiv@exp:
   717                           	opt stack 0
   718  000020                     i2___ftmul@cntr:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x1F
   722  000020                     	ds	1
   723  000021                     ___ftdiv@sign:
   724                           	opt stack 0
   725  000021                     i2___ftmul@sign:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x20
   729  000021                     	ds	1
   730  000022                     ?___ftadd:
   731                           	opt stack 0
   732  000022                     ___ftadd@f1:
   733                           	opt stack 0
   734                           
   735                           ; 3 bytes @ 0x21
   736  000022                     	ds	3
   737  000025                     ___ftadd@f2:
   738                           	opt stack 0
   739                           
   740                           ; 3 bytes @ 0x24
   741  000025                     	ds	3
   742  000028                     ??___ftadd:
   743                           
   744                           ; 1 bytes @ 0x27
   745  000028                     	ds	3
   746  00002B                     ___ftadd@sign:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x2A
   750  00002B                     	ds	1
   751  00002C                     ___ftadd@exp2:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x2B
   755  00002C                     	ds	1
   756  00002D                     ___ftadd@exp1:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x2C
   760  00002D                     	ds	1
   761  00002E                     ?i2___fttol:
   762                           	opt stack 0
   763  00002E                     i2___fttol@f1:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0x2D
   767  00002E                     	ds	4
   768  000032                     ??i2___fttol:
   769                           
   770                           ; 1 bytes @ 0x31
   771  000032                     	ds	5
   772  000037                     i2___fttol@sign1:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x36
   776  000037                     	ds	1
   777  000038                     i2___fttol@lval:
   778                           	opt stack 0
   779                           
   780                           ; 4 bytes @ 0x37
   781  000038                     	ds	4
   782  00003C                     i2___fttol@exp1:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x3B
   786  00003C                     	ds	1
   787  00003D                     ?_PID_set_PF:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x3C
   791  00003D                     	ds	4
   792  000041                     ??_PID_set_PF:
   793                           
   794                           ; 1 bytes @ 0x40
   795  000041                     	ds	8
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           
   803 ;;
   804 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   805 ;;
   806 ;; *************** function _main *****************
   807 ;; Defined at:
   808 ;;		line 248 in file "main.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  estado          2    7[BANK1 ] int 
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         0       0       0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       2       0       0       0       0       0       0
   824 ;;      Temps:          0       0       1       0       0       0       0       0       0
   825 ;;      Totals:         0       0       3       0       0       0       0       0       0
   826 ;;Total ram usage:        3 bytes
   827 ;; Hardware stack levels required when called:    8
   828 ;; This function calls:
   829 ;;		_Lcd_Clear
   830 ;;		_Lcd_Set_Cursor
   831 ;;		_Lcd_Write_String
   832 ;;		___ftmul
   833 ;;		___fttol
   834 ;;		_setup
   835 ;;		_sprintf
   836 ;; This function is called by:
   837 ;;		Startup code after reset
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text0
   842  000CBA                     __ptext0:
   843                           	opt stack 0
   844  000CBA                     _main:
   845                           	opt stack 23
   846                           
   847                           ;main.c: 249: PORTAbits.RA4 = 0;
   848                           
   849                           ;incstack = 0
   850  000CBA  9880               	bcf	3968,4,c	;volatile
   851                           
   852                           ;main.c: 250: PORTAbits.RA2 = 0;
   853  000CBC  9480               	bcf	3968,2,c	;volatile
   854                           
   855                           ;main.c: 251: PORTAbits.RA3 = 0;
   856  000CBE  9680               	bcf	3968,3,c	;volatile
   857                           
   858                           ;main.c: 252: setup();
   859  000CC0  EC14  F00F         	call	_setup	;wreg free
   860                           
   861                           ;main.c: 254: PORTDbits.RD2 = 0;
   862  000CC4  9483               	bcf	3971,2,c	;volatile
   863                           
   864                           ;main.c: 260: kp = 100;
   865  000CC6  0E00               	movlw	0
   866  000CC8  0100               	movlb	0	; () banked
   867  000CCA  6F9A               	movwf	_kp& (0+255),b
   868  000CCC  0EC8               	movlw	200
   869  000CCE  6F9B               	movwf	(_kp+1)& (0+255),b
   870  000CD0  0E42               	movlw	66
   871  000CD2  6F9C               	movwf	(_kp+2)& (0+255),b
   872                           
   873                           ; BSR set to: 0
   874                           ;main.c: 261: ki = 0;
   875  000CD4  0E00               	movlw	0
   876  000CD6  6F97               	movwf	_ki& (0+255),b
   877  000CD8  0E00               	movlw	0
   878  000CDA  6F98               	movwf	(_ki+1)& (0+255),b
   879  000CDC  0E00               	movlw	0
   880  000CDE  6F99               	movwf	(_ki+2)& (0+255),b
   881                           
   882                           ; BSR set to: 0
   883                           ;main.c: 262: kd = 0;
   884  000CE0  0E00               	movlw	0
   885  000CE2  6F94               	movwf	_kd& (0+255),b
   886  000CE4  0E00               	movlw	0
   887  000CE6  6F95               	movwf	(_kd+1)& (0+255),b
   888  000CE8  0E00               	movlw	0
   889  000CEA  6F96               	movwf	(_kd+2)& (0+255),b
   890                           
   891                           ; BSR set to: 0
   892                           ;main.c: 264: k1 = (kp) * 256;
   893  000CEC  0E00               	movlw	0
   894  000CEE  6FD1               	movwf	___ftmul@f2& (0+255),b
   895  000CF0  0E80               	movlw	128
   896  000CF2  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
   897  000CF4  0E43               	movlw	67
   898  000CF6  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
   899  000CF8  C09A  F0CE         	movff	_kp,___ftmul@f1
   900  000CFC  C09B  F0CF         	movff	_kp+1,___ftmul@f1+1
   901  000D00  C09C  F0D0         	movff	_kp+2,___ftmul@f1+2
   902  000D04  EC0F  F00B         	call	___ftmul	;wreg free
   903  000D08  C0CE  F0DD         	movff	?___ftmul,___fttol@f1
   904  000D0C  C0CF  F0DE         	movff	?___ftmul+1,___fttol@f1+1
   905  000D10  C0D0  F0DF         	movff	?___ftmul+2,___fttol@f1+2
   906  000D14  EC84  F00A         	call	___fttol	;wreg free
   907  000D18  C0DD  F090         	movff	?___fttol,_k1
   908  000D1C  C0DE  F091         	movff	?___fttol+1,_k1+1
   909  000D20  C0DF  F092         	movff	?___fttol+2,_k1+2
   910  000D24  C0E0  F093         	movff	?___fttol+3,_k1+3
   911                           
   912                           ;main.c: 265: k2 = (ki) * 256;
   913  000D28  0E00               	movlw	0
   914  000D2A  0100               	movlb	0	; () banked
   915  000D2C  6FD1               	movwf	___ftmul@f2& (0+255),b
   916  000D2E  0E80               	movlw	128
   917  000D30  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
   918  000D32  0E43               	movlw	67
   919  000D34  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
   920  000D36  C097  F0CE         	movff	_ki,___ftmul@f1
   921  000D3A  C098  F0CF         	movff	_ki+1,___ftmul@f1+1
   922  000D3E  C099  F0D0         	movff	_ki+2,___ftmul@f1+2
   923  000D42  EC0F  F00B         	call	___ftmul	;wreg free
   924  000D46  C0CE  F0DD         	movff	?___ftmul,___fttol@f1
   925  000D4A  C0CF  F0DE         	movff	?___ftmul+1,___fttol@f1+1
   926  000D4E  C0D0  F0DF         	movff	?___ftmul+2,___fttol@f1+2
   927  000D52  EC84  F00A         	call	___fttol	;wreg free
   928  000D56  C0DD  F08C         	movff	?___fttol,_k2
   929  000D5A  C0DE  F08D         	movff	?___fttol+1,_k2+1
   930  000D5E  C0DF  F08E         	movff	?___fttol+2,_k2+2
   931  000D62  C0E0  F08F         	movff	?___fttol+3,_k2+3
   932                           
   933                           ;main.c: 266: k3 = (kd) * 256;
   934  000D66  0E00               	movlw	0
   935  000D68  0100               	movlb	0	; () banked
   936  000D6A  6FD1               	movwf	___ftmul@f2& (0+255),b
   937  000D6C  0E80               	movlw	128
   938  000D6E  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
   939  000D70  0E43               	movlw	67
   940  000D72  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
   941  000D74  C094  F0CE         	movff	_kd,___ftmul@f1
   942  000D78  C095  F0CF         	movff	_kd+1,___ftmul@f1+1
   943  000D7C  C096  F0D0         	movff	_kd+2,___ftmul@f1+2
   944  000D80  EC0F  F00B         	call	___ftmul	;wreg free
   945  000D84  C0CE  F0DD         	movff	?___ftmul,___fttol@f1
   946  000D88  C0CF  F0DE         	movff	?___ftmul+1,___fttol@f1+1
   947  000D8C  C0D0  F0DF         	movff	?___ftmul+2,___fttol@f1+2
   948  000D90  EC84  F00A         	call	___fttol	;wreg free
   949  000D94  C0DD  F088         	movff	?___fttol,_k3
   950  000D98  C0DE  F089         	movff	?___fttol+1,_k3+1
   951  000D9C  C0DF  F08A         	movff	?___fttol+2,_k3+2
   952  000DA0  C0E0  F08B         	movff	?___fttol+3,_k3+3
   953                           
   954                           ;main.c: 269: T0CONbits.TMR0ON = 1;
   955  000DA4  8ED5               	bsf	4053,7,c	;volatile
   956                           
   957                           ;main.c: 270: T0CONbits.T08BIT = 1;
   958  000DA6  8CD5               	bsf	4053,6,c	;volatile
   959                           
   960                           ;main.c: 271: T0CONbits.T0CS = 0;
   961  000DA8  9AD5               	bcf	4053,5,c	;volatile
   962                           
   963                           ;main.c: 272: T0CONbits.T0SE = 0;
   964  000DAA  98D5               	bcf	4053,4,c	;volatile
   965                           
   966                           ;main.c: 273: T0CONbits.PSA = 0;
   967  000DAC  96D5               	bcf	4053,3,c	;volatile
   968                           
   969                           ;main.c: 274: T0CONbits.T0PS = 0b111;
   970  000DAE  80D5               	bsf	4053,0,c	;volatile
   971  000DB0  82D5               	bsf	4053,1,c	;volatile
   972  000DB2  84D5               	bsf	4053,2,c	;volatile
   973                           
   974                           ;main.c: 275: TMR0L = 22;
   975  000DB4  0E16               	movlw	22
   976  000DB6  6ED6               	movwf	4054,c	;volatile
   977                           
   978                           ;main.c: 277: INTCONbits.TMR0IE = 1;
   979  000DB8  8AF2               	bsf	intcon,5,c	;volatile
   980                           
   981                           ;main.c: 278: INTCON2bits.TMR0IP = 1;
   982  000DBA  84F1               	bsf	intcon2,2,c	;volatile
   983                           
   984                           ;main.c: 279: RCONbits.IPEN = 0;
   985  000DBC  9ED0               	bcf	4048,7,c	;volatile
   986                           
   987                           ;main.c: 280: INTCONbits.GIE_GIEH = 1;
   988  000DBE  8EF2               	bsf	intcon,7,c	;volatile
   989                           
   990                           ;main.c: 281: INTCONbits.PEIE_GIEL = 0;
   991  000DC0  9CF2               	bcf	intcon,6,c	;volatile
   992                           
   993                           ;main.c: 282: PORTBbits.RB6 = 0;
   994  000DC2  9C81               	bcf	3969,6,c	;volatile
   995                           
   996                           ;main.c: 283: int estado = 0;
   997  000DC4  0E00               	movlw	0
   998  000DC6  0101               	movlb	1	; () banked
   999  000DC8  6F18               	movwf	(main@estado+1)& (0+255),b
  1000  000DCA  0E00               	movlw	0
  1001  000DCC  6F17               	movwf	main@estado& (0+255),b
  1002  000DCE                     
  1003                           ;main.c: 285: if (PORTEbits.RE0 == 0) {
  1004                           
  1005                           ; BSR set to: 1
  1006  000DCE  B084               	btfsc	3972,0,c	;volatile
  1007  000DD0  D005               	goto	l214
  1008                           
  1009                           ;main.c: 286: enS = 1;
  1010  000DD2  0E00               	movlw	0
  1011  000DD4  0100               	movlb	0	; () banked
  1012  000DD6  6F9E               	movwf	(_enS+1)& (0+255),b
  1013  000DD8  0E01               	movlw	1
  1014  000DDA  6F9D               	movwf	_enS& (0+255),b
  1015  000DDC                     l214:
  1016                           
  1017                           ;main.c: 287: }
  1018                           ;main.c: 288: if (PORTEbits.RE1 == 0) {
  1019                           
  1020                           ; BSR set to: 0
  1021  000DDC  B284               	btfsc	3972,1,c	;volatile
  1022  000DDE  D005               	goto	l215
  1023                           
  1024                           ;main.c: 289: enS = 0;
  1025  000DE0  0E00               	movlw	0
  1026  000DE2  0100               	movlb	0	; () banked
  1027  000DE4  6F9E               	movwf	(_enS+1)& (0+255),b
  1028  000DE6  0E00               	movlw	0
  1029  000DE8  6F9D               	movwf	_enS& (0+255),b
  1030  000DEA                     l215:
  1031                           
  1032                           ;main.c: 290: }
  1033                           ;main.c: 291: if (PORTEbits.RE2 == 0) {
  1034                           
  1035                           ; BSR set to: 0
  1036  000DEA  B484               	btfsc	3972,2,c	;volatile
  1037  000DEC  D00E               	goto	l216
  1038                           
  1039                           ;main.c: 292: PORTBbits.RB7 = 1;
  1040  000DEE  8E81               	bsf	3969,7,c	;volatile
  1041                           
  1042                           ;main.c: 293: delay502 = tick_time + 100;
  1043  000DF0  0E64               	movlw	100
  1044  000DF2  2449               	addwf	_tick_time,w,c
  1045  000DF4  0100               	movlb	0	; () banked
  1046  000DF6  6F64               	movwf	_delay502& (0+255),b
  1047  000DF8  0E00               	movlw	0
  1048  000DFA  204A               	addwfc	_tick_time+1,w,c
  1049  000DFC  6F65               	movwf	(_delay502+1)& (0+255),b
  1050  000DFE  0E00               	movlw	0
  1051  000E00  204B               	addwfc	_tick_time+2,w,c
  1052  000E02  6F66               	movwf	(_delay502+2)& (0+255),b
  1053  000E04  0E00               	movlw	0
  1054  000E06  204C               	addwfc	_tick_time+3,w,c
  1055  000E08  6F67               	movwf	(_delay502+3)& (0+255),b
  1056  000E0A                     l216:
  1057                           
  1058                           ;main.c: 294: }
  1059                           ;main.c: 295: if (tick_time > delay502) {
  1060  000E0A  5049               	movf	_tick_time,w,c
  1061  000E0C  0100               	movlb	0	; () banked
  1062  000E0E  5D64               	subwf	_delay502& (0+255),w,b
  1063  000E10  504A               	movf	_tick_time+1,w,c
  1064  000E12  5965               	subwfb	(_delay502+1)& (0+255),w,b
  1065  000E14  504B               	movf	_tick_time+2,w,c
  1066  000E16  5966               	subwfb	(_delay502+2)& (0+255),w,b
  1067  000E18  504C               	movf	_tick_time+3,w,c
  1068  000E1A  5967               	subwfb	(_delay502+3)& (0+255),w,b
  1069  000E1C  A0D8               	btfss	status,0,c
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;main.c: 296: PORTBbits.RB7 = 0;
  1073  000E1E  9E81               	bcf	3969,7,c	;volatile
  1074                           
  1075                           ; BSR set to: 0
  1076                           ;main.c: 297: }
  1077                           ;main.c: 298: if (tick_time > delay1000) {
  1078                           
  1079                           ; BSR set to: 0
  1080  000E20  5049               	movf	_tick_time,w,c
  1081  000E22  5D60               	subwf	_delay1000& (0+255),w,b
  1082  000E24  504A               	movf	_tick_time+1,w,c
  1083  000E26  5961               	subwfb	(_delay1000+1)& (0+255),w,b
  1084  000E28  504B               	movf	_tick_time+2,w,c
  1085  000E2A  5962               	subwfb	(_delay1000+2)& (0+255),w,b
  1086  000E2C  504C               	movf	_tick_time+3,w,c
  1087  000E2E  5963               	subwfb	(_delay1000+3)& (0+255),w,b
  1088  000E30  B0D8               	btfsc	status,0,c
  1089  000E32  D01B               	goto	l218
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 299: delay1000 = tick_time + 400;
  1093  000E34  0E90               	movlw	144
  1094  000E36  2449               	addwf	_tick_time,w,c
  1095  000E38  6F60               	movwf	_delay1000& (0+255),b
  1096  000E3A  0E01               	movlw	1
  1097  000E3C  204A               	addwfc	_tick_time+1,w,c
  1098  000E3E  6F61               	movwf	(_delay1000+1)& (0+255),b
  1099  000E40  0E00               	movlw	0
  1100  000E42  204B               	addwfc	_tick_time+2,w,c
  1101  000E44  6F62               	movwf	(_delay1000+2)& (0+255),b
  1102  000E46  0E00               	movlw	0
  1103  000E48  204C               	addwfc	_tick_time+3,w,c
  1104  000E4A  6F63               	movwf	(_delay1000+3)& (0+255),b
  1105                           
  1106                           ;main.c: 300: PORTBbits.RB5 = ~PORTBbits.RB5;
  1107  000E4C  AA81               	btfss	3969,5,c	;volatile
  1108  000E4E  D002               	goto	u3410
  1109  000E50  0E01               	movlw	1
  1110  000E52  D001               	goto	u3416
  1111  000E54                     u3410:
  1112  000E54  0E00               	movlw	0
  1113  000E56                     u3416:
  1114  000E56  0AFF               	xorlw	255
  1115  000E58  0101               	movlb	1	; () banked
  1116  000E5A  6F16               	movwf	??_main& (0+255),b
  1117  000E5C  3B16               	swapf	??_main& (0+255),f,b
  1118  000E5E  4716               	rlncf	??_main& (0+255),f,b
  1119  000E60  5081               	movf	3969,w,c	;volatile
  1120  000E62  1916               	xorwf	??_main& (0+255),w,b
  1121  000E64  0BDF               	andlw	-33
  1122  000E66  1916               	xorwf	??_main& (0+255),w,b
  1123  000E68  6E81               	movwf	3969,c	;volatile
  1124  000E6A                     l218:
  1125                           
  1126                           ;main.c: 301: }
  1127                           ;main.c: 303: if (tick_time > delay100) {
  1128  000E6A  5049               	movf	_tick_time,w,c
  1129  000E6C  0100               	movlb	0	; () banked
  1130  000E6E  5D70               	subwf	_delay100& (0+255),w,b
  1131  000E70  504A               	movf	_tick_time+1,w,c
  1132  000E72  5971               	subwfb	(_delay100+1)& (0+255),w,b
  1133  000E74  504B               	movf	_tick_time+2,w,c
  1134  000E76  5972               	subwfb	(_delay100+2)& (0+255),w,b
  1135  000E78  504C               	movf	_tick_time+3,w,c
  1136  000E7A  5973               	subwfb	(_delay100+3)& (0+255),w,b
  1137  000E7C  B0D8               	btfsc	status,0,c
  1138  000E7E  D7A7               	goto	l213
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;main.c: 305: delay100 = tick_time + 100;
  1142  000E80  0E64               	movlw	100
  1143  000E82  2449               	addwf	_tick_time,w,c
  1144  000E84  6F70               	movwf	_delay100& (0+255),b
  1145  000E86  0E00               	movlw	0
  1146  000E88  204A               	addwfc	_tick_time+1,w,c
  1147  000E8A  6F71               	movwf	(_delay100+1)& (0+255),b
  1148  000E8C  0E00               	movlw	0
  1149  000E8E  204B               	addwfc	_tick_time+2,w,c
  1150  000E90  6F72               	movwf	(_delay100+2)& (0+255),b
  1151  000E92  0E00               	movlw	0
  1152  000E94  204C               	addwfc	_tick_time+3,w,c
  1153  000E96  6F73               	movwf	(_delay100+3)& (0+255),b
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;main.c: 306: Lcd_Clear();
  1157  000E98  ECC1  F00F         	call	_Lcd_Clear	;wreg free
  1158                           
  1159                           ;main.c: 307: sprintf(buf, "r:%i", ref);
  1160  000E9C  0E9F               	movlw	low _buf
  1161  000E9E  0100               	movlb	0	; () banked
  1162  000EA0  6FD2               	movwf	sprintf@sp& (0+255),b
  1163  000EA2  0E00               	movlw	high _buf
  1164  000EA4  6FD3               	movwf	(sprintf@sp+1)& (0+255),b
  1165  000EA6  0E1A               	movlw	low STR_1
  1166  000EA8  6FD4               	movwf	sprintf@f& (0+255),b
  1167  000EAA  0E08               	movlw	high STR_1
  1168  000EAC  6FD5               	movwf	(sprintf@f+1)& (0+255),b
  1169  000EAE  C078  F0D6         	movff	_ref,?_sprintf+4
  1170  000EB2  C079  F0D7         	movff	_ref+1,?_sprintf+5
  1171  000EB6  C07A  F0D8         	movff	_ref+2,?_sprintf+6
  1172  000EBA  C07B  F0D9         	movff	_ref+3,?_sprintf+7
  1173  000EBE  ECDD  F009         	call	_sprintf	;wreg free
  1174                           
  1175                           ;main.c: 308: Lcd_Set_Cursor(1, 1);
  1176  000EC2  0E01               	movlw	1
  1177  000EC4  0100               	movlb	0	; () banked
  1178  000EC6  6FCC               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1179  000EC8  0E01               	movlw	1
  1180  000ECA  EC4B  F00E         	call	_Lcd_Set_Cursor
  1181                           
  1182                           ;main.c: 309: Lcd_Write_String(buf);
  1183  000ECE  0E9F               	movlw	low _buf
  1184  000ED0  0100               	movlb	0	; () banked
  1185  000ED2  6FCE               	movwf	Lcd_Write_String@a& (0+255),b
  1186  000ED4  0E00               	movlw	high _buf
  1187  000ED6  6FCF               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1188  000ED8  EC4F  F00F         	call	_Lcd_Write_String	;wreg free
  1189                           
  1190                           ;main.c: 310: sprintf(buf, "p:%i", pwm);
  1191  000EDC  0E9F               	movlw	low _buf
  1192  000EDE  0100               	movlb	0	; () banked
  1193  000EE0  6FD2               	movwf	sprintf@sp& (0+255),b
  1194  000EE2  0E00               	movlw	high _buf
  1195  000EE4  6FD3               	movwf	(sprintf@sp+1)& (0+255),b
  1196  000EE6  0E15               	movlw	low STR_2
  1197  000EE8  6FD4               	movwf	sprintf@f& (0+255),b
  1198  000EEA  0E08               	movlw	high STR_2
  1199  000EEC  6FD5               	movwf	(sprintf@f+1)& (0+255),b
  1200  000EEE  C04D  F0D6         	movff	_pwm,?_sprintf+4
  1201  000EF2  C04E  F0D7         	movff	_pwm+1,?_sprintf+5
  1202  000EF6  C04F  F0D8         	movff	_pwm+2,?_sprintf+6
  1203  000EFA  C050  F0D9         	movff	_pwm+3,?_sprintf+7
  1204  000EFE  ECDD  F009         	call	_sprintf	;wreg free
  1205                           
  1206                           ;main.c: 311: Lcd_Set_Cursor(1, 7);
  1207  000F02  0E07               	movlw	7
  1208  000F04  0100               	movlb	0	; () banked
  1209  000F06  6FCC               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1210  000F08  0E01               	movlw	1
  1211  000F0A  EC4B  F00E         	call	_Lcd_Set_Cursor
  1212                           
  1213                           ;main.c: 312: Lcd_Write_String(buf);
  1214  000F0E  0E9F               	movlw	low _buf
  1215  000F10  0100               	movlb	0	; () banked
  1216  000F12  6FCE               	movwf	Lcd_Write_String@a& (0+255),b
  1217  000F14  0E00               	movlw	high _buf
  1218  000F16  6FCF               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1219  000F18  EC4F  F00F         	call	_Lcd_Write_String	;wreg free
  1220                           
  1221                           ;main.c: 313: sprintf(buf2, "f:%i", fb);
  1222  000F1C  0E00               	movlw	low _buf2
  1223  000F1E  0100               	movlb	0	; () banked
  1224  000F20  6FD2               	movwf	sprintf@sp& (0+255),b
  1225  000F22  0E01               	movlw	high _buf2
  1226  000F24  6FD3               	movwf	(sprintf@sp+1)& (0+255),b
  1227  000F26  0E10               	movlw	low STR_3
  1228  000F28  6FD4               	movwf	sprintf@f& (0+255),b
  1229  000F2A  0E08               	movlw	high STR_3
  1230  000F2C  6FD5               	movwf	(sprintf@f+1)& (0+255),b
  1231  000F2E  C074  F0D6         	movff	_fb,?_sprintf+4
  1232  000F32  C075  F0D7         	movff	_fb+1,?_sprintf+5
  1233  000F36  C076  F0D8         	movff	_fb+2,?_sprintf+6
  1234  000F3A  C077  F0D9         	movff	_fb+3,?_sprintf+7
  1235  000F3E  ECDD  F009         	call	_sprintf	;wreg free
  1236                           
  1237                           ;main.c: 314: Lcd_Set_Cursor(2, 1);
  1238  000F42  0E01               	movlw	1
  1239  000F44  0100               	movlb	0	; () banked
  1240  000F46  6FCC               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1241  000F48  0E02               	movlw	2
  1242  000F4A  EC4B  F00E         	call	_Lcd_Set_Cursor
  1243                           
  1244                           ;main.c: 315: Lcd_Write_String(buf2);
  1245  000F4E  0E00               	movlw	low _buf2
  1246  000F50  0100               	movlb	0	; () banked
  1247  000F52  6FCE               	movwf	Lcd_Write_String@a& (0+255),b
  1248  000F54  0E01               	movlw	high _buf2
  1249  000F56  6FCF               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1250  000F58  EC4F  F00F         	call	_Lcd_Write_String	;wreg free
  1251                           
  1252                           ;main.c: 316: sprintf(buf2, "e:%i", aux);
  1253  000F5C  0E00               	movlw	low _buf2
  1254  000F5E  0100               	movlb	0	; () banked
  1255  000F60  6FD2               	movwf	sprintf@sp& (0+255),b
  1256  000F62  0E01               	movlw	high _buf2
  1257  000F64  6FD3               	movwf	(sprintf@sp+1)& (0+255),b
  1258  000F66  0E0B               	movlw	low STR_4
  1259  000F68  6FD4               	movwf	sprintf@f& (0+255),b
  1260  000F6A  0E08               	movlw	high STR_4
  1261  000F6C  6FD5               	movwf	(sprintf@f+1)& (0+255),b
  1262  000F6E  C051  F0D6         	movff	_aux,?_sprintf+4
  1263  000F72  C052  F0D7         	movff	_aux+1,?_sprintf+5
  1264  000F76  ECDD  F009         	call	_sprintf	;wreg free
  1265                           
  1266                           ;main.c: 317: Lcd_Set_Cursor(2, 7);
  1267  000F7A  0E07               	movlw	7
  1268  000F7C  0100               	movlb	0	; () banked
  1269  000F7E  6FCC               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1270  000F80  0E02               	movlw	2
  1271  000F82  EC4B  F00E         	call	_Lcd_Set_Cursor
  1272                           
  1273                           ;main.c: 318: Lcd_Write_String(buf2);
  1274  000F86  0E00               	movlw	low _buf2
  1275  000F88  0100               	movlb	0	; () banked
  1276  000F8A  6FCE               	movwf	Lcd_Write_String@a& (0+255),b
  1277  000F8C  0E01               	movlw	high _buf2
  1278  000F8E  6FCF               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1279  000F90  EC4F  F00F         	call	_Lcd_Write_String	;wreg free
  1280  000F94  D71C               	goto	l213
  1281  000F96                     __end_of_main:
  1282                           	opt stack 0
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           intcon	equ	0xFF2
  1288                           intcon2	equ	0xFF1
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _sprintf *****************
  1294 ;; Defined at:
  1295 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  sp              2   35[BANK0 ] PTR unsigned char 
  1298 ;;		 -> buf2(16), buf(16), 
  1299 ;;  f               2   37[BANK0 ] PTR const unsigned char 
  1300 ;;		 -> STR_4(5), STR_3(5), STR_2(5), STR_1(5), 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  tmpval          4    0        struct .
  1303 ;;  cp              3    0        PTR const unsigned char 
  1304 ;;  val             2   48[BANK0 ] unsigned int 
  1305 ;;  ap              2   44[BANK0 ] PTR void [1]
  1306 ;;		 -> ?_sprintf(2), 
  1307 ;;  len             2    0        unsigned int 
  1308 ;;  c               1   50[BANK0 ] char 
  1309 ;;  prec            1   47[BANK0 ] char 
  1310 ;;  flag            1   46[BANK0 ] unsigned char 
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  2   35[BANK0 ] int 
  1313 ;; Registers used:
  1314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1320 ;;      Params:         0       8       0       0       0       0       0       0       0
  1321 ;;      Locals:         0       7       0       0       0       0       0       0       0
  1322 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1323 ;;      Totals:         0      16       0       0       0       0       0       0       0
  1324 ;;Total ram usage:       16 bytes
  1325 ;; Hardware stack levels used:    1
  1326 ;; Hardware stack levels required when called:    5
  1327 ;; This function calls:
  1328 ;;		___lwdiv
  1329 ;;		___lwmod
  1330 ;; This function is called by:
  1331 ;;		_main
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text1
  1336  0013BA                     __ptext1:
  1337                           	opt stack 0
  1338  0013BA                     _sprintf:
  1339                           	opt stack 25
  1340                           
  1341                           ;doprnt.c: 494: va_list ap;
  1342                           ;doprnt.c: 499: signed char c;
  1343                           ;doprnt.c: 506: signed char prec;
  1344                           ;doprnt.c: 508: unsigned char flag;
  1345                           ;doprnt.c: 523: union {
  1346                           ;doprnt.c: 524: unsigned long vd;
  1347                           ;doprnt.c: 525: double integ;
  1348                           ;doprnt.c: 526: } tmpval;
  1349                           ;doprnt.c: 528: unsigned int val;
  1350                           ;doprnt.c: 529: unsigned len;
  1351                           ;doprnt.c: 530: const char * cp;
  1352                           ;doprnt.c: 533: *ap = __va_start();
  1353                           
  1354                           ;incstack = 0
  1355  0013BA  0ED6               	movlw	low (?_sprintf+4)
  1356  0013BC  0100               	movlb	0	; () banked
  1357  0013BE  6FDB               	movwf	sprintf@ap& (0+255),b
  1358  0013C0  0E00               	movlw	high (?_sprintf+4)
  1359  0013C2  6FDC               	movwf	(sprintf@ap+1)& (0+255),b
  1360                           
  1361                           ;doprnt.c: 536: while(c = *f++) {
  1362  0013C4  D08E               	goto	u3200
  1363  0013C6                     
  1364                           ; BSR set to: 0
  1365                           ;doprnt.c: 538: if(c != '%')
  1366                           
  1367                           ; BSR set to: 0
  1368  0013C6  0E25               	movlw	37
  1369  0013C8  19E1               	xorwf	sprintf@c& (0+255),w,b
  1370  0013CA  B4D8               	btfsc	status,2,c
  1371  0013CC  D009               	goto	l233
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;doprnt.c: 540: {
  1375                           ;doprnt.c: 541: ((*sp++ = (c)));
  1376  0013CE  C0D2  FFD9         	movff	sprintf@sp,fsr2l
  1377  0013D2  C0D3  FFDA         	movff	sprintf@sp+1,fsr2h
  1378  0013D6  C0E1  FFDF         	movff	sprintf@c,indf2
  1379                           
  1380                           ; BSR set to: 0
  1381  0013DA  4BD2               	infsnz	sprintf@sp& (0+255),f,b
  1382  0013DC  2BD3               	incf	(sprintf@sp+1)& (0+255),f,b
  1383                           
  1384                           ;doprnt.c: 542: continue;
  1385  0013DE  D081               	goto	u3200
  1386  0013E0                     l233:
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;doprnt.c: 543: }
  1390                           ;doprnt.c: 548: flag = 0;
  1391                           
  1392                           ; BSR set to: 0
  1393  0013E0  0E00               	movlw	0
  1394  0013E2  6FDD               	movwf	sprintf@flag& (0+255),b
  1395                           
  1396                           ; BSR set to: 0
  1397                           
  1398                           ; BSR set to: 0
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;doprnt.c: 822: }
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;doprnt.c: 813: continue;
  1405                           
  1406                           ;doprnt.c: 802: default:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 698: case 'i':
  1410                           ;doprnt.c: 699: break;
  1411                           
  1412                           ; BSR set to: 0
  1413                           
  1414                           ;doprnt.c: 697: case 'd':
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;doprnt.c: 638: goto alldone;
  1418                           
  1419                           ;doprnt.c: 637: case 0:
  1420                           
  1421                           ;doprnt.c: 635: switch(c = *f++) {
  1422  0013E4  C0D4  FFF6         	movff	sprintf@f,tblptrl
  1423  0013E8  C0D5  FFF7         	movff	sprintf@f+1,tblptrh
  1424  0013EC  4BD4               	infsnz	sprintf@f& (0+255),f,b
  1425  0013EE  2BD5               	incf	(sprintf@f+1)& (0+255),f,b
  1426  0013F0                     	if	0	;tblptru may be non-zero
  1427  0013F0                     	endif
  1428  0013F0                     	if	0	;tblptru may be non-zero
  1429  0013F0                     	endif
  1430  0013F0  0008               	tblrd		*
  1431  0013F2  CFF5 F0E1          	movff	tablat,sprintf@c
  1432  0013F6  51E1               	movf	sprintf@c& (0+255),w,b
  1433                           
  1434                           ; Switch size 1, requested type "space"
  1435                           ; Number of cases is 3, Range of values is 0 to 105
  1436                           ; switch strategies available:
  1437                           ; Name         Instructions Cycles
  1438                           ; simple_byte           10     6 (average)
  1439                           ;	Chosen strategy is simple_byte
  1440  0013F8  0A00               	xorlw	0	; case 0
  1441  0013FA  B4D8               	btfsc	status,2,c
  1442  0013FC  D07E               	goto	u3210
  1443  0013FE  0A64               	xorlw	100	; case 100
  1444  001400  B4D8               	btfsc	status,2,c
  1445  001402  D003               	goto	l239
  1446  001404  0A0D               	xorlw	13	; case 105
  1447  001406  A4D8               	btfss	status,2,c
  1448  001408  D06C               	goto	u3200
  1449  00140A                     l239:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;doprnt.c: 1253: {
  1453                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1454                           
  1455                           ; BSR set to: 0
  1456  00140A  C0DB  FFD9         	movff	sprintf@ap,fsr2l
  1457  00140E  C0DC  FFDA         	movff	sprintf@ap+1,fsr2h
  1458  001412  CFDE F0DF          	movff	postinc2,sprintf@val
  1459  001416  CFDD F0E0          	movff	postdec2,sprintf@val+1
  1460                           
  1461                           ; BSR set to: 0
  1462  00141A  0E02               	movlw	2
  1463  00141C  27DB               	addwf	sprintf@ap& (0+255),f,b
  1464  00141E  0E00               	movlw	0
  1465  001420  23DC               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;doprnt.c: 1261: if((int)val < 0) {
  1469  001422  AFE0               	btfss	(sprintf@val+1)& (0+255),7,b
  1470  001424  D006               	goto	l241
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;doprnt.c: 1262: flag |= 0x03;
  1474  001426  0E03               	movlw	3
  1475  001428  13DD               	iorwf	sprintf@flag& (0+255),f,b
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 1263: val = -val;
  1479  00142A  6DDF               	negf	sprintf@val& (0+255),b
  1480  00142C  1FE0               	comf	(sprintf@val+1)& (0+255),f,b
  1481  00142E  B0D8               	btfsc	status,0,c
  1482  001430  2BE0               	incf	(sprintf@val+1)& (0+255),f,b
  1483  001432                     l241:
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;doprnt.c: 1264: }
  1487                           ;doprnt.c: 1266: }
  1488                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1489                           
  1490                           ; BSR set to: 0
  1491  001432  0E01               	movlw	1
  1492  001434  6FE1               	movwf	sprintf@c& (0+255),b
  1493  001436                     l2894:
  1494                           
  1495                           ; BSR set to: 0
  1496  001436  0E05               	movlw	5
  1497  001438  19E1               	xorwf	sprintf@c& (0+255),w,b
  1498  00143A  B4D8               	btfsc	status,2,c
  1499  00143C  D012               	goto	u3180
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;doprnt.c: 1306: if(val < dpowers[c])
  1503                           
  1504                           ; BSR set to: 0
  1505                           
  1506                           ; BSR set to: 0
  1507  00143E  51E1               	movf	sprintf@c& (0+255),w,b
  1508  001440  0D02               	mullw	2
  1509  001442  0E01               	movlw	low _dpowers
  1510  001444  24F3               	addwf	prodl,w,c
  1511  001446  6EF6               	movwf	tblptrl,c
  1512  001448  0E08               	movlw	high _dpowers
  1513  00144A  20F4               	addwfc	prodh,w,c
  1514  00144C  6EF7               	movwf	tblptrh,c
  1515  00144E                     	if	0	;There are less than 3 active tblptr bytes
  1516  00144E                     	endif
  1517  00144E  0009               	tblrd		*+
  1518  001450  50F5               	movf	tablat,w,c
  1519  001452  5DDF               	subwf	sprintf@val& (0+255),w,b
  1520  001454  0009               	tblrd		*+
  1521  001456  50F5               	movf	tablat,w,c
  1522  001458  59E0               	subwfb	(sprintf@val+1)& (0+255),w,b
  1523  00145A  A0D8               	btfss	status,0,c
  1524  00145C  D002               	goto	u3180
  1525                           
  1526                           ; BSR set to: 0
  1527                           
  1528                           ; BSR set to: 0
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;doprnt.c: 1307: break;
  1532  00145E  2BE1               	incf	sprintf@c& (0+255),f,b
  1533  001460  D7EA               	goto	l2894
  1534  001462                     u3180:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;doprnt.c: 1422: {
  1538                           ;doprnt.c: 1438: if(flag & 0x03)
  1539                           
  1540                           ; BSR set to: 0
  1541  001462  C0DD  F0DA         	movff	sprintf@flag,??_sprintf
  1542  001466  0E03               	movlw	3
  1543  001468  17DA               	andwf	??_sprintf& (0+255),f,b
  1544  00146A  B4D8               	btfsc	status,2,c
  1545  00146C  D008               	goto	l245
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1549  00146E  C0D2  FFD9         	movff	sprintf@sp,fsr2l
  1550  001472  C0D3  FFDA         	movff	sprintf@sp+1,fsr2h
  1551  001476  0E2D               	movlw	45
  1552  001478  6EDF               	movwf	indf2,c
  1553                           
  1554                           ; BSR set to: 0
  1555  00147A  4BD2               	infsnz	sprintf@sp& (0+255),f,b
  1556  00147C  2BD3               	incf	(sprintf@sp+1)& (0+255),f,b
  1557  00147E                     l245:
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;doprnt.c: 1469: }
  1561                           ;doprnt.c: 1472: prec = c;
  1562                           
  1563                           ; BSR set to: 0
  1564  00147E  C0E1  F0DE         	movff	sprintf@c,sprintf@prec
  1565                           
  1566                           ;doprnt.c: 1474: while(prec--) {
  1567  001482  D02B               	goto	l246
  1568  001484                     
  1569                           ; BSR set to: 0
  1570                           ;doprnt.c: 1478: {
  1571                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1572                           
  1573                           ; BSR set to: 0
  1574  001484  51DE               	movf	sprintf@prec& (0+255),w,b
  1575  001486  0D02               	mullw	2
  1576  001488  0E01               	movlw	low _dpowers
  1577  00148A  24F3               	addwf	prodl,w,c
  1578  00148C  6EF6               	movwf	tblptrl,c
  1579  00148E  0E08               	movlw	high _dpowers
  1580  001490  20F4               	addwfc	prodh,w,c
  1581  001492  6EF7               	movwf	tblptrh,c
  1582  001494                     	if	0	;There are less than 3 active tblptr bytes
  1583  001494                     	endif
  1584  001494  0009               	tblrd		*+
  1585  001496  CFF5 F0C8          	movff	tablat,___lwdiv@divisor
  1586  00149A  000A               	tblrd		*-
  1587  00149C  CFF5 F0C9          	movff	tablat,___lwdiv@divisor+1
  1588  0014A0  C0DF  F0C6         	movff	sprintf@val,___lwdiv@dividend
  1589  0014A4  C0E0  F0C7         	movff	sprintf@val+1,___lwdiv@dividend+1
  1590  0014A8  ECA3  F00E         	call	___lwdiv	;wreg free
  1591  0014AC  C0C6  F0CD         	movff	?___lwdiv,___lwmod@dividend
  1592  0014B0  C0C7  F0CE         	movff	?___lwdiv+1,___lwmod@dividend+1
  1593  0014B4  0E00               	movlw	0
  1594  0014B6  0100               	movlb	0	; () banked
  1595  0014B8  6FD0               	movwf	(___lwmod@divisor+1)& (0+255),b
  1596  0014BA  0E0A               	movlw	10
  1597  0014BC  6FCF               	movwf	___lwmod@divisor& (0+255),b
  1598  0014BE  ECF2  F00E         	call	___lwmod	;wreg free
  1599  0014C2  0100               	movlb	0	; () banked
  1600  0014C4  51CD               	movf	?___lwmod& (0+255),w,b
  1601  0014C6  0F30               	addlw	48
  1602  0014C8  6FE1               	movwf	sprintf@c& (0+255),b
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;doprnt.c: 1523: }
  1606                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1607  0014CA  C0D2  FFD9         	movff	sprintf@sp,fsr2l
  1608  0014CE  C0D3  FFDA         	movff	sprintf@sp+1,fsr2h
  1609  0014D2  C0E1  FFDF         	movff	sprintf@c,indf2
  1610                           
  1611                           ; BSR set to: 0
  1612  0014D6  4BD2               	infsnz	sprintf@sp& (0+255),f,b
  1613  0014D8  2BD3               	incf	(sprintf@sp+1)& (0+255),f,b
  1614  0014DA                     l246:
  1615                           
  1616                           ; BSR set to: 0
  1617                           
  1618                           ; BSR set to: 0
  1619  0014DA  07DE               	decf	sprintf@prec& (0+255),f,b
  1620  0014DC  29DE               	incf	sprintf@prec& (0+255),w,b
  1621  0014DE  A4D8               	btfss	status,2,c
  1622  0014E0  D7D1               	goto	l247
  1623  0014E2                     u3200:
  1624                           
  1625                           ; BSR set to: 0
  1626                           
  1627                           ; BSR set to: 0
  1628                           
  1629                           ; BSR set to: 0
  1630  0014E2  C0D4  FFF6         	movff	sprintf@f,tblptrl
  1631  0014E6  C0D5  FFF7         	movff	sprintf@f+1,tblptrh
  1632  0014EA  4BD4               	infsnz	sprintf@f& (0+255),f,b
  1633  0014EC  2BD5               	incf	(sprintf@f+1)& (0+255),f,b
  1634  0014EE                     	if	0	;tblptru may be non-zero
  1635  0014EE                     	endif
  1636  0014EE                     	if	0	;tblptru may be non-zero
  1637  0014EE                     	endif
  1638  0014EE  0008               	tblrd		*
  1639  0014F0  CFF5 F0E1          	movff	tablat,sprintf@c
  1640  0014F4  51E1               	movf	sprintf@c& (0+255),w,b
  1641  0014F6  A4D8               	btfss	status,2,c
  1642  0014F8  D766               	goto	l232
  1643  0014FA                     u3210:
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;doprnt.c: 1538: *sp = 0;
  1647                           
  1648                           ; BSR set to: 0
  1649                           
  1650                           ;doprnt.c: 1525: }
  1651                           ;doprnt.c: 1533: }
  1652                           ;doprnt.c: 1535: alldone:
  1653                           
  1654                           ; BSR set to: 0
  1655  0014FA  C0D2  FFD9         	movff	sprintf@sp,fsr2l
  1656  0014FE  C0D3  FFDA         	movff	sprintf@sp+1,fsr2h
  1657  001502  0E00               	movlw	0
  1658  001504  6EDF               	movwf	indf2,c
  1659  001506  0012               	return	
  1660  001508                     __end_of_sprintf:
  1661                           	opt stack 0
  1662                           tblptru	equ	0xFF8
  1663                           tblptrh	equ	0xFF7
  1664                           tblptrl	equ	0xFF6
  1665                           tablat	equ	0xFF5
  1666                           prodh	equ	0xFF4
  1667                           prodl	equ	0xFF3
  1668                           intcon	equ	0xFF2
  1669                           intcon2	equ	0xFF1
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           indf2	equ	0xFDF
  1673                           postinc2	equ	0xFDE
  1674                           postdec2	equ	0xFDD
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679 ;; *************** function ___lwmod *****************
  1680 ;; Defined at:
  1681 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  dividend        2   30[BANK0 ] unsigned int 
  1684 ;;  divisor         2   32[BANK0 ] unsigned int 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  counter         1   34[BANK0 ] unsigned char 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  2   30[BANK0 ] unsigned int 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1696 ;;      Params:         0       4       0       0       0       0       0       0       0
  1697 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1699 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1700 ;;Total ram usage:        5 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    4
  1703 ;; This function calls:
  1704 ;;		Nothing
  1705 ;; This function is called by:
  1706 ;;		_sprintf
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text2
  1711  001DE4                     __ptext2:
  1712                           	opt stack 0
  1713  001DE4                     ___lwmod:
  1714                           	opt stack 25
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;incstack = 0
  1718  001DE4  0100               	movlb	0	; () banked
  1719  001DE6  51CF               	movf	___lwmod@divisor& (0+255),w,b
  1720  001DE8  11D0               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1721  001DEA  B4D8               	btfsc	status,2,c
  1722  001DEC  D018               	goto	l669
  1723                           
  1724                           ; BSR set to: 0
  1725  001DEE  0E01               	movlw	1
  1726  001DF0  6FD1               	movwf	___lwmod@counter& (0+255),b
  1727  001DF2  D004               	goto	l664
  1728  001DF4                     
  1729                           ; BSR set to: 0
  1730                           
  1731                           ; BSR set to: 0
  1732  001DF4  90D8               	bcf	status,0,c
  1733  001DF6  37CF               	rlcf	___lwmod@divisor& (0+255),f,b
  1734  001DF8  37D0               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1735  001DFA  2BD1               	incf	___lwmod@counter& (0+255),f,b
  1736  001DFC                     l664:
  1737                           
  1738                           ; BSR set to: 0
  1739                           
  1740                           ; BSR set to: 0
  1741  001DFC  AFD0               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1742  001DFE  D7FA               	goto	l665
  1743  001E00                     u3090:
  1744                           
  1745                           ; BSR set to: 0
  1746                           
  1747                           ; BSR set to: 0
  1748                           
  1749                           ; BSR set to: 0
  1750  001E00  51CF               	movf	___lwmod@divisor& (0+255),w,b
  1751  001E02  5DCD               	subwf	___lwmod@dividend& (0+255),w,b
  1752  001E04  51D0               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1753  001E06  59CE               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1754  001E08  A0D8               	btfss	status,0,c
  1755  001E0A  D004               	goto	l668
  1756                           
  1757                           ; BSR set to: 0
  1758  001E0C  51CF               	movf	___lwmod@divisor& (0+255),w,b
  1759  001E0E  5FCD               	subwf	___lwmod@dividend& (0+255),f,b
  1760  001E10  51D0               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1761  001E12  5BCE               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1762  001E14                     l668:
  1763                           
  1764                           ; BSR set to: 0
  1765                           
  1766                           ; BSR set to: 0
  1767  001E14  90D8               	bcf	status,0,c
  1768  001E16  33D0               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1769  001E18  33CF               	rrcf	___lwmod@divisor& (0+255),f,b
  1770                           
  1771                           ; BSR set to: 0
  1772  001E1A  2FD1               	decfsz	___lwmod@counter& (0+255),f,b
  1773  001E1C  D7F1               	goto	u3090
  1774  001E1E                     l669:
  1775                           
  1776                           ; BSR set to: 0
  1777                           
  1778                           ; BSR set to: 0
  1779  001E1E  C0CD  F0CD         	movff	___lwmod@dividend,?___lwmod
  1780  001E22  C0CE  F0CE         	movff	___lwmod@dividend+1,?___lwmod+1
  1781                           
  1782                           ; BSR set to: 0
  1783  001E26  0012               	return		;funcret
  1784  001E28                     __end_of___lwmod:
  1785                           	opt stack 0
  1786                           tblptru	equ	0xFF8
  1787                           tblptrh	equ	0xFF7
  1788                           tblptrl	equ	0xFF6
  1789                           tablat	equ	0xFF5
  1790                           prodh	equ	0xFF4
  1791                           prodl	equ	0xFF3
  1792                           intcon	equ	0xFF2
  1793                           intcon2	equ	0xFF1
  1794                           postinc0	equ	0xFEE
  1795                           wreg	equ	0xFE8
  1796                           indf2	equ	0xFDF
  1797                           postinc2	equ	0xFDE
  1798                           postdec2	equ	0xFDD
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8
  1802                           
  1803 ;; *************** function ___lwdiv *****************
  1804 ;; Defined at:
  1805 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  dividend        2   23[BANK0 ] unsigned int 
  1808 ;;  divisor         2   25[BANK0 ] unsigned int 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  quotient        2   28[BANK0 ] unsigned int 
  1811 ;;  counter         1   27[BANK0 ] unsigned char 
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  2   23[BANK0 ] unsigned int 
  1814 ;; Registers used:
  1815 ;;		wreg, status,2, status,0
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1821 ;;      Params:         0       4       0       0       0       0       0       0       0
  1822 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1824 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1825 ;;Total ram usage:        7 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    4
  1828 ;; This function calls:
  1829 ;;		Nothing
  1830 ;; This function is called by:
  1831 ;;		_sprintf
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text3
  1836  001D46                     __ptext3:
  1837                           	opt stack 0
  1838  001D46                     ___lwdiv:
  1839                           	opt stack 25
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;incstack = 0
  1843  001D46  0E00               	movlw	0
  1844  001D48  0100               	movlb	0	; () banked
  1845  001D4A  6FCC               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1846  001D4C  0E00               	movlw	0
  1847  001D4E  6FCB               	movwf	___lwdiv@quotient& (0+255),b
  1848                           
  1849                           ; BSR set to: 0
  1850  001D50  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  1851  001D52  11C9               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1852  001D54  B4D8               	btfsc	status,2,c
  1853  001D56  D01C               	goto	l659
  1854                           
  1855                           ; BSR set to: 0
  1856  001D58  0E01               	movlw	1
  1857  001D5A  6FCA               	movwf	___lwdiv@counter& (0+255),b
  1858  001D5C  D004               	goto	l654
  1859  001D5E                     
  1860                           ; BSR set to: 0
  1861                           
  1862                           ; BSR set to: 0
  1863  001D5E  90D8               	bcf	status,0,c
  1864  001D60  37C8               	rlcf	___lwdiv@divisor& (0+255),f,b
  1865  001D62  37C9               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1866  001D64  2BCA               	incf	___lwdiv@counter& (0+255),f,b
  1867  001D66                     l654:
  1868                           
  1869                           ; BSR set to: 0
  1870                           
  1871                           ; BSR set to: 0
  1872  001D66  AFC9               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1873  001D68  D7FA               	goto	l655
  1874  001D6A                     u3060:
  1875                           
  1876                           ; BSR set to: 0
  1877                           
  1878                           ; BSR set to: 0
  1879                           
  1880                           ; BSR set to: 0
  1881  001D6A  90D8               	bcf	status,0,c
  1882  001D6C  37CB               	rlcf	___lwdiv@quotient& (0+255),f,b
  1883  001D6E  37CC               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1884                           
  1885                           ; BSR set to: 0
  1886  001D70  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  1887  001D72  5DC6               	subwf	___lwdiv@dividend& (0+255),w,b
  1888  001D74  51C9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1889  001D76  59C7               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1890  001D78  A0D8               	btfss	status,0,c
  1891  001D7A  D005               	goto	l658
  1892                           
  1893                           ; BSR set to: 0
  1894  001D7C  51C8               	movf	___lwdiv@divisor& (0+255),w,b
  1895  001D7E  5FC6               	subwf	___lwdiv@dividend& (0+255),f,b
  1896  001D80  51C9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1897  001D82  5BC7               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1898                           
  1899                           ; BSR set to: 0
  1900  001D84  81CB               	bsf	___lwdiv@quotient& (0+255),0,b
  1901  001D86                     l658:
  1902                           
  1903                           ; BSR set to: 0
  1904                           
  1905                           ; BSR set to: 0
  1906  001D86  90D8               	bcf	status,0,c
  1907  001D88  33C9               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1908  001D8A  33C8               	rrcf	___lwdiv@divisor& (0+255),f,b
  1909                           
  1910                           ; BSR set to: 0
  1911  001D8C  2FCA               	decfsz	___lwdiv@counter& (0+255),f,b
  1912  001D8E  D7ED               	goto	u3060
  1913  001D90                     l659:
  1914                           
  1915                           ; BSR set to: 0
  1916                           
  1917                           ; BSR set to: 0
  1918  001D90  C0CB  F0C6         	movff	___lwdiv@quotient,?___lwdiv
  1919  001D94  C0CC  F0C7         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1920                           
  1921                           ; BSR set to: 0
  1922  001D98  0012               	return		;funcret
  1923  001D9A                     __end_of___lwdiv:
  1924                           	opt stack 0
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           prodh	equ	0xFF4
  1930                           prodl	equ	0xFF3
  1931                           intcon	equ	0xFF2
  1932                           intcon2	equ	0xFF1
  1933                           postinc0	equ	0xFEE
  1934                           wreg	equ	0xFE8
  1935                           indf2	equ	0xFDF
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _setup *****************
  1943 ;; Defined at:
  1944 ;;		line 223 in file "main.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1961 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1962 ;;Total ram usage:        0 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    7
  1965 ;; This function calls:
  1966 ;;		_ADC_init
  1967 ;;		_Lcd_Init
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text4
  1974  001E28                     __ptext4:
  1975                           	opt stack 0
  1976  001E28                     _setup:
  1977                           	opt stack 23
  1978                           
  1979                           ;main.c: 224: CMCON = 0x07;
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;incstack = 0
  1983  001E28  0E07               	movlw	7
  1984  001E2A  6EB4               	movwf	4020,c	;volatile
  1985                           
  1986                           ;main.c: 226: TRISA = 0b00000011;
  1987  001E2C  0E03               	movlw	3
  1988  001E2E  6E92               	movwf	3986,c	;volatile
  1989                           
  1990                           ;main.c: 227: TRISB = 0x00;
  1991  001E30  0E00               	movlw	0
  1992  001E32  6E93               	movwf	3987,c	;volatile
  1993                           
  1994                           ;main.c: 228: TRISC = 0x00;
  1995  001E34  0E00               	movlw	0
  1996  001E36  6E94               	movwf	3988,c	;volatile
  1997                           
  1998                           ;main.c: 229: TRISD = 0x00;
  1999  001E38  0E00               	movlw	0
  2000  001E3A  6E95               	movwf	3989,c	;volatile
  2001                           
  2002                           ;main.c: 230: TRISE = 0x0F;
  2003  001E3C  0E0F               	movlw	15
  2004  001E3E  6E96               	movwf	3990,c	;volatile
  2005                           
  2006                           ;main.c: 231: PORTB = 0xFF;
  2007  001E40  6881               	setf	3969,c	;volatile
  2008                           
  2009                           ;main.c: 232: ADC_init();
  2010  001E42  ECC8  F00F         	call	_ADC_init	;wreg free
  2011                           
  2012                           ;main.c: 233: Lcd_Init();
  2013  001E46  EC14  F00E         	call	_Lcd_Init	;wreg free
  2014                           
  2015                           ;main.c: 234: ADCON0bits.ADON = 1;
  2016  001E4A  80C2               	bsf	4034,0,c	;volatile
  2017                           
  2018                           ;main.c: 235: PORTDbits.RD2 = 0;
  2019  001E4C  9483               	bcf	3971,2,c	;volatile
  2020                           
  2021                           ;main.c: 237: T2CON = 0x07;
  2022  001E4E  0E07               	movlw	7
  2023  001E50  6ECA               	movwf	4042,c	;volatile
  2024                           
  2025                           ;main.c: 238: PR2 = 0x7F;
  2026  001E52  0E7F               	movlw	127
  2027  001E54  6ECB               	movwf	4043,c	;volatile
  2028                           
  2029                           ;main.c: 239: CCP1CON = 0x3C;
  2030  001E56  0E3C               	movlw	60
  2031  001E58  6EBD               	movwf	4029,c	;volatile
  2032                           
  2033                           ;main.c: 240: CCPR1L = 0x00;
  2034  001E5A  0E00               	movlw	0
  2035  001E5C  6EBE               	movwf	4030,c	;volatile
  2036                           
  2037                           ;main.c: 241: CCP1CONbits.DC1B0 = 0;
  2038  001E5E  98BD               	bcf	4029,4,c	;volatile
  2039                           
  2040                           ;main.c: 242: CCP1CONbits.DC1B1 = 0;
  2041  001E60  9ABD               	bcf	4029,5,c	;volatile
  2042  001E62  0012               	return		;funcret
  2043  001E64                     __end_of_setup:
  2044                           	opt stack 0
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           prodh	equ	0xFF4
  2050                           prodl	equ	0xFF3
  2051                           intcon	equ	0xFF2
  2052                           intcon2	equ	0xFF1
  2053                           postinc0	equ	0xFEE
  2054                           wreg	equ	0xFE8
  2055                           indf2	equ	0xFDF
  2056                           postinc2	equ	0xFDE
  2057                           postdec2	equ	0xFDD
  2058                           fsr2h	equ	0xFDA
  2059                           fsr2l	equ	0xFD9
  2060                           status	equ	0xFD8
  2061                           
  2062 ;; *************** function _Lcd_Init *****************
  2063 ;; Defined at:
  2064 ;;		line 165 in file "LCD.h"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;		None
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;		None
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2078 ;;      Params:         0       0       0       0       0       0       0       0       0
  2079 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2081 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2082 ;;Total ram usage:        0 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    6
  2085 ;; This function calls:
  2086 ;;		_Lcd_Cmd
  2087 ;;		_Lcd_Port
  2088 ;;		_atraso_ms
  2089 ;; This function is called by:
  2090 ;;		_setup
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text5
  2095  001C28                     __ptext5:
  2096                           	opt stack 0
  2097  001C28                     _Lcd_Init:
  2098                           	opt stack 23
  2099                           
  2100                           ;LCD.h: 166: Lcd_Port(0x00);
  2101                           
  2102                           ;incstack = 0
  2103  001C28  0E00               	movlw	0
  2104  001C2A  EC84  F00F         	call	_Lcd_Port
  2105                           
  2106                           ;LCD.h: 167: atraso_ms(45);
  2107  001C2E  0E00               	movlw	0
  2108  001C30  0100               	movlb	0	; () banked
  2109  001C32  6FC7               	movwf	(atraso_ms@val+1)& (0+255),b
  2110  001C34  0E2D               	movlw	45
  2111  001C36  6FC6               	movwf	atraso_ms@val& (0+255),b
  2112  001C38  EC32  F00F         	call	_atraso_ms	;wreg free
  2113                           
  2114                           ;LCD.h: 168: Lcd_Cmd(0x03);
  2115  001C3C  0E03               	movlw	3
  2116  001C3E  ECB0  F00F         	call	_Lcd_Cmd
  2117                           
  2118                           ;LCD.h: 169: atraso_ms(18);
  2119  001C42  0E00               	movlw	0
  2120  001C44  0100               	movlb	0	; () banked
  2121  001C46  6FC7               	movwf	(atraso_ms@val+1)& (0+255),b
  2122  001C48  0E12               	movlw	18
  2123  001C4A  6FC6               	movwf	atraso_ms@val& (0+255),b
  2124  001C4C  EC32  F00F         	call	_atraso_ms	;wreg free
  2125                           
  2126                           ;LCD.h: 170: Lcd_Cmd(0x03);
  2127  001C50  0E03               	movlw	3
  2128  001C52  ECB0  F00F         	call	_Lcd_Cmd
  2129                           
  2130                           ;LCD.h: 171: atraso_ms(20);
  2131  001C56  0E00               	movlw	0
  2132  001C58  0100               	movlb	0	; () banked
  2133  001C5A  6FC7               	movwf	(atraso_ms@val+1)& (0+255),b
  2134  001C5C  0E14               	movlw	20
  2135  001C5E  6FC6               	movwf	atraso_ms@val& (0+255),b
  2136  001C60  EC32  F00F         	call	_atraso_ms	;wreg free
  2137                           
  2138                           ;LCD.h: 172: Lcd_Cmd(0x03);
  2139  001C64  0E03               	movlw	3
  2140  001C66  ECB0  F00F         	call	_Lcd_Cmd
  2141                           
  2142                           ;LCD.h: 174: Lcd_Cmd(0x02);
  2143  001C6A  0E02               	movlw	2
  2144  001C6C  ECB0  F00F         	call	_Lcd_Cmd
  2145                           
  2146                           ;LCD.h: 175: Lcd_Cmd(0x02);
  2147  001C70  0E02               	movlw	2
  2148  001C72  ECB0  F00F         	call	_Lcd_Cmd
  2149                           
  2150                           ;LCD.h: 176: Lcd_Cmd(0x08);
  2151  001C76  0E08               	movlw	8
  2152  001C78  ECB0  F00F         	call	_Lcd_Cmd
  2153                           
  2154                           ;LCD.h: 177: Lcd_Cmd(0x00);
  2155  001C7C  0E00               	movlw	0
  2156  001C7E  ECB0  F00F         	call	_Lcd_Cmd
  2157                           
  2158                           ;LCD.h: 178: Lcd_Cmd(0x0C);
  2159  001C82  0E0C               	movlw	12
  2160  001C84  ECB0  F00F         	call	_Lcd_Cmd
  2161                           
  2162                           ;LCD.h: 179: Lcd_Cmd(0x00);
  2163  001C88  0E00               	movlw	0
  2164  001C8A  ECB0  F00F         	call	_Lcd_Cmd
  2165                           
  2166                           ;LCD.h: 180: Lcd_Cmd(0x06);
  2167  001C8E  0E06               	movlw	6
  2168  001C90  ECB0  F00F         	call	_Lcd_Cmd
  2169  001C94  0012               	return		;funcret
  2170  001C96                     __end_of_Lcd_Init:
  2171                           	opt stack 0
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           prodh	equ	0xFF4
  2177                           prodl	equ	0xFF3
  2178                           intcon	equ	0xFF2
  2179                           intcon2	equ	0xFF1
  2180                           postinc0	equ	0xFEE
  2181                           wreg	equ	0xFE8
  2182                           indf2	equ	0xFDF
  2183                           postinc2	equ	0xFDE
  2184                           postdec2	equ	0xFDD
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _ADC_init *****************
  2190 ;; Defined at:
  2191 ;;		line 73 in file "main.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2205 ;;      Params:         0       0       0       0       0       0       0       0       0
  2206 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2208 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2209 ;;Total ram usage:        0 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    4
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_setup
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text6
  2220  001F90                     __ptext6:
  2221                           	opt stack 0
  2222  001F90                     _ADC_init:
  2223                           	opt stack 25
  2224                           
  2225                           ;main.c: 74: ADCON1 = 0b00001101;
  2226                           
  2227                           ;incstack = 0
  2228  001F90  0E0D               	movlw	13
  2229  001F92  6EC1               	movwf	4033,c	;volatile
  2230                           
  2231                           ;main.c: 75: ADCON2 = 0b10001110;
  2232  001F94  0E8E               	movlw	142
  2233  001F96  6EC0               	movwf	4032,c	;volatile
  2234  001F98  0012               	return		;funcret
  2235  001F9A                     __end_of_ADC_init:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           tblptrh	equ	0xFF7
  2239                           tblptrl	equ	0xFF6
  2240                           tablat	equ	0xFF5
  2241                           prodh	equ	0xFF4
  2242                           prodl	equ	0xFF3
  2243                           intcon	equ	0xFF2
  2244                           intcon2	equ	0xFF1
  2245                           postinc0	equ	0xFEE
  2246                           wreg	equ	0xFE8
  2247                           indf2	equ	0xFDF
  2248                           postinc2	equ	0xFDE
  2249                           postdec2	equ	0xFDD
  2250                           fsr2h	equ	0xFDA
  2251                           fsr2l	equ	0xFD9
  2252                           status	equ	0xFD8
  2253                           
  2254 ;; *************** function ___fttol *****************
  2255 ;; Defined at:
  2256 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  f1              3   46[BANK0 ] float 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  lval            4    1[BANK1 ] unsigned long 
  2261 ;;  exp1            1    5[BANK1 ] unsigned char 
  2262 ;;  sign1           1    0[BANK1 ] unsigned char 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  4   46[BANK0 ] long 
  2265 ;; Registers used:
  2266 ;;		wreg, status,2, status,0
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2272 ;;      Params:         0       4       0       0       0       0       0       0       0
  2273 ;;      Locals:         0       0       6       0       0       0       0       0       0
  2274 ;;      Temps:          0       5       0       0       0       0       0       0       0
  2275 ;;      Totals:         0       9       6       0       0       0       0       0       0
  2276 ;;Total ram usage:       15 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    4
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_main
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text7
  2287  001508                     __ptext7:
  2288                           	opt stack 0
  2289  001508                     ___fttol:
  2290                           	opt stack 26
  2291                           
  2292                           ;incstack = 0
  2293  001508  C0DF  F0E1         	movff	___fttol@f1+2,??___fttol
  2294  00150C  0100               	movlb	0	; () banked
  2295  00150E  6BE2               	clrf	(??___fttol+1)& (0+255),b
  2296  001510  6BE3               	clrf	(??___fttol+2)& (0+255),b
  2297  001512  35DE               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2298  001514  37E1               	rlcf	??___fttol& (0+255),f,b
  2299  001516  E301               	bnc	u3281
  2300  001518  81E2               	bsf	(??___fttol+1)& (0+255),0,b
  2301  00151A                     u3281:
  2302  00151A  51E1               	movf	??___fttol& (0+255),w,b
  2303  00151C  0101               	movlb	1	; () banked
  2304  00151E  6F15               	movwf	___fttol@exp1& (0+255),b
  2305  001520  5115               	movf	___fttol@exp1& (0+255),w,b
  2306  001522  A4D8               	btfss	status,2,c
  2307  001524  D00A               	goto	l565
  2308                           
  2309                           ; BSR set to: 1
  2310  001526  0E00               	movlw	0
  2311  001528  0100               	movlb	0	; () banked
  2312  00152A  6FDD               	movwf	?___fttol& (0+255),b
  2313  00152C  0E00               	movlw	0
  2314  00152E  6FDE               	movwf	(?___fttol+1)& (0+255),b
  2315  001530  0E00               	movlw	0
  2316  001532  6FDF               	movwf	(?___fttol+2)& (0+255),b
  2317  001534  0E00               	movlw	0
  2318  001536  6FE0               	movwf	(?___fttol+3)& (0+255),b
  2319                           
  2320                           ; BSR set to: 0
  2321  001538  0012               	return	
  2322  00153A                     l565:
  2323                           
  2324                           ; BSR set to: 0
  2325  00153A  0E17               	movlw	23
  2326  00153C  0100               	movlb	0	; () banked
  2327  00153E  6FE1               	movwf	??___fttol& (0+255),b
  2328  001540  C0DD  F0E2         	movff	___fttol@f1,??___fttol+1
  2329  001544  C0DE  F0E3         	movff	___fttol@f1+1,??___fttol+2
  2330  001548  C0DF  F0E4         	movff	___fttol@f1+2,??___fttol+3
  2331  00154C  29E1               	incf	??___fttol& (0+255),w,b
  2332  00154E  6FE5               	movwf	(??___fttol+4)& (0+255),b
  2333  001550  D004               	goto	u3300
  2334  001552                     u3305:
  2335  001552  90D8               	bcf	status,0,c
  2336  001554  33E4               	rrcf	(??___fttol+3)& (0+255),f,b
  2337  001556  33E3               	rrcf	(??___fttol+2)& (0+255),f,b
  2338  001558  33E2               	rrcf	(??___fttol+1)& (0+255),f,b
  2339  00155A                     u3300:
  2340  00155A  2FE5               	decfsz	(??___fttol+4)& (0+255),f,b
  2341  00155C  D7FA               	goto	u3305
  2342  00155E  0100               	movlb	0	; () banked
  2343  001560  51E2               	movf	(??___fttol+1)& (0+255),w,b
  2344  001562  0101               	movlb	1	; () banked
  2345  001564  6F10               	movwf	___fttol@sign1& (0+255),b
  2346                           
  2347                           ; BSR set to: 1
  2348  001566  0100               	movlb	0	; () banked
  2349  001568  8FDE               	bsf	(___fttol@f1+1)& (0+255),7,b
  2350                           
  2351                           ; BSR set to: 0
  2352  00156A  0EFF               	movlw	255
  2353  00156C  17DD               	andwf	___fttol@f1& (0+255),f,b
  2354  00156E  0EFF               	movlw	255
  2355  001570  17DE               	andwf	(___fttol@f1+1)& (0+255),f,b
  2356  001572  0E00               	movlw	0
  2357  001574  17DF               	andwf	(___fttol@f1+2)& (0+255),f,b
  2358                           
  2359                           ; BSR set to: 0
  2360  001576  51DD               	movf	___fttol@f1& (0+255),w,b
  2361  001578  0101               	movlb	1	; () banked
  2362  00157A  6F11               	movwf	___fttol@lval& (0+255),b
  2363  00157C  0100               	movlb	0	; () banked
  2364  00157E  51DE               	movf	(___fttol@f1+1)& (0+255),w,b
  2365  001580  0101               	movlb	1	; () banked
  2366  001582  6F12               	movwf	(___fttol@lval+1)& (0+255),b
  2367  001584  0100               	movlb	0	; () banked
  2368  001586  51DF               	movf	(___fttol@f1+2)& (0+255),w,b
  2369  001588  0101               	movlb	1	; () banked
  2370  00158A  6F13               	movwf	(___fttol@lval+2)& (0+255),b
  2371  00158C  6B14               	clrf	(___fttol@lval+3)& (0+255),b
  2372                           
  2373                           ; BSR set to: 1
  2374  00158E  0E8E               	movlw	142
  2375  001590  5F15               	subwf	___fttol@exp1& (0+255),f,b
  2376                           
  2377                           ; BSR set to: 1
  2378  001592  AF15               	btfss	___fttol@exp1& (0+255),7,b
  2379  001594  D018               	goto	l567
  2380                           
  2381                           ; BSR set to: 1
  2382  001596  5115               	movf	___fttol@exp1& (0+255),w,b
  2383  001598  0A80               	xorlw	128
  2384  00159A  0F8F               	addlw	143
  2385  00159C  B0D8               	btfsc	status,0,c
  2386  00159E  D00A               	goto	l568
  2387                           
  2388                           ; BSR set to: 1
  2389  0015A0  0E00               	movlw	0
  2390  0015A2  0100               	movlb	0	; () banked
  2391  0015A4  6FDD               	movwf	?___fttol& (0+255),b
  2392  0015A6  0E00               	movlw	0
  2393  0015A8  6FDE               	movwf	(?___fttol+1)& (0+255),b
  2394  0015AA  0E00               	movlw	0
  2395  0015AC  6FDF               	movwf	(?___fttol+2)& (0+255),b
  2396  0015AE  0E00               	movlw	0
  2397  0015B0  6FE0               	movwf	(?___fttol+3)& (0+255),b
  2398                           
  2399                           ; BSR set to: 0
  2400  0015B2  0012               	return	
  2401  0015B4                     l568:
  2402                           
  2403                           ; BSR set to: 0
  2404                           
  2405                           ; BSR set to: 0
  2406  0015B4  0101               	movlb	1	; () banked
  2407  0015B6  90D8               	bcf	status,0,c
  2408  0015B8  3314               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2409  0015BA  3313               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2410  0015BC  3312               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2411  0015BE  3311               	rrcf	___fttol@lval& (0+255),f,b
  2412                           
  2413                           ; BSR set to: 1
  2414  0015C0  3F15               	incfsz	___fttol@exp1& (0+255),f,b
  2415  0015C2  D7F8               	goto	l568
  2416                           
  2417                           ; BSR set to: 1
  2418  0015C4  D018               	goto	u3340
  2419  0015C6                     l567:
  2420                           
  2421                           ; BSR set to: 1
  2422                           
  2423                           ; BSR set to: 1
  2424  0015C6  0E17               	movlw	23
  2425  0015C8  6515               	cpfsgt	___fttol@exp1& (0+255),b
  2426  0015CA  D011               	goto	l573
  2427                           
  2428                           ; BSR set to: 1
  2429  0015CC  0E00               	movlw	0
  2430  0015CE  0100               	movlb	0	; () banked
  2431  0015D0  6FDD               	movwf	?___fttol& (0+255),b
  2432  0015D2  0E00               	movlw	0
  2433  0015D4  6FDE               	movwf	(?___fttol+1)& (0+255),b
  2434  0015D6  0E00               	movlw	0
  2435  0015D8  6FDF               	movwf	(?___fttol+2)& (0+255),b
  2436  0015DA  0E00               	movlw	0
  2437  0015DC  6FE0               	movwf	(?___fttol+3)& (0+255),b
  2438                           
  2439                           ; BSR set to: 0
  2440  0015DE  0012               	return	
  2441  0015E0                     
  2442                           ; BSR set to: 0
  2443  0015E0  0101               	movlb	1	; () banked
  2444  0015E2  90D8               	bcf	status,0,c
  2445  0015E4  3711               	rlcf	___fttol@lval& (0+255),f,b
  2446  0015E6  3712               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2447  0015E8  3713               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2448  0015EA  3714               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2449  0015EC  0715               	decf	___fttol@exp1& (0+255),f,b
  2450  0015EE                     l573:
  2451                           
  2452                           ; BSR set to: 1
  2453  0015EE  0101               	movlb	1	; () banked
  2454  0015F0  5115               	movf	___fttol@exp1& (0+255),w,b
  2455  0015F2  A4D8               	btfss	status,2,c
  2456  0015F4  D7F5               	goto	l574
  2457  0015F6                     u3340:
  2458                           
  2459                           ; BSR set to: 1
  2460                           
  2461                           ; BSR set to: 1
  2462                           
  2463                           ; BSR set to: 1
  2464  0015F6  5110               	movf	___fttol@sign1& (0+255),w,b
  2465  0015F8  B4D8               	btfsc	status,2,c
  2466  0015FA  D008               	goto	l576
  2467                           
  2468                           ; BSR set to: 1
  2469  0015FC  1F14               	comf	(___fttol@lval+3)& (0+255),f,b
  2470  0015FE  1F13               	comf	(___fttol@lval+2)& (0+255),f,b
  2471  001600  1F12               	comf	(___fttol@lval+1)& (0+255),f,b
  2472  001602  6D11               	negf	___fttol@lval& (0+255),b
  2473  001604  0E00               	movlw	0
  2474  001606  2312               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2475  001608  2313               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2476  00160A  2314               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2477  00160C                     l576:
  2478                           
  2479                           ; BSR set to: 1
  2480                           
  2481                           ; BSR set to: 1
  2482  00160C  C111  F0DD         	movff	___fttol@lval,?___fttol
  2483  001610  C112  F0DE         	movff	___fttol@lval+1,?___fttol+1
  2484  001614  C113  F0DF         	movff	___fttol@lval+2,?___fttol+2
  2485  001618  C114  F0E0         	movff	___fttol@lval+3,?___fttol+3
  2486  00161C  0012               	return	
  2487  00161E                     __end_of___fttol:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           intcon	equ	0xFF2
  2496                           intcon2	equ	0xFF1
  2497                           postinc0	equ	0xFEE
  2498                           wreg	equ	0xFE8
  2499                           indf2	equ	0xFDF
  2500                           postinc2	equ	0xFDE
  2501                           postdec2	equ	0xFDD
  2502                           fsr2h	equ	0xFDA
  2503                           fsr2l	equ	0xFD9
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function ___ftmul *****************
  2507 ;; Defined at:
  2508 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  f1              3   31[BANK0 ] float 
  2511 ;;  f2              3   34[BANK0 ] float 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  f3_as_produc    3   41[BANK0 ] unsigned um
  2514 ;;  sign            1   45[BANK0 ] unsigned char 
  2515 ;;  cntr            1   44[BANK0 ] unsigned char 
  2516 ;;  exp             1   40[BANK0 ] unsigned char 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  3   31[BANK0 ] float 
  2519 ;; Registers used:
  2520 ;;		wreg, status,2, status,0, cstack
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2526 ;;      Params:         0       6       0       0       0       0       0       0       0
  2527 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2528 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2529 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2530 ;;Total ram usage:       15 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    5
  2533 ;; This function calls:
  2534 ;;		___ftpack
  2535 ;; This function is called by:
  2536 ;;		_main
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text8
  2541  00161E                     __ptext8:
  2542                           	opt stack 0
  2543  00161E                     ___ftmul:
  2544                           	opt stack 25
  2545                           
  2546                           ;incstack = 0
  2547  00161E  C0D0  F0D4         	movff	___ftmul@f1+2,??___ftmul
  2548  001622  0100               	movlb	0	; () banked
  2549  001624  6BD5               	clrf	(??___ftmul+1)& (0+255),b
  2550  001626  6BD6               	clrf	(??___ftmul+2)& (0+255),b
  2551  001628  35CF               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  2552  00162A  37D4               	rlcf	??___ftmul& (0+255),f,b
  2553  00162C  E301               	bnc	u3221
  2554  00162E  81D5               	bsf	(??___ftmul+1)& (0+255),0,b
  2555  001630                     u3221:
  2556  001630  51D4               	movf	??___ftmul& (0+255),w,b
  2557  001632  6FD7               	movwf	___ftmul@exp& (0+255),b
  2558  001634  51D7               	movf	___ftmul@exp& (0+255),w,b
  2559  001636  A4D8               	btfss	status,2,c
  2560  001638  D007               	goto	l544
  2561                           
  2562                           ; BSR set to: 0
  2563  00163A  0E00               	movlw	0
  2564  00163C  6FCE               	movwf	?___ftmul& (0+255),b
  2565  00163E  0E00               	movlw	0
  2566  001640  6FCF               	movwf	(?___ftmul+1)& (0+255),b
  2567  001642  0E00               	movlw	0
  2568  001644  6FD0               	movwf	(?___ftmul+2)& (0+255),b
  2569                           
  2570                           ; BSR set to: 0
  2571  001646  0012               	return	
  2572  001648                     l544:
  2573                           
  2574                           ; BSR set to: 0
  2575                           
  2576                           ; BSR set to: 0
  2577  001648  C0D3  F0D4         	movff	___ftmul@f2+2,??___ftmul
  2578  00164C  6BD5               	clrf	(??___ftmul+1)& (0+255),b
  2579  00164E  6BD6               	clrf	(??___ftmul+2)& (0+255),b
  2580  001650  35D2               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  2581  001652  37D4               	rlcf	??___ftmul& (0+255),f,b
  2582  001654  E301               	bnc	u3241
  2583  001656  81D5               	bsf	(??___ftmul+1)& (0+255),0,b
  2584  001658                     u3241:
  2585  001658  51D4               	movf	??___ftmul& (0+255),w,b
  2586  00165A  6FDC               	movwf	___ftmul@sign& (0+255),b
  2587  00165C  51DC               	movf	___ftmul@sign& (0+255),w,b
  2588  00165E  A4D8               	btfss	status,2,c
  2589  001660  D007               	goto	l546
  2590                           
  2591                           ; BSR set to: 0
  2592  001662  0E00               	movlw	0
  2593  001664  6FCE               	movwf	?___ftmul& (0+255),b
  2594  001666  0E00               	movlw	0
  2595  001668  6FCF               	movwf	(?___ftmul+1)& (0+255),b
  2596  00166A  0E00               	movlw	0
  2597  00166C  6FD0               	movwf	(?___ftmul+2)& (0+255),b
  2598                           
  2599                           ; BSR set to: 0
  2600  00166E  0012               	return	
  2601  001670                     l546:
  2602                           
  2603                           ; BSR set to: 0
  2604                           
  2605                           ; BSR set to: 0
  2606  001670  51DC               	movf	___ftmul@sign& (0+255),w,b
  2607  001672  0F7B               	addlw	123
  2608  001674  27D7               	addwf	___ftmul@exp& (0+255),f,b
  2609                           
  2610                           ; BSR set to: 0
  2611  001676  C0D0  F0DC         	movff	___ftmul@f1+2,___ftmul@sign
  2612  00167A  51D3               	movf	(___ftmul@f2+2)& (0+255),w,b
  2613  00167C  1BDC               	xorwf	___ftmul@sign& (0+255),f,b
  2614  00167E  0E80               	movlw	128
  2615  001680  17DC               	andwf	___ftmul@sign& (0+255),f,b
  2616                           
  2617                           ; BSR set to: 0
  2618  001682  8FCF               	bsf	(___ftmul@f1+1)& (0+255),7,b
  2619                           
  2620                           ; BSR set to: 0
  2621  001684  8FD2               	bsf	(___ftmul@f2+1)& (0+255),7,b
  2622                           
  2623                           ; BSR set to: 0
  2624  001686  0EFF               	movlw	255
  2625  001688  17D1               	andwf	___ftmul@f2& (0+255),f,b
  2626  00168A  0EFF               	movlw	255
  2627  00168C  17D2               	andwf	(___ftmul@f2+1)& (0+255),f,b
  2628  00168E  0E00               	movlw	0
  2629  001690  17D3               	andwf	(___ftmul@f2+2)& (0+255),f,b
  2630                           
  2631                           ; BSR set to: 0
  2632  001692  0E00               	movlw	0
  2633  001694  6FD8               	movwf	___ftmul@f3_as_product& (0+255),b
  2634  001696  0E00               	movlw	0
  2635  001698  6FD9               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2636  00169A  0E00               	movlw	0
  2637  00169C  6FDA               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2638                           
  2639                           ; BSR set to: 0
  2640  00169E  0E07               	movlw	7
  2641  0016A0  6FDB               	movwf	___ftmul@cntr& (0+255),b
  2642  0016A2                     
  2643                           ; BSR set to: 0
  2644                           
  2645                           ; BSR set to: 0
  2646  0016A2  A1CE               	btfss	___ftmul@f1& (0+255),0,b
  2647  0016A4  D006               	goto	l548
  2648                           
  2649                           ; BSR set to: 0
  2650  0016A6  51D1               	movf	___ftmul@f2& (0+255),w,b
  2651  0016A8  27D8               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2652  0016AA  51D2               	movf	(___ftmul@f2+1)& (0+255),w,b
  2653  0016AC  23D9               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2654  0016AE  51D3               	movf	(___ftmul@f2+2)& (0+255),w,b
  2655  0016B0  23DA               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2656  0016B2                     l548:
  2657                           
  2658                           ; BSR set to: 0
  2659                           
  2660                           ; BSR set to: 0
  2661  0016B2  90D8               	bcf	status,0,c
  2662  0016B4  33D0               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2663  0016B6  33CF               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2664  0016B8  33CE               	rrcf	___ftmul@f1& (0+255),f,b
  2665  0016BA  90D8               	bcf	status,0,c
  2666  0016BC  37D1               	rlcf	___ftmul@f2& (0+255),f,b
  2667  0016BE  37D2               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  2668  0016C0  37D3               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  2669                           
  2670                           ; BSR set to: 0
  2671  0016C2  2FDB               	decfsz	___ftmul@cntr& (0+255),f,b
  2672  0016C4  D7EE               	goto	l547
  2673                           
  2674                           ; BSR set to: 0
  2675                           
  2676                           ; BSR set to: 0
  2677  0016C6  0E09               	movlw	9
  2678  0016C8  6FDB               	movwf	___ftmul@cntr& (0+255),b
  2679  0016CA                     
  2680                           ; BSR set to: 0
  2681                           
  2682                           ; BSR set to: 0
  2683  0016CA  A1CE               	btfss	___ftmul@f1& (0+255),0,b
  2684  0016CC  D006               	goto	l551
  2685                           
  2686                           ; BSR set to: 0
  2687  0016CE  51D1               	movf	___ftmul@f2& (0+255),w,b
  2688  0016D0  27D8               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2689  0016D2  51D2               	movf	(___ftmul@f2+1)& (0+255),w,b
  2690  0016D4  23D9               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2691  0016D6  51D3               	movf	(___ftmul@f2+2)& (0+255),w,b
  2692  0016D8  23DA               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2693  0016DA                     l551:
  2694                           
  2695                           ; BSR set to: 0
  2696                           
  2697                           ; BSR set to: 0
  2698  0016DA  90D8               	bcf	status,0,c
  2699  0016DC  33D0               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2700  0016DE  33CF               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2701  0016E0  33CE               	rrcf	___ftmul@f1& (0+255),f,b
  2702  0016E2  90D8               	bcf	status,0,c
  2703  0016E4  33DA               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  2704  0016E6  33D9               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  2705  0016E8  33D8               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  2706                           
  2707                           ; BSR set to: 0
  2708  0016EA  2FDB               	decfsz	___ftmul@cntr& (0+255),f,b
  2709  0016EC  D7EE               	goto	l550
  2710                           
  2711                           ; BSR set to: 0
  2712                           
  2713                           ; BSR set to: 0
  2714  0016EE  C0D8  F0C6         	movff	___ftmul@f3_as_product,___ftpack@arg
  2715  0016F2  C0D9  F0C7         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2716  0016F6  C0DA  F0C8         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2717  0016FA  C0D7  F0C9         	movff	___ftmul@exp,___ftpack@exp
  2718  0016FE  C0DC  F0CA         	movff	___ftmul@sign,___ftpack@sign
  2719  001702  ECF1  F00C         	call	___ftpack	;wreg free
  2720  001706  C0C6  F0CE         	movff	?___ftpack,?___ftmul
  2721  00170A  C0C7  F0CF         	movff	?___ftpack+1,?___ftmul+1
  2722  00170E  C0C8  F0D0         	movff	?___ftpack+2,?___ftmul+2
  2723  001712  0012               	return	
  2724  001714                     __end_of___ftmul:
  2725                           	opt stack 0
  2726                           tblptru	equ	0xFF8
  2727                           tblptrh	equ	0xFF7
  2728                           tblptrl	equ	0xFF6
  2729                           tablat	equ	0xFF5
  2730                           prodh	equ	0xFF4
  2731                           prodl	equ	0xFF3
  2732                           intcon	equ	0xFF2
  2733                           intcon2	equ	0xFF1
  2734                           postinc0	equ	0xFEE
  2735                           wreg	equ	0xFE8
  2736                           indf2	equ	0xFDF
  2737                           postinc2	equ	0xFDE
  2738                           postdec2	equ	0xFDD
  2739                           fsr2h	equ	0xFDA
  2740                           fsr2l	equ	0xFD9
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function ___ftpack *****************
  2744 ;; Defined at:
  2745 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  arg             3   23[BANK0 ] unsigned um
  2748 ;;  exp             1   26[BANK0 ] unsigned char 
  2749 ;;  sign            1   27[BANK0 ] unsigned char 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;		None
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  3   23[BANK0 ] float 
  2754 ;; Registers used:
  2755 ;;		wreg, status,2, status,0
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2761 ;;      Params:         0       5       0       0       0       0       0       0       0
  2762 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2763 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2764 ;;      Totals:         0       8       0       0       0       0       0       0       0
  2765 ;;Total ram usage:        8 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    4
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		___ftmul
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text9
  2776  0019E2                     __ptext9:
  2777                           	opt stack 0
  2778  0019E2                     ___ftpack:
  2779                           	opt stack 25
  2780                           
  2781                           ;incstack = 0
  2782  0019E2  0100               	movlb	0	; () banked
  2783  0019E4  51C9               	movf	___ftpack@exp& (0+255),w,b
  2784  0019E6  B4D8               	btfsc	status,2,c
  2785  0019E8  D005               	goto	u2980
  2786                           
  2787                           ; BSR set to: 0
  2788  0019EA  51C6               	movf	___ftpack@arg& (0+255),w,b
  2789  0019EC  11C7               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  2790  0019EE  11C8               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  2791  0019F0  A4D8               	btfss	status,2,c
  2792  0019F2  D00C               	goto	l465
  2793  0019F4                     u2980:
  2794                           
  2795                           ; BSR set to: 0
  2796                           
  2797                           ; BSR set to: 0
  2798  0019F4  0E00               	movlw	0
  2799  0019F6  6FC6               	movwf	?___ftpack& (0+255),b
  2800  0019F8  0E00               	movlw	0
  2801  0019FA  6FC7               	movwf	(?___ftpack+1)& (0+255),b
  2802  0019FC  0E00               	movlw	0
  2803  0019FE  6FC8               	movwf	(?___ftpack+2)& (0+255),b
  2804                           
  2805                           ; BSR set to: 0
  2806  001A00  0012               	return	
  2807  001A02                     
  2808                           ; BSR set to: 0
  2809                           
  2810                           ; BSR set to: 0
  2811  001A02  2BC9               	incf	___ftpack@exp& (0+255),f,b
  2812  001A04  90D8               	bcf	status,0,c
  2813  001A06  33C8               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  2814  001A08  33C7               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  2815  001A0A  33C6               	rrcf	___ftpack@arg& (0+255),f,b
  2816  001A0C                     l465:
  2817                           
  2818                           ; BSR set to: 0
  2819                           
  2820                           ; BSR set to: 0
  2821  001A0C  0E00               	movlw	0
  2822  001A0E  15C6               	andwf	___ftpack@arg& (0+255),w,b
  2823  001A10  6FCB               	movwf	??___ftpack& (0+255),b
  2824  001A12  0E00               	movlw	0
  2825  001A14  15C7               	andwf	(___ftpack@arg+1)& (0+255),w,b
  2826  001A16  6FCC               	movwf	(??___ftpack+1)& (0+255),b
  2827  001A18  0EFE               	movlw	254
  2828  001A1A  15C8               	andwf	(___ftpack@arg+2)& (0+255),w,b
  2829  001A1C  6FCD               	movwf	(??___ftpack+2)& (0+255),b
  2830  001A1E  51CB               	movf	??___ftpack& (0+255),w,b
  2831  001A20  11CC               	iorwf	(??___ftpack+1)& (0+255),w,b
  2832  001A22  11CD               	iorwf	(??___ftpack+2)& (0+255),w,b
  2833  001A24  B4D8               	btfsc	status,2,c
  2834  001A26  D00C               	goto	l468
  2835  001A28  D7EC               	goto	l466
  2836  001A2A                     
  2837                           ; BSR set to: 0
  2838                           
  2839                           ; BSR set to: 0
  2840  001A2A  2BC9               	incf	___ftpack@exp& (0+255),f,b
  2841                           
  2842                           ; BSR set to: 0
  2843  001A2C  0E01               	movlw	1
  2844  001A2E  27C6               	addwf	___ftpack@arg& (0+255),f,b
  2845  001A30  0E00               	movlw	0
  2846  001A32  23C7               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  2847  001A34  0E00               	movlw	0
  2848  001A36  23C8               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  2849  001A38  90D8               	bcf	status,0,c
  2850  001A3A  33C8               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  2851  001A3C  33C7               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  2852  001A3E  33C6               	rrcf	___ftpack@arg& (0+255),f,b
  2853  001A40                     l468:
  2854                           
  2855                           ; BSR set to: 0
  2856                           
  2857                           ; BSR set to: 0
  2858  001A40  0E00               	movlw	0
  2859  001A42  15C6               	andwf	___ftpack@arg& (0+255),w,b
  2860  001A44  6FCB               	movwf	??___ftpack& (0+255),b
  2861  001A46  0E00               	movlw	0
  2862  001A48  15C7               	andwf	(___ftpack@arg+1)& (0+255),w,b
  2863  001A4A  6FCC               	movwf	(??___ftpack+1)& (0+255),b
  2864  001A4C  0EFF               	movlw	255
  2865  001A4E  15C8               	andwf	(___ftpack@arg+2)& (0+255),w,b
  2866  001A50  6FCD               	movwf	(??___ftpack+2)& (0+255),b
  2867  001A52  51CB               	movf	??___ftpack& (0+255),w,b
  2868  001A54  11CC               	iorwf	(??___ftpack+1)& (0+255),w,b
  2869  001A56  11CD               	iorwf	(??___ftpack+2)& (0+255),w,b
  2870  001A58  B4D8               	btfsc	status,2,c
  2871  001A5A  D006               	goto	l471
  2872  001A5C  D7E6               	goto	l469
  2873  001A5E                     
  2874                           ; BSR set to: 0
  2875                           
  2876                           ; BSR set to: 0
  2877  001A5E  07C9               	decf	___ftpack@exp& (0+255),f,b
  2878  001A60  90D8               	bcf	status,0,c
  2879  001A62  37C6               	rlcf	___ftpack@arg& (0+255),f,b
  2880  001A64  37C7               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  2881  001A66  37C8               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  2882  001A68                     l471:
  2883                           
  2884                           ; BSR set to: 0
  2885                           
  2886                           ; BSR set to: 0
  2887  001A68  BFC7               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  2888  001A6A  D003               	goto	u3020
  2889                           
  2890                           ; BSR set to: 0
  2891  001A6C  0E02               	movlw	2
  2892  001A6E  61C9               	cpfslt	___ftpack@exp& (0+255),b
  2893  001A70  D7F6               	goto	l472
  2894  001A72                     u3020:
  2895                           
  2896                           ; BSR set to: 0
  2897                           
  2898                           ; BSR set to: 0
  2899  001A72  A1C9               	btfss	___ftpack@exp& (0+255),0,b
  2900                           
  2901                           ; BSR set to: 0
  2902  001A74  9FC7               	bcf	(___ftpack@arg+1)& (0+255),7,b
  2903                           
  2904                           ; BSR set to: 0
  2905                           
  2906                           ; BSR set to: 0
  2907  001A76  90D8               	bcf	status,0,c
  2908  001A78  33C9               	rrcf	___ftpack@exp& (0+255),f,b
  2909  001A7A  51C9               	movf	___ftpack@exp& (0+255),w,b
  2910  001A7C  13C8               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  2911                           
  2912                           ; BSR set to: 0
  2913  001A7E  51CA               	movf	___ftpack@sign& (0+255),w,b
  2914  001A80  A4D8               	btfss	status,2,c
  2915                           
  2916                           ; BSR set to: 0
  2917  001A82  8FC8               	bsf	(___ftpack@arg+2)& (0+255),7,b
  2918                           
  2919                           ; BSR set to: 0
  2920                           
  2921                           ; BSR set to: 0
  2922  001A84  C0C6  F0C6         	movff	___ftpack@arg,?___ftpack
  2923  001A88  C0C7  F0C7         	movff	___ftpack@arg+1,?___ftpack+1
  2924  001A8C  C0C8  F0C8         	movff	___ftpack@arg+2,?___ftpack+2
  2925  001A90  0012               	return	
  2926  001A92                     __end_of___ftpack:
  2927                           	opt stack 0
  2928                           tblptru	equ	0xFF8
  2929                           tblptrh	equ	0xFF7
  2930                           tblptrl	equ	0xFF6
  2931                           tablat	equ	0xFF5
  2932                           prodh	equ	0xFF4
  2933                           prodl	equ	0xFF3
  2934                           intcon	equ	0xFF2
  2935                           intcon2	equ	0xFF1
  2936                           postinc0	equ	0xFEE
  2937                           wreg	equ	0xFE8
  2938                           indf2	equ	0xFDF
  2939                           postinc2	equ	0xFDE
  2940                           postdec2	equ	0xFDD
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _Lcd_Write_String *****************
  2946 ;; Defined at:
  2947 ;;		line 196 in file "LCD.h"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  a               2   31[BANK0 ] PTR unsigned char 
  2950 ;;		 -> buf2(16), buf(16), 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  i               2   33[BANK0 ] int 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2962 ;;      Params:         0       2       0       0       0       0       0       0       0
  2963 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2965 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2966 ;;Total ram usage:        4 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    6
  2969 ;; This function calls:
  2970 ;;		_Lcd_Write_Char
  2971 ;; This function is called by:
  2972 ;;		_main
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text10
  2977  001E9E                     __ptext10:
  2978                           	opt stack 0
  2979  001E9E                     _Lcd_Write_String:
  2980                           	opt stack 24
  2981                           
  2982                           ;LCD.h: 197: int i;
  2983                           ;LCD.h: 198: for (i = 0; a[i] != '\0'; i++)
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;incstack = 0
  2987  001E9E  0E00               	movlw	0
  2988  001EA0  0100               	movlb	0	; () banked
  2989  001EA2  6FD1               	movwf	(Lcd_Write_String@i+1)& (0+255),b
  2990  001EA4  0E00               	movlw	0
  2991  001EA6  6FD0               	movwf	Lcd_Write_String@i& (0+255),b
  2992  001EA8  D00C               	goto	l106
  2993  001EAA                     
  2994                           ; BSR set to: 0
  2995                           ;LCD.h: 199: Lcd_Write_Char(a[i]);
  2996                           
  2997                           ; BSR set to: 0
  2998  001EAA  51D0               	movf	Lcd_Write_String@i& (0+255),w,b
  2999  001EAC  25CE               	addwf	Lcd_Write_String@a& (0+255),w,b
  3000  001EAE  6ED9               	movwf	fsr2l,c
  3001  001EB0  51D1               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
  3002  001EB2  21CF               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  3003  001EB4  6EDA               	movwf	fsr2h,c
  3004  001EB6  50DF               	movf	indf2,w,c
  3005  001EB8  ECCD  F00E         	call	_Lcd_Write_Char
  3006  001EBC  0100               	movlb	0	; () banked
  3007  001EBE  4BD0               	infsnz	Lcd_Write_String@i& (0+255),f,b
  3008  001EC0  2BD1               	incf	(Lcd_Write_String@i+1)& (0+255),f,b
  3009  001EC2                     l106:
  3010                           
  3011                           ; BSR set to: 0
  3012                           
  3013                           ; BSR set to: 0
  3014  001EC2  51D0               	movf	Lcd_Write_String@i& (0+255),w,b
  3015  001EC4  25CE               	addwf	Lcd_Write_String@a& (0+255),w,b
  3016  001EC6  6ED9               	movwf	fsr2l,c
  3017  001EC8  51D1               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
  3018  001ECA  21CF               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  3019  001ECC  6EDA               	movwf	fsr2h,c
  3020  001ECE  50DF               	movf	indf2,w,c
  3021  001ED0  B4D8               	btfsc	status,2,c
  3022  001ED2  0012               	return	
  3023  001ED4  D7EA               	goto	l107
  3024  001ED6                     __end_of_Lcd_Write_String:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           intcon	equ	0xFF2
  3033                           intcon2	equ	0xFF1
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           postdec2	equ	0xFDD
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _Lcd_Write_Char *****************
  3044 ;; Defined at:
  3045 ;;		line 182 in file "LCD.h"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  a               1    wreg     unsigned char 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  a               1   30[BANK0 ] unsigned char 
  3050 ;;  y               1   29[BANK0 ] unsigned char 
  3051 ;;  temp            1   28[BANK0 ] unsigned char 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg, status,2, status,0, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3061 ;;      Params:         0       0       0       0       0       0       0       0       0
  3062 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3064 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3065 ;;Total ram usage:        3 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    5
  3068 ;; This function calls:
  3069 ;;		_Lcd_Port
  3070 ;;		_atraso_us
  3071 ;; This function is called by:
  3072 ;;		_Lcd_Write_String
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text11
  3077  001D9A                     __ptext11:
  3078                           	opt stack 0
  3079  001D9A                     _Lcd_Write_Char:
  3080                           	opt stack 24
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;incstack = 0
  3084                           ;Lcd_Write_Char@a stored from wreg
  3085  001D9A  0100               	movlb	0	; () banked
  3086  001D9C  6FCD               	movwf	Lcd_Write_Char@a& (0+255),b
  3087                           
  3088                           ;LCD.h: 183: char temp, y;
  3089                           ;LCD.h: 184: temp = a & 0x0F;
  3090  001D9E  0100               	movlb	0	; () banked
  3091  001DA0  51CD               	movf	Lcd_Write_Char@a& (0+255),w,b
  3092  001DA2  0B0F               	andlw	15
  3093  001DA4  6FCB               	movwf	Lcd_Write_Char@temp& (0+255),b
  3094                           
  3095                           ;LCD.h: 185: y = a & 0xF0;
  3096  001DA6  51CD               	movf	Lcd_Write_Char@a& (0+255),w,b
  3097  001DA8  0BF0               	andlw	240
  3098  001DAA  6FCC               	movwf	Lcd_Write_Char@y& (0+255),b
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;LCD.h: 186: PORTDbits.RD1 = 1;
  3102  001DAC  8283               	bsf	3971,1,c	;volatile
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;LCD.h: 187: Lcd_Port(y >> 4);
  3106  001DAE  39CC               	swapf	Lcd_Write_Char@y& (0+255),w,b
  3107  001DB0  0B0F               	andlw	15
  3108  001DB2  EC84  F00F         	call	_Lcd_Port
  3109                           
  3110                           ;LCD.h: 188: PORTDbits.RD0 = 1;
  3111  001DB6  8083               	bsf	3971,0,c	;volatile
  3112                           
  3113                           ;LCD.h: 189: atraso_us(80);
  3114  001DB8  0E00               	movlw	0
  3115  001DBA  0100               	movlb	0	; () banked
  3116  001DBC  6FC7               	movwf	(atraso_us@valor+1)& (0+255),b
  3117  001DBE  0E50               	movlw	80
  3118  001DC0  6FC6               	movwf	atraso_us@valor& (0+255),b
  3119  001DC2  EC6B  F00F         	call	_atraso_us	;wreg free
  3120                           
  3121                           ;LCD.h: 190: PORTDbits.RD0 = 0;
  3122  001DC6  9083               	bcf	3971,0,c	;volatile
  3123                           
  3124                           ;LCD.h: 191: Lcd_Port(temp);
  3125  001DC8  0100               	movlb	0	; () banked
  3126  001DCA  51CB               	movf	Lcd_Write_Char@temp& (0+255),w,b
  3127  001DCC  EC84  F00F         	call	_Lcd_Port
  3128                           
  3129                           ;LCD.h: 192: PORTDbits.RD0 = 1;
  3130  001DD0  8083               	bsf	3971,0,c	;volatile
  3131                           
  3132                           ;LCD.h: 193: atraso_us(80);
  3133  001DD2  0E00               	movlw	0
  3134  001DD4  0100               	movlb	0	; () banked
  3135  001DD6  6FC7               	movwf	(atraso_us@valor+1)& (0+255),b
  3136  001DD8  0E50               	movlw	80
  3137  001DDA  6FC6               	movwf	atraso_us@valor& (0+255),b
  3138  001DDC  EC6B  F00F         	call	_atraso_us	;wreg free
  3139                           
  3140                           ;LCD.h: 194: PORTDbits.RD0 = 0;
  3141  001DE0  9083               	bcf	3971,0,c	;volatile
  3142  001DE2  0012               	return		;funcret
  3143  001DE4                     __end_of_Lcd_Write_Char:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           intcon2	equ	0xFF1
  3153                           postinc0	equ	0xFEE
  3154                           wreg	equ	0xFE8
  3155                           indf2	equ	0xFDF
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8
  3161                           
  3162 ;; *************** function _atraso_us *****************
  3163 ;; Defined at:
  3164 ;;		line 104 in file "LCD.h"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  valor           2   23[BANK0 ] unsigned int 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  i               2   25[BANK0 ] unsigned int 
  3169 ;;  j               1   27[BANK0 ] unsigned char 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      void 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3179 ;;      Params:         0       2       0       0       0       0       0       0       0
  3180 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3182 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3183 ;;Total ram usage:        5 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    4
  3186 ;; This function calls:
  3187 ;;		Nothing
  3188 ;; This function is called by:
  3189 ;;		_Lcd_Write_Char
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text12
  3194  001ED6                     __ptext12:
  3195                           	opt stack 0
  3196  001ED6                     _atraso_us:
  3197                           	opt stack 24
  3198                           
  3199                           ;LCD.h: 105: unsigned int i;
  3200                           ;LCD.h: 106: unsigned char j;
  3201                           ;LCD.h: 108: for (i = 0; i < valor; i++) {
  3202                           
  3203                           ;incstack = 0
  3204  001ED6  0E00               	movlw	0
  3205  001ED8  0100               	movlb	0	; () banked
  3206  001EDA  6FC9               	movwf	(atraso_us@i+1)& (0+255),b
  3207  001EDC  0E00               	movlw	0
  3208  001EDE  6FC8               	movwf	atraso_us@i& (0+255),b
  3209  001EE0  D00C               	goto	l69
  3210  001EE2                     
  3211                           ; BSR set to: 0
  3212                           ;LCD.h: 110: for (j = 0; j < 200; j++) {
  3213                           
  3214                           ; BSR set to: 0
  3215  001EE2  0E00               	movlw	0
  3216  001EE4  6FCA               	movwf	atraso_us@j& (0+255),b
  3217  001EE6                     l2672:
  3218                           
  3219                           ; BSR set to: 0
  3220  001EE6  0EC7               	movlw	199
  3221  001EE8  65CA               	cpfsgt	atraso_us@j& (0+255),b
  3222  001EEA  D001               	goto	l71
  3223  001EEC  D004               	goto	u2950
  3224  001EEE                     l71:
  3225                           
  3226                           ; BSR set to: 0
  3227  001EEE  F000               	nop		;# 
  3228  001EF0  0100               	movlb	0	; () banked
  3229  001EF2  2BCA               	incf	atraso_us@j& (0+255),f,b
  3230  001EF4  D7F8               	goto	l2672
  3231  001EF6                     u2950:
  3232                           
  3233                           ; BSR set to: 0
  3234                           
  3235                           ; BSR set to: 0
  3236  001EF6  4BC8               	infsnz	atraso_us@i& (0+255),f,b
  3237  001EF8  2BC9               	incf	(atraso_us@i+1)& (0+255),f,b
  3238  001EFA                     l69:
  3239                           
  3240                           ; BSR set to: 0
  3241                           
  3242                           ; BSR set to: 0
  3243  001EFA  51C6               	movf	atraso_us@valor& (0+255),w,b
  3244  001EFC  5DC8               	subwf	atraso_us@i& (0+255),w,b
  3245  001EFE  51C7               	movf	(atraso_us@valor+1)& (0+255),w,b
  3246  001F00  59C9               	subwfb	(atraso_us@i+1)& (0+255),w,b
  3247  001F02  B0D8               	btfsc	status,0,c
  3248  001F04  0012               	return	
  3249  001F06  D7ED               	goto	l70
  3250  001F08                     __end_of_atraso_us:
  3251                           	opt stack 0
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           intcon	equ	0xFF2
  3259                           intcon2	equ	0xFF1
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           postdec2	equ	0xFDD
  3265                           fsr2h	equ	0xFDA
  3266                           fsr2l	equ	0xFD9
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function _Lcd_Set_Cursor *****************
  3270 ;; Defined at:
  3271 ;;		line 149 in file "LCD.h"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  a               1    wreg     unsigned char 
  3274 ;;  b               1   29[BANK0 ] unsigned char 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  a               1   30[BANK0 ] unsigned char 
  3277 ;;  temp            1   33[BANK0 ] unsigned char 
  3278 ;;  y               1   32[BANK0 ] unsigned char 
  3279 ;;  z               1   31[BANK0 ] unsigned char 
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      void 
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3289 ;;      Params:         0       1       0       0       0       0       0       0       0
  3290 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3292 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3293 ;;Total ram usage:        5 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    6
  3296 ;; This function calls:
  3297 ;;		_Lcd_Cmd
  3298 ;; This function is called by:
  3299 ;;		_main
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text13
  3304  001C96                     __ptext13:
  3305                           	opt stack 0
  3306  001C96                     _Lcd_Set_Cursor:
  3307                           	opt stack 24
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;incstack = 0
  3311                           ;Lcd_Set_Cursor@a stored from wreg
  3312  001C96  0100               	movlb	0	; () banked
  3313  001C98  6FCD               	movwf	Lcd_Set_Cursor@a& (0+255),b
  3314                           
  3315                           ;LCD.h: 150: char temp, z, y;
  3316                           ;LCD.h: 151: if (a == 1) {
  3317  001C9A  0100               	movlb	0	; () banked
  3318  001C9C  05CD               	decf	Lcd_Set_Cursor@a& (0+255),w,b
  3319  001C9E  A4D8               	btfss	status,2,c
  3320  001CA0  D011               	goto	l94
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;LCD.h: 152: temp = 0x80 + b - 1;
  3324  001CA2  51CC               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  3325  001CA4  0F7F               	addlw	127
  3326  001CA6  6FD0               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  3327                           
  3328                           ;LCD.h: 153: z = temp >> 4;
  3329  001CA8  39D0               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  3330  001CAA  0B0F               	andlw	15
  3331  001CAC  6FCE               	movwf	Lcd_Set_Cursor@z& (0+255),b
  3332                           
  3333                           ;LCD.h: 154: y = temp & 0x0F;
  3334  001CAE  51D0               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  3335  001CB0  0B0F               	andlw	15
  3336  001CB2  6FCF               	movwf	Lcd_Set_Cursor@y& (0+255),b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;LCD.h: 155: Lcd_Cmd(z);
  3340  001CB4  51CE               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  3341  001CB6  ECB0  F00F         	call	_Lcd_Cmd
  3342                           
  3343                           ;LCD.h: 156: Lcd_Cmd(y);
  3344  001CBA  0100               	movlb	0	; () banked
  3345  001CBC  51CF               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  3346  001CBE  ECB0  F00F         	call	_Lcd_Cmd
  3347                           
  3348                           ;LCD.h: 157: } else if (a == 2) {
  3349  001CC2  0012               	return	
  3350  001CC4                     l94:
  3351  001CC4  0E02               	movlw	2
  3352  001CC6  0100               	movlb	0	; () banked
  3353  001CC8  19CD               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
  3354  001CCA  A4D8               	btfss	status,2,c
  3355  001CCC  0012               	return	
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;LCD.h: 158: temp = 0xC0 + b - 1;
  3359  001CCE  51CC               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  3360  001CD0  0FBF               	addlw	191
  3361  001CD2  6FD0               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  3362                           
  3363                           ;LCD.h: 159: z = temp >> 4;
  3364  001CD4  39D0               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  3365  001CD6  0B0F               	andlw	15
  3366  001CD8  6FCE               	movwf	Lcd_Set_Cursor@z& (0+255),b
  3367                           
  3368                           ;LCD.h: 160: y = temp & 0x0F;
  3369  001CDA  51D0               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  3370  001CDC  0B0F               	andlw	15
  3371  001CDE  6FCF               	movwf	Lcd_Set_Cursor@y& (0+255),b
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;LCD.h: 161: Lcd_Cmd(z);
  3375  001CE0  51CE               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  3376  001CE2  ECB0  F00F         	call	_Lcd_Cmd
  3377                           
  3378                           ;LCD.h: 162: Lcd_Cmd(y);
  3379  001CE6  0100               	movlb	0	; () banked
  3380  001CE8  51CF               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  3381  001CEA  ECB0  F00F         	call	_Lcd_Cmd
  3382  001CEE  0012               	return	
  3383  001CF0                     __end_of_Lcd_Set_Cursor:
  3384                           	opt stack 0
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           prodh	equ	0xFF4
  3390                           prodl	equ	0xFF3
  3391                           intcon	equ	0xFF2
  3392                           intcon2	equ	0xFF1
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           indf2	equ	0xFDF
  3396                           postinc2	equ	0xFDE
  3397                           postdec2	equ	0xFDD
  3398                           fsr2h	equ	0xFDA
  3399                           fsr2l	equ	0xFD9
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _Lcd_Clear *****************
  3403 ;; Defined at:
  3404 ;;		line 145 in file "LCD.h"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;		None
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;		None
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3418 ;;      Params:         0       0       0       0       0       0       0       0       0
  3419 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3421 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3422 ;;Total ram usage:        0 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    6
  3425 ;; This function calls:
  3426 ;;		_Lcd_Cmd
  3427 ;; This function is called by:
  3428 ;;		_main
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text14
  3433  001F82                     __ptext14:
  3434                           	opt stack 0
  3435  001F82                     _Lcd_Clear:
  3436                           	opt stack 24
  3437                           
  3438                           ;LCD.h: 146: Lcd_Cmd(0);
  3439                           
  3440                           ;incstack = 0
  3441  001F82  0E00               	movlw	0
  3442  001F84  ECB0  F00F         	call	_Lcd_Cmd
  3443                           
  3444                           ;LCD.h: 147: Lcd_Cmd(1);
  3445  001F88  0E01               	movlw	1
  3446  001F8A  ECB0  F00F         	call	_Lcd_Cmd
  3447  001F8E  0012               	return		;funcret
  3448  001F90                     __end_of_Lcd_Clear:
  3449                           	opt stack 0
  3450                           tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodh	equ	0xFF4
  3455                           prodl	equ	0xFF3
  3456                           intcon	equ	0xFF2
  3457                           intcon2	equ	0xFF1
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _Lcd_Cmd *****************
  3468 ;; Defined at:
  3469 ;;		line 138 in file "LCD.h"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  a               1    wreg     unsigned char 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  a               1   28[BANK0 ] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0
  3484 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3486 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3487 ;;Total ram usage:        1 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    5
  3490 ;; This function calls:
  3491 ;;		_Lcd_Port
  3492 ;;		_atraso_ms
  3493 ;; This function is called by:
  3494 ;;		_Lcd_Clear
  3495 ;;		_Lcd_Set_Cursor
  3496 ;;		_Lcd_Init
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text15
  3501  001F60                     __ptext15:
  3502                           	opt stack 0
  3503  001F60                     _Lcd_Cmd:
  3504                           	opt stack 23
  3505                           
  3506                           ;incstack = 0
  3507                           ;Lcd_Cmd@a stored from wreg
  3508  001F60  0100               	movlb	0	; () banked
  3509  001F62  6FCB               	movwf	Lcd_Cmd@a& (0+255),b
  3510                           
  3511                           ;LCD.h: 139: PORTDbits.RD1 = 0;
  3512  001F64  9283               	bcf	3971,1,c	;volatile
  3513                           
  3514                           ;LCD.h: 140: Lcd_Port(a);
  3515  001F66  0100               	movlb	0	; () banked
  3516  001F68  51CB               	movf	Lcd_Cmd@a& (0+255),w,b
  3517  001F6A  EC84  F00F         	call	_Lcd_Port
  3518                           
  3519                           ;LCD.h: 141: PORTDbits.RD0 = 1;
  3520  001F6E  8083               	bsf	3971,0,c	;volatile
  3521                           
  3522                           ;LCD.h: 142: atraso_ms(10);
  3523  001F70  0E00               	movlw	0
  3524  001F72  0100               	movlb	0	; () banked
  3525  001F74  6FC7               	movwf	(atraso_ms@val+1)& (0+255),b
  3526  001F76  0E0A               	movlw	10
  3527  001F78  6FC6               	movwf	atraso_ms@val& (0+255),b
  3528  001F7A  EC32  F00F         	call	_atraso_ms	;wreg free
  3529                           
  3530                           ;LCD.h: 143: PORTDbits.RD0 = 0;
  3531  001F7E  9083               	bcf	3971,0,c	;volatile
  3532  001F80  0012               	return		;funcret
  3533  001F82                     __end_of_Lcd_Cmd:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           intcon	equ	0xFF2
  3542                           intcon2	equ	0xFF1
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           indf2	equ	0xFDF
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _atraso_ms *****************
  3553 ;; Defined at:
  3554 ;;		line 87 in file "LCD.h"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  val             2   23[BANK0 ] int 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  i1              2   25[BANK0 ] unsigned int 
  3559 ;;  j1              1   27[BANK0 ] unsigned char 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3569 ;;      Params:         0       2       0       0       0       0       0       0       0
  3570 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3572 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3573 ;;Total ram usage:        5 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    4
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_Lcd_Cmd
  3580 ;;		_Lcd_Init
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text16
  3585  001E64                     __ptext16:
  3586                           	opt stack 0
  3587  001E64                     _atraso_ms:
  3588                           	opt stack 24
  3589                           
  3590                           ;LCD.h: 88: unsigned int i1;
  3591                           ;LCD.h: 89: unsigned char j1;
  3592                           ;LCD.h: 91: for (i1 = 0; i1 < val; i1++) {
  3593                           
  3594                           ;incstack = 0
  3595  001E64  0E00               	movlw	0
  3596  001E66  0100               	movlb	0	; () banked
  3597  001E68  6FC9               	movwf	(atraso_ms@i1+1)& (0+255),b
  3598  001E6A  0E00               	movlw	0
  3599  001E6C  6FC8               	movwf	atraso_ms@i1& (0+255),b
  3600  001E6E  D010               	goto	l61
  3601  001E70                     
  3602                           ; BSR set to: 0
  3603                           ;LCD.h: 93: for (j1 = 0; j1 < 200; j1++) {
  3604                           
  3605                           ; BSR set to: 0
  3606  001E70  0E00               	movlw	0
  3607  001E72  6FCA               	movwf	atraso_ms@j1& (0+255),b
  3608  001E74                     l2640:
  3609                           
  3610                           ; BSR set to: 0
  3611  001E74  0EC7               	movlw	199
  3612  001E76  65CA               	cpfsgt	atraso_ms@j1& (0+255),b
  3613  001E78  D001               	goto	l63
  3614  001E7A  D008               	goto	u2880
  3615  001E7C                     l63:
  3616                           
  3617                           ; BSR set to: 0
  3618  001E7C  F000               	nop		;# 
  3619  001E7E  F000               	nop		;# 
  3620  001E80  F000               	nop		;# 
  3621  001E82  F000               	nop		;# 
  3622  001E84  F000               	nop		;# 
  3623  001E86  0100               	movlb	0	; () banked
  3624  001E88  2BCA               	incf	atraso_ms@j1& (0+255),f,b
  3625  001E8A  D7F4               	goto	l2640
  3626  001E8C                     u2880:
  3627                           
  3628                           ; BSR set to: 0
  3629                           
  3630                           ; BSR set to: 0
  3631  001E8C  4BC8               	infsnz	atraso_ms@i1& (0+255),f,b
  3632  001E8E  2BC9               	incf	(atraso_ms@i1+1)& (0+255),f,b
  3633  001E90                     l61:
  3634                           
  3635                           ; BSR set to: 0
  3636                           
  3637                           ; BSR set to: 0
  3638  001E90  51C6               	movf	atraso_ms@val& (0+255),w,b
  3639  001E92  5DC8               	subwf	atraso_ms@i1& (0+255),w,b
  3640  001E94  51C7               	movf	(atraso_ms@val+1)& (0+255),w,b
  3641  001E96  59C9               	subwfb	(atraso_ms@i1+1)& (0+255),w,b
  3642  001E98  B0D8               	btfsc	status,0,c
  3643  001E9A  0012               	return	
  3644  001E9C  D7E9               	goto	l62
  3645  001E9E                     __end_of_atraso_ms:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           intcon	equ	0xFF2
  3654                           intcon2	equ	0xFF1
  3655                           postinc0	equ	0xFEE
  3656                           wreg	equ	0xFE8
  3657                           indf2	equ	0xFDF
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function _Lcd_Port *****************
  3665 ;; Defined at:
  3666 ;;		line 117 in file "LCD.h"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  a               1    wreg     unsigned char 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  a               1   23[BANK0 ] unsigned char 
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		wreg
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3680 ;;      Params:         0       0       0       0       0       0       0       0       0
  3681 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3683 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3684 ;;Total ram usage:        1 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    4
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_Lcd_Cmd
  3691 ;;		_Lcd_Init
  3692 ;;		_Lcd_Write_Char
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text17
  3697  001F08                     __ptext17:
  3698                           	opt stack 0
  3699  001F08                     _Lcd_Port:
  3700                           	opt stack 24
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;incstack = 0
  3704                           ;Lcd_Port@a stored from wreg
  3705  001F08  0100               	movlb	0	; () banked
  3706  001F0A  6FC6               	movwf	Lcd_Port@a& (0+255),b
  3707                           
  3708                           ;LCD.h: 118: if (a & 1)
  3709  001F0C  0100               	movlb	0	; () banked
  3710  001F0E  A1C6               	btfss	Lcd_Port@a& (0+255),0,b
  3711  001F10  D002               	goto	l77
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;LCD.h: 119: PORTDbits.RD4 = 1;
  3715  001F12  8883               	bsf	3971,4,c	;volatile
  3716  001F14  D001               	goto	l78
  3717  001F16                     l77:
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;LCD.h: 120: else
  3721                           ;LCD.h: 121: PORTDbits.RD4 = 0;
  3722  001F16  9883               	bcf	3971,4,c	;volatile
  3723  001F18                     l78:
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;LCD.h: 123: if (a & 2)
  3727                           
  3728                           ; BSR set to: 0
  3729  001F18  A3C6               	btfss	Lcd_Port@a& (0+255),1,b
  3730  001F1A  D002               	goto	l79
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;LCD.h: 124: PORTDbits.RD5 = 1;
  3734  001F1C  8A83               	bsf	3971,5,c	;volatile
  3735  001F1E  D001               	goto	l80
  3736  001F20                     l79:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;LCD.h: 125: else
  3740                           ;LCD.h: 126: PORTDbits.RD5 = 0;
  3741  001F20  9A83               	bcf	3971,5,c	;volatile
  3742  001F22                     l80:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;LCD.h: 128: if (a & 4)
  3746                           
  3747                           ; BSR set to: 0
  3748  001F22  A5C6               	btfss	Lcd_Port@a& (0+255),2,b
  3749  001F24  D002               	goto	l81
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;LCD.h: 129: PORTDbits.RD6 = 1;
  3753  001F26  8C83               	bsf	3971,6,c	;volatile
  3754  001F28  D001               	goto	l82
  3755  001F2A                     l81:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;LCD.h: 130: else
  3759                           ;LCD.h: 131: PORTDbits.RD6 = 0;
  3760  001F2A  9C83               	bcf	3971,6,c	;volatile
  3761  001F2C                     l82:
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;LCD.h: 133: if (a & 8)
  3765                           
  3766                           ; BSR set to: 0
  3767  001F2C  A7C6               	btfss	Lcd_Port@a& (0+255),3,b
  3768  001F2E  D002               	goto	l83
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;LCD.h: 134: PORTDbits.RD7 = 1;
  3772  001F30  8E83               	bsf	3971,7,c	;volatile
  3773  001F32  0012               	return	
  3774  001F34                     l83:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;LCD.h: 135: else
  3778                           ;LCD.h: 136: PORTDbits.RD7 = 0;
  3779  001F34  9E83               	bcf	3971,7,c	;volatile
  3780  001F36  0012               	return	
  3781  001F38                     __end_of_Lcd_Port:
  3782                           	opt stack 0
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           prodh	equ	0xFF4
  3788                           prodl	equ	0xFF3
  3789                           intcon	equ	0xFF2
  3790                           intcon2	equ	0xFF1
  3791                           postinc0	equ	0xFEE
  3792                           wreg	equ	0xFE8
  3793                           indf2	equ	0xFDF
  3794                           postinc2	equ	0xFDE
  3795                           postdec2	equ	0xFDD
  3796                           fsr2h	equ	0xFDA
  3797                           fsr2l	equ	0xFD9
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _interrupcoes *****************
  3801 ;; Defined at:
  3802 ;;		line 113 in file "main.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, status,0, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3816 ;;      Params:         0       0       0       0       0       0       0       0       0
  3817 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3818 ;;      Temps:          0      23       0       0       0       0       0       0       0
  3819 ;;      Totals:         0      23       0       0       0       0       0       0       0
  3820 ;;Total ram usage:       23 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    3
  3823 ;; This function calls:
  3824 ;;		_ADC_read
  3825 ;;		_PID_set_PF
  3826 ;; This function is called by:
  3827 ;;		Interrupt level 2
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	intcode
  3832  000008                     __pintcode:
  3833                           	opt stack 0
  3834  000008                     _interrupcoes:
  3835                           	opt stack 23
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;incstack = 0
  3839  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3840  00000A  ED10  F004         	call	int_func,f	;refresh shadow registers
  3841                           tblptru	equ	0xFF8
  3842                           tblptrh	equ	0xFF7
  3843                           tblptrl	equ	0xFF6
  3844                           tablat	equ	0xFF5
  3845                           prodh	equ	0xFF4
  3846                           prodl	equ	0xFF3
  3847                           intcon	equ	0xFF2
  3848                           intcon2	equ	0xFF1
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           indf2	equ	0xFDF
  3852                           postinc2	equ	0xFDE
  3853                           postdec2	equ	0xFDD
  3854                           fsr2h	equ	0xFDA
  3855                           fsr2l	equ	0xFD9
  3856                           status	equ	0xFD8
  3857                           
  3858                           	psect	intcode_body
  3859  000820                     __pintcode_body:
  3860                           	opt stack 23
  3861  000820                     int_func:
  3862                           	opt stack 23
  3863  000820  0006               	pop		; remove dummy address from shadow register refresh
  3864  000822  CFFA F0B4          	movff	pclath,??_interrupcoes+5
  3865  000826  CFFB F0B5          	movff	pclatu,??_interrupcoes+6
  3866  00082A  CFE9 F0B6          	movff	fsr0l,??_interrupcoes+7
  3867  00082E  CFEA F0B7          	movff	fsr0h,??_interrupcoes+8
  3868  000832  CFE1 F0B8          	movff	fsr1l,??_interrupcoes+9
  3869  000836  CFE2 F0B9          	movff	fsr1h,??_interrupcoes+10
  3870  00083A  CFD9 F0BA          	movff	fsr2l,??_interrupcoes+11
  3871  00083E  CFDA F0BB          	movff	fsr2h,??_interrupcoes+12
  3872  000842  CFF3 F0BC          	movff	prodl,??_interrupcoes+13
  3873  000846  CFF4 F0BD          	movff	prodh,??_interrupcoes+14
  3874  00084A  CFF6 F0BE          	movff	tblptrl,??_interrupcoes+15
  3875  00084E  CFF7 F0BF          	movff	tblptrh,??_interrupcoes+16
  3876  000852  CFF8 F0C0          	movff	tblptru,??_interrupcoes+17
  3877  000856  CFF5 F0C1          	movff	tablat,??_interrupcoes+18
  3878  00085A  C05F  F0C2         	movff	btemp,??_interrupcoes+19
  3879  00085E  C060  F0C3         	movff	btemp+1,??_interrupcoes+20
  3880  000862  C061  F0C4         	movff	btemp+2,??_interrupcoes+21
  3881  000866  C062  F0C5         	movff	btemp+3,??_interrupcoes+22
  3882                           
  3883                           ;main.c: 114: if (INTCONbits.TMR0IF == 1) {
  3884  00086A  A4F2               	btfss	intcon,2,c	;volatile
  3885  00086C  D200               	goto	i2l204
  3886                           
  3887                           ;main.c: 115: PORTBbits.RB4 = !PORTBbits.RB4;
  3888  00086E  B881               	btfsc	3969,4,c	;volatile
  3889  000870  D004               	goto	i2u250_40
  3890  000872  0100               	movlb	0	; () banked
  3891  000874  6BAF               	clrf	??_interrupcoes& (0+255),b
  3892  000876  2BAF               	incf	??_interrupcoes& (0+255),f,b
  3893  000878  D002               	goto	i2u251_48
  3894  00087A                     i2u250_40:
  3895  00087A  0100               	movlb	0	; () banked
  3896  00087C  6BAF               	clrf	??_interrupcoes& (0+255),b
  3897  00087E                     i2u251_48:
  3898  00087E  3BAF               	swapf	??_interrupcoes& (0+255),f,b
  3899  000880  5081               	movf	3969,w,c	;volatile
  3900  000882  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  3901  000884  0BEF               	andlw	-17
  3902  000886  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  3903  000888  6E81               	movwf	3969,c	;volatile
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;main.c: 116: INTCONbits.TMR0IF = 0;
  3907  00088A  94F2               	bcf	intcon,2,c	;volatile
  3908                           
  3909                           ;main.c: 117: tick_time++;
  3910  00088C  0E01               	movlw	1
  3911  00088E  2649               	addwf	_tick_time,f,c
  3912  000890  0E00               	movlw	0
  3913  000892  224A               	addwfc	_tick_time+1,f,c
  3914  000894  224B               	addwfc	_tick_time+2,f,c
  3915  000896  224C               	addwfc	_tick_time+3,f,c
  3916                           
  3917                           ;main.c: 118: if (enS == 1) {
  3918  000898  059D               	decf	_enS& (0+255),w,b
  3919  00089A  119E               	iorwf	(_enS+1)& (0+255),w,b
  3920  00089C  A4D8               	btfss	status,2,c
  3921  00089E  D1CC               	goto	i2l188
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;main.c: 119: fb = ADC_read(0b00000001);
  3925  0008A0  0E01               	movlw	1
  3926  0008A2  EC9C  F00F         	call	_ADC_read
  3927  0008A6  C001  F074         	movff	?_ADC_read,_fb
  3928  0008AA  C002  F075         	movff	?_ADC_read+1,_fb+1
  3929  0008AE  0100               	movlb	0	; () banked
  3930  0008B0  6B76               	clrf	(_fb+2)& (0+255),b
  3931  0008B2  6B77               	clrf	(_fb+3)& (0+255),b
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;main.c: 120: _delay((unsigned long)((10)*(20000000/4000000.0)));
  3935  0008B4  0E10               	movlw	16
  3936  0008B6                     i2u343_47:
  3937  0008B6  2EE8               	decfsz	wreg,f,c
  3938  0008B8  D7FE               	bra	i2u343_47
  3939  0008BA  D000               	nop2	
  3940                           
  3941                           ;main.c: 121: ref = ADC_read(0b00000101);
  3942  0008BC  0E05               	movlw	5
  3943  0008BE  EC9C  F00F         	call	_ADC_read
  3944  0008C2  C001  F078         	movff	?_ADC_read,_ref
  3945  0008C6  C002  F079         	movff	?_ADC_read+1,_ref+1
  3946  0008CA  0100               	movlb	0	; () banked
  3947  0008CC  6B7A               	clrf	(_ref+2)& (0+255),b
  3948  0008CE  6B7B               	clrf	(_ref+3)& (0+255),b
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;main.c: 123: if (ref > Lmax) {
  3952  0008D0  C05D  F0AF         	movff	_Lmax,??_interrupcoes
  3953  0008D4  6BB0               	clrf	(??_interrupcoes+1)& (0+255),b
  3954  0008D6  6BB1               	clrf	(??_interrupcoes+2)& (0+255),b
  3955  0008D8  6BB2               	clrf	(??_interrupcoes+3)& (0+255),b
  3956  0008DA  5178               	movf	_ref& (0+255),w,b
  3957  0008DC  5DAF               	subwf	??_interrupcoes& (0+255),w,b
  3958  0008DE  5179               	movf	(_ref+1)& (0+255),w,b
  3959  0008E0  59B0               	subwfb	(??_interrupcoes+1)& (0+255),w,b
  3960  0008E2  517A               	movf	(_ref+2)& (0+255),w,b
  3961  0008E4  59B1               	subwfb	(??_interrupcoes+2)& (0+255),w,b
  3962  0008E6  51B2               	movf	(??_interrupcoes+3)& (0+255),w,b
  3963  0008E8  0A80               	xorlw	128
  3964  0008EA  6FB3               	movwf	(??_interrupcoes+4)& (0+255),b
  3965  0008EC  517B               	movf	(_ref+3)& (0+255),w,b
  3966  0008EE  0A80               	xorlw	128
  3967  0008F0  59B3               	subwfb	(??_interrupcoes+4)& (0+255),w,b
  3968  0008F2  B0D8               	btfsc	status,0,c
  3969  0008F4  D005               	goto	i2l189
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;main.c: 124: ref = Lmax;
  3973  0008F6  505D               	movf	_Lmax,w,c
  3974  0008F8  6F78               	movwf	_ref& (0+255),b
  3975  0008FA  6B79               	clrf	(_ref+1)& (0+255),b
  3976  0008FC  6B7A               	clrf	(_ref+2)& (0+255),b
  3977  0008FE  6B7B               	clrf	(_ref+3)& (0+255),b
  3978  000900                     i2l189:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;main.c: 125: }
  3982                           ;main.c: 126: if (ref < Lmin) {
  3983                           
  3984                           ; BSR set to: 0
  3985  000900  C05C  F0AF         	movff	_Lmin,??_interrupcoes
  3986  000904  6BB0               	clrf	(??_interrupcoes+1)& (0+255),b
  3987  000906  6BB1               	clrf	(??_interrupcoes+2)& (0+255),b
  3988  000908  6BB2               	clrf	(??_interrupcoes+3)& (0+255),b
  3989  00090A  51AF               	movf	??_interrupcoes& (0+255),w,b
  3990  00090C  5D78               	subwf	_ref& (0+255),w,b
  3991  00090E  51B0               	movf	(??_interrupcoes+1)& (0+255),w,b
  3992  000910  5979               	subwfb	(_ref+1)& (0+255),w,b
  3993  000912  51B1               	movf	(??_interrupcoes+2)& (0+255),w,b
  3994  000914  597A               	subwfb	(_ref+2)& (0+255),w,b
  3995  000916  517B               	movf	(_ref+3)& (0+255),w,b
  3996  000918  0A80               	xorlw	128
  3997  00091A  6FB3               	movwf	(??_interrupcoes+4)& (0+255),b
  3998  00091C  51B2               	movf	(??_interrupcoes+3)& (0+255),w,b
  3999  00091E  0A80               	xorlw	128
  4000  000920  59B3               	subwfb	(??_interrupcoes+4)& (0+255),w,b
  4001  000922  B0D8               	btfsc	status,0,c
  4002  000924  D005               	goto	i2l190
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;main.c: 127: ref = Lmin;
  4006  000926  505C               	movf	_Lmin,w,c
  4007  000928  6F78               	movwf	_ref& (0+255),b
  4008  00092A  6B79               	clrf	(_ref+1)& (0+255),b
  4009  00092C  6B7A               	clrf	(_ref+2)& (0+255),b
  4010  00092E  6B7B               	clrf	(_ref+3)& (0+255),b
  4011  000930                     i2l190:
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;main.c: 128: }
  4015                           ;main.c: 129: pwm = PID_set_PF();
  4016                           
  4017                           ; BSR set to: 0
  4018  000930  ECCB  F007         	call	_PID_set_PF	;wreg free
  4019  000934  C03D  F04D         	movff	?_PID_set_PF,_pwm
  4020  000938  C03E  F04E         	movff	?_PID_set_PF+1,_pwm+1
  4021  00093C  C03F  F04F         	movff	?_PID_set_PF+2,_pwm+2
  4022  000940  C040  F050         	movff	?_PID_set_PF+3,_pwm+3
  4023                           
  4024                           ;main.c: 134: if (ref > fb) {
  4025  000944  0100               	movlb	0	; () banked
  4026  000946  5178               	movf	_ref& (0+255),w,b
  4027  000948  5D74               	subwf	_fb& (0+255),w,b
  4028  00094A  5179               	movf	(_ref+1)& (0+255),w,b
  4029  00094C  5975               	subwfb	(_fb+1)& (0+255),w,b
  4030  00094E  517A               	movf	(_ref+2)& (0+255),w,b
  4031  000950  5976               	subwfb	(_fb+2)& (0+255),w,b
  4032  000952  5177               	movf	(_fb+3)& (0+255),w,b
  4033  000954  0A80               	xorlw	128
  4034  000956  6FAF               	movwf	??_interrupcoes& (0+255),b
  4035  000958  517B               	movf	(_ref+3)& (0+255),w,b
  4036  00095A  0A80               	xorlw	128
  4037  00095C  59AF               	subwfb	??_interrupcoes& (0+255),w,b
  4038  00095E  B0D8               	btfsc	status,0,c
  4039  000960  D012               	goto	i2l191
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;main.c: 135: PORTAbits.RA2 = 1;
  4043  000962  8480               	bsf	3968,2,c	;volatile
  4044                           
  4045                           ;main.c: 136: PORTAbits.RA3 = 0;
  4046  000964  9680               	bcf	3968,3,c	;volatile
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;main.c: 138: PORTBbits.RB0 = ~PORTAbits.RA2;
  4050  000966  A480               	btfss	3968,2,c	;volatile
  4051  000968  D002               	goto	i2u256_40
  4052  00096A  0E01               	movlw	1
  4053  00096C  D001               	goto	i2u256_46
  4054  00096E                     i2u256_40:
  4055  00096E  0E00               	movlw	0
  4056  000970                     i2u256_46:
  4057  000970  0AFF               	xorlw	255
  4058  000972  6FAF               	movwf	??_interrupcoes& (0+255),b
  4059  000974  5081               	movf	3969,w,c	;volatile
  4060  000976  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4061  000978  0BFE               	andlw	-2
  4062  00097A  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4063  00097C  6E81               	movwf	3969,c	;volatile
  4064                           
  4065                           ;main.c: 139: PORTBbits.RB1 = ~PORTAbits.RA3;
  4066  00097E  A680               	btfss	3968,3,c	;volatile
  4067  000980  D012               	goto	L1
  4068  000982                     i2u257_41:
  4069  000982  0E01               	movlw	1
  4070  000984  D011               	goto	i2u259_46
  4071  000986                     i2l191:
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;main.c: 142: PORTAbits.RA2 = 0;
  4075  000986  9480               	bcf	3968,2,c	;volatile
  4076                           
  4077                           ;main.c: 143: PORTAbits.RA3 = 1;
  4078  000988  8680               	bsf	3968,3,c	;volatile
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;main.c: 145: PORTBbits.RB0 = ~PORTAbits.RA2;
  4082  00098A  A480               	btfss	3968,2,c	;volatile
  4083  00098C  D002               	goto	i2u258_40
  4084  00098E  0E01               	movlw	1
  4085  000990  D001               	goto	i2u258_46
  4086  000992                     i2u258_40:
  4087  000992  0E00               	movlw	0
  4088  000994                     i2u258_46:
  4089  000994  0AFF               	xorlw	255
  4090  000996  6FAF               	movwf	??_interrupcoes& (0+255),b
  4091  000998  5081               	movf	3969,w,c	;volatile
  4092  00099A  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4093  00099C  0BFE               	andlw	-2
  4094  00099E  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4095  0009A0  6E81               	movwf	3969,c	;volatile
  4096                           
  4097                           ;main.c: 146: PORTBbits.RB1 = ~PORTAbits.RA3;
  4098  0009A2  B680               	btfsc	3968,3,c	;volatile
  4099  0009A4  D7EE               	goto	i2u257_41
  4100  0009A6                     L1:
  4101  0009A6  0E00               	movlw	0
  4102  0009A8                     i2u259_46:
  4103  0009A8  0AFF               	xorlw	255
  4104  0009AA  6FAF               	movwf	??_interrupcoes& (0+255),b
  4105  0009AC  47AF               	rlncf	??_interrupcoes& (0+255),f,b
  4106  0009AE  5081               	movf	3969,w,c	;volatile
  4107  0009B0  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4108  0009B2  0BFD               	andlw	-3
  4109  0009B4  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4110  0009B6  6E81               	movwf	3969,c	;volatile
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;main.c: 148: }
  4114                           ;main.c: 149: if (fb >= Lmax) {
  4115  0009B8  C05D  F0AF         	movff	_Lmax,??_interrupcoes
  4116  0009BC  6BB0               	clrf	(??_interrupcoes+1)& (0+255),b
  4117  0009BE  6BB1               	clrf	(??_interrupcoes+2)& (0+255),b
  4118  0009C0  6BB2               	clrf	(??_interrupcoes+3)& (0+255),b
  4119  0009C2  51AF               	movf	??_interrupcoes& (0+255),w,b
  4120  0009C4  5D74               	subwf	_fb& (0+255),w,b
  4121  0009C6  51B0               	movf	(??_interrupcoes+1)& (0+255),w,b
  4122  0009C8  5975               	subwfb	(_fb+1)& (0+255),w,b
  4123  0009CA  51B1               	movf	(??_interrupcoes+2)& (0+255),w,b
  4124  0009CC  5976               	subwfb	(_fb+2)& (0+255),w,b
  4125  0009CE  5177               	movf	(_fb+3)& (0+255),w,b
  4126  0009D0  0A80               	xorlw	128
  4127  0009D2  6FB3               	movwf	(??_interrupcoes+4)& (0+255),b
  4128  0009D4  51B2               	movf	(??_interrupcoes+3)& (0+255),w,b
  4129  0009D6  0A80               	xorlw	128
  4130  0009D8  59B3               	subwfb	(??_interrupcoes+4)& (0+255),w,b
  4131  0009DA  B0D8               	btfsc	status,0,c
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;main.c: 150: if (PORTAbits.RA2 == 1) {
  4135  0009DC  A480               	btfss	3968,2,c	;volatile
  4136  0009DE  D008               	goto	i2l194
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;main.c: 151: pwm = 0;
  4140  0009E0  0E00               	movlw	0
  4141  0009E2  6E4D               	movwf	_pwm,c
  4142  0009E4  0E00               	movlw	0
  4143  0009E6  6E4E               	movwf	_pwm+1,c
  4144  0009E8  0E00               	movlw	0
  4145  0009EA  6E4F               	movwf	_pwm+2,c
  4146  0009EC  0E00               	movlw	0
  4147  0009EE  6E50               	movwf	_pwm+3,c
  4148  0009F0                     i2l194:
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;main.c: 152: }
  4152                           ;main.c: 153: }
  4153                           ;main.c: 155: if (fb <= Lmin) {
  4154                           
  4155                           ; BSR set to: 0
  4156                           
  4157                           ; BSR set to: 0
  4158  0009F0  C05C  F0AF         	movff	_Lmin,??_interrupcoes
  4159  0009F4  6BB0               	clrf	(??_interrupcoes+1)& (0+255),b
  4160  0009F6  6BB1               	clrf	(??_interrupcoes+2)& (0+255),b
  4161  0009F8  6BB2               	clrf	(??_interrupcoes+3)& (0+255),b
  4162  0009FA  5174               	movf	_fb& (0+255),w,b
  4163  0009FC  5DAF               	subwf	??_interrupcoes& (0+255),w,b
  4164  0009FE  5175               	movf	(_fb+1)& (0+255),w,b
  4165  000A00  59B0               	subwfb	(??_interrupcoes+1)& (0+255),w,b
  4166  000A02  5176               	movf	(_fb+2)& (0+255),w,b
  4167  000A04  59B1               	subwfb	(??_interrupcoes+2)& (0+255),w,b
  4168  000A06  51B2               	movf	(??_interrupcoes+3)& (0+255),w,b
  4169  000A08  0A80               	xorlw	128
  4170  000A0A  6FB3               	movwf	(??_interrupcoes+4)& (0+255),b
  4171  000A0C  5177               	movf	(_fb+3)& (0+255),w,b
  4172  000A0E  0A80               	xorlw	128
  4173  000A10  59B3               	subwfb	(??_interrupcoes+4)& (0+255),w,b
  4174  000A12  B0D8               	btfsc	status,0,c
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;main.c: 156: if (PORTAbits.RA2 == 0) {
  4178  000A14  B480               	btfsc	3968,2,c	;volatile
  4179  000A16  D008               	goto	i2l196
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;main.c: 157: pwm = 0;
  4183  000A18  0E00               	movlw	0
  4184  000A1A  6E4D               	movwf	_pwm,c
  4185  000A1C  0E00               	movlw	0
  4186  000A1E  6E4E               	movwf	_pwm+1,c
  4187  000A20  0E00               	movlw	0
  4188  000A22  6E4F               	movwf	_pwm+2,c
  4189  000A24  0E00               	movlw	0
  4190  000A26  6E50               	movwf	_pwm+3,c
  4191  000A28                     i2l196:
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;main.c: 158: }
  4195                           ;main.c: 159: }
  4196                           ;main.c: 161: if (erro0 < 0x00) {
  4197                           
  4198                           ; BSR set to: 0
  4199                           
  4200                           ; BSR set to: 0
  4201  000A28  AE5A               	btfss	_erro0+3,7,c
  4202  000A2A  D00D               	goto	i2l197
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;main.c: 162: aux = (erro0 * (-1));
  4206  000A2C  C057  F0AF         	movff	_erro0,??_interrupcoes
  4207  000A30  C058  F0B0         	movff	_erro0+1,??_interrupcoes+1
  4208  000A34  1FAF               	comf	??_interrupcoes& (0+255),f,b
  4209  000A36  1FB0               	comf	(??_interrupcoes+1)& (0+255),f,b
  4210  000A38  4BAF               	infsnz	??_interrupcoes& (0+255),f,b
  4211  000A3A  2BB0               	incf	(??_interrupcoes+1)& (0+255),f,b
  4212  000A3C  C0AF  F051         	movff	??_interrupcoes,_aux
  4213  000A40  C0B0  F052         	movff	??_interrupcoes+1,_aux+1
  4214                           
  4215                           ;main.c: 163: } else {
  4216  000A44  D004               	goto	i2l198
  4217  000A46                     i2l197:
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;main.c: 164: aux = erro0;
  4221  000A46  C057  F051         	movff	_erro0,_aux
  4222  000A4A  C058  F052         	movff	_erro0+1,_aux+1
  4223  000A4E                     i2l198:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;main.c: 165: }
  4227                           ;main.c: 167: if ((aux <= BandaMorta)) {
  4228                           
  4229                           ; BSR set to: 0
  4230  000A4E  505B               	movf	_BandaMorta,w,c
  4231  000A50  6FAF               	movwf	??_interrupcoes& (0+255),b
  4232  000A52  6BB0               	clrf	(??_interrupcoes+1)& (0+255),b
  4233  000A54  5051               	movf	_aux,w,c
  4234  000A56  5DAF               	subwf	??_interrupcoes& (0+255),w,b
  4235  000A58  51B0               	movf	(??_interrupcoes+1)& (0+255),w,b
  4236  000A5A  0A80               	xorlw	128
  4237  000A5C  6FB1               	movwf	(??_interrupcoes+2)& (0+255),b
  4238  000A5E  5052               	movf	_aux+1,w,c
  4239  000A60  0A80               	xorlw	128
  4240  000A62  59B1               	subwfb	(??_interrupcoes+2)& (0+255),w,b
  4241  000A64  A0D8               	btfss	status,0,c
  4242  000A66  D06F               	goto	i2l199
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;main.c: 168: PORTBbits.RB6 = 1;
  4246  000A68  8C81               	bsf	3969,6,c	;volatile
  4247                           
  4248                           ;main.c: 169: if (d == 0) {
  4249  000A6A  B05E               	btfsc	_d/(0+8),_d& (0+7),c
  4250  000A6C  D00D               	goto	i2l200
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;main.c: 170: d = 1;
  4254  000A6E  805E               	bsf	_d/(0+8),_d& (0+7),c
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;main.c: 171: delay500 = tick_time + 50;
  4258  000A70  0E32               	movlw	50
  4259  000A72  2449               	addwf	_tick_time,w,c
  4260  000A74  6F6C               	movwf	_delay500& (0+255),b
  4261  000A76  0E00               	movlw	0
  4262  000A78  204A               	addwfc	_tick_time+1,w,c
  4263  000A7A  6F6D               	movwf	(_delay500+1)& (0+255),b
  4264  000A7C  0E00               	movlw	0
  4265  000A7E  204B               	addwfc	_tick_time+2,w,c
  4266  000A80  6F6E               	movwf	(_delay500+2)& (0+255),b
  4267  000A82  0E00               	movlw	0
  4268  000A84  204C               	addwfc	_tick_time+3,w,c
  4269  000A86  6F6F               	movwf	(_delay500+3)& (0+255),b
  4270  000A88                     i2l200:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;main.c: 172: }
  4274                           ;main.c: 173: if (tick_time > delay500) {
  4275  000A88  5049               	movf	_tick_time,w,c
  4276  000A8A  5D6C               	subwf	_delay500& (0+255),w,b
  4277  000A8C  504A               	movf	_tick_time+1,w,c
  4278  000A8E  596D               	subwfb	(_delay500+1)& (0+255),w,b
  4279  000A90  504B               	movf	_tick_time+2,w,c
  4280  000A92  596E               	subwfb	(_delay500+2)& (0+255),w,b
  4281  000A94  504C               	movf	_tick_time+3,w,c
  4282  000A96  596F               	subwfb	(_delay500+3)& (0+255),w,b
  4283  000A98  B0D8               	btfsc	status,0,c
  4284  000A9A  D057               	goto	i2l202
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;main.c: 174: pwm = 0;
  4288  000A9C  0E00               	movlw	0
  4289  000A9E  6E4D               	movwf	_pwm,c
  4290  000AA0  0E00               	movlw	0
  4291  000AA2  6E4E               	movwf	_pwm+1,c
  4292  000AA4  0E00               	movlw	0
  4293  000AA6  6E4F               	movwf	_pwm+2,c
  4294  000AA8  0E00               	movlw	0
  4295  000AAA  6E50               	movwf	_pwm+3,c
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;main.c: 175: PORTBbits.RB6 = 0;
  4299  000AAC  9C81               	bcf	3969,6,c	;volatile
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;main.c: 176: PORTAbits.RA2 = 0;
  4303  000AAE  9480               	bcf	3968,2,c	;volatile
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;main.c: 177: PORTAbits.RA3 = 0;
  4307  000AB0  9680               	bcf	3968,3,c	;volatile
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;main.c: 179: PORTBbits.RB0 = ~PORTAbits.RA2;
  4311  000AB2  A480               	btfss	3968,2,c	;volatile
  4312  000AB4  D002               	goto	i2u268_40
  4313  000AB6  0E01               	movlw	1
  4314  000AB8  D001               	goto	i2u268_46
  4315  000ABA                     i2u268_40:
  4316  000ABA  0E00               	movlw	0
  4317  000ABC                     i2u268_46:
  4318  000ABC  0AFF               	xorlw	255
  4319  000ABE  6FAF               	movwf	??_interrupcoes& (0+255),b
  4320  000AC0  5081               	movf	3969,w,c	;volatile
  4321  000AC2  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4322  000AC4  0BFE               	andlw	-2
  4323  000AC6  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4324  000AC8  6E81               	movwf	3969,c	;volatile
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;main.c: 180: PORTBbits.RB1 = ~PORTAbits.RA3;
  4328  000ACA  A680               	btfss	3968,3,c	;volatile
  4329  000ACC  D002               	goto	i2u269_40
  4330  000ACE  0E01               	movlw	1
  4331  000AD0  D001               	goto	i2u269_46
  4332  000AD2                     i2u269_40:
  4333  000AD2  0E00               	movlw	0
  4334  000AD4                     i2u269_46:
  4335  000AD4  0AFF               	xorlw	255
  4336  000AD6  6FAF               	movwf	??_interrupcoes& (0+255),b
  4337  000AD8  47AF               	rlncf	??_interrupcoes& (0+255),f,b
  4338  000ADA  5081               	movf	3969,w,c	;volatile
  4339  000ADC  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4340  000ADE  0BFD               	andlw	-3
  4341  000AE0  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4342  000AE2  6E81               	movwf	3969,c	;volatile
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;main.c: 183: CCPR1L = pwm >> 2;
  4346  000AE4  0E02               	movlw	2
  4347  000AE6  6FAF               	movwf	??_interrupcoes& (0+255),b
  4348  000AE8  C04D  F0B0         	movff	_pwm,??_interrupcoes+1
  4349  000AEC  C04E  F0B1         	movff	_pwm+1,??_interrupcoes+2
  4350  000AF0  C04F  F0B2         	movff	_pwm+2,??_interrupcoes+3
  4351  000AF4  C050  F0B3         	movff	_pwm+3,??_interrupcoes+4
  4352  000AF8                     i2u270_45:
  4353  000AF8  67AF               	tstfsz	??_interrupcoes& (0+255),b
  4354  000AFA  D001               	goto	i2u270_46
  4355  000AFC  D007               	goto	i2u270_47
  4356  000AFE                     i2u270_46:
  4357  000AFE  35B3               	rlcf	(??_interrupcoes+4)& (0+255),w,b
  4358  000B00  33B3               	rrcf	(??_interrupcoes+4)& (0+255),f,b
  4359  000B02  33B2               	rrcf	(??_interrupcoes+3)& (0+255),f,b
  4360  000B04  33B1               	rrcf	(??_interrupcoes+2)& (0+255),f,b
  4361  000B06  33B0               	rrcf	(??_interrupcoes+1)& (0+255),f,b
  4362  000B08  2FAF               	decfsz	??_interrupcoes& (0+255),f,b
  4363  000B0A  D7F6               	goto	i2u270_45
  4364  000B0C                     i2u270_47:
  4365  000B0C  0100               	movlb	0	; () banked
  4366  000B0E  51B0               	movf	(??_interrupcoes+1)& (0+255),w,b
  4367  000B10  6EBE               	movwf	4030,c	;volatile
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;main.c: 184: CCP1CONbits.DC1B1 = pwm >> 1;
  4371  000B12  C04D  F0AF         	movff	_pwm,??_interrupcoes
  4372  000B16  C04E  F0B0         	movff	_pwm+1,??_interrupcoes+1
  4373  000B1A  C04F  F0B1         	movff	_pwm+2,??_interrupcoes+2
  4374  000B1E  C050  F0B2         	movff	_pwm+3,??_interrupcoes+3
  4375  000B22  35B2               	rlcf	(??_interrupcoes+3)& (0+255),w,b
  4376  000B24  33B2               	rrcf	(??_interrupcoes+3)& (0+255),f,b
  4377  000B26  33B1               	rrcf	(??_interrupcoes+2)& (0+255),f,b
  4378  000B28  33B0               	rrcf	(??_interrupcoes+1)& (0+255),f,b
  4379  000B2A  33AF               	rrcf	??_interrupcoes& (0+255),f,b
  4380  000B2C  3BAF               	swapf	??_interrupcoes& (0+255),f,b
  4381  000B2E  47AF               	rlncf	??_interrupcoes& (0+255),f,b
  4382  000B30  50BD               	movf	4029,w,c	;volatile
  4383  000B32  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4384  000B34  0BDF               	andlw	-33
  4385  000B36  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4386  000B38  6EBD               	movwf	4029,c	;volatile
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;main.c: 185: CCP1CONbits.DC1B0 = pwm;
  4390  000B3A  B04D               	btfsc	_pwm,0,c
  4391  000B3C  D002               	bra	i2u271_45
  4392  000B3E  98BD               	bcf	4029,4,c	;volatile
  4393  000B40  D001               	bra	i2u271_46
  4394  000B42                     i2u271_45:
  4395  000B42  88BD               	bsf	4029,4,c	;volatile
  4396  000B44                     i2u271_46:
  4397                           
  4398                           ;main.c: 186: }
  4399                           ;main.c: 188: } else {
  4400  000B44  D002               	goto	i2l202
  4401  000B46                     i2l199:
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;main.c: 191: PORTBbits.RB6 = 0;
  4405  000B46  9C81               	bcf	3969,6,c	;volatile
  4406                           
  4407                           ;main.c: 192: d = 0;
  4408  000B48  905E               	bcf	_d/(0+8),_d& (0+7),c
  4409  000B4A                     i2l202:
  4410                           
  4411                           ;main.c: 193: }
  4412                           ;main.c: 195: if ((aux > 500)&&(tick_time > delay501)) {
  4413                           
  4414                           ; BSR set to: 0
  4415  000B4A  BE52               	btfsc	_aux+1,7,c
  4416  000B4C  D040               	goto	i2l203
  4417  000B4E  0EF5               	movlw	245
  4418  000B50  5C51               	subwf	_aux,w,c
  4419  000B52  0E01               	movlw	1
  4420  000B54  5852               	subwfb	_aux+1,w,c
  4421  000B56  A0D8               	btfss	status,0,c
  4422  000B58  D03A               	goto	i2l203
  4423  000B5A  5049               	movf	_tick_time,w,c
  4424  000B5C  0100               	movlb	0	; () banked
  4425  000B5E  5D68               	subwf	_delay501& (0+255),w,b
  4426  000B60  504A               	movf	_tick_time+1,w,c
  4427  000B62  5969               	subwfb	(_delay501+1)& (0+255),w,b
  4428  000B64  504B               	movf	_tick_time+2,w,c
  4429  000B66  596A               	subwfb	(_delay501+2)& (0+255),w,b
  4430  000B68  504C               	movf	_tick_time+3,w,c
  4431  000B6A  596B               	subwfb	(_delay501+3)& (0+255),w,b
  4432  000B6C  B0D8               	btfsc	status,0,c
  4433  000B6E  D02F               	goto	i2l203
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;main.c: 196: delay501 = tick_time + 200;
  4437  000B70  0EC8               	movlw	200
  4438  000B72  2449               	addwf	_tick_time,w,c
  4439  000B74  6F68               	movwf	_delay501& (0+255),b
  4440  000B76  0E00               	movlw	0
  4441  000B78  204A               	addwfc	_tick_time+1,w,c
  4442  000B7A  6F69               	movwf	(_delay501+1)& (0+255),b
  4443  000B7C  0E00               	movlw	0
  4444  000B7E  204B               	addwfc	_tick_time+2,w,c
  4445  000B80  6F6A               	movwf	(_delay501+2)& (0+255),b
  4446  000B82  0E00               	movlw	0
  4447  000B84  204C               	addwfc	_tick_time+3,w,c
  4448  000B86  6F6B               	movwf	(_delay501+3)& (0+255),b
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;main.c: 197: pwm = 0;
  4452  000B88  0E00               	movlw	0
  4453  000B8A  6E4D               	movwf	_pwm,c
  4454  000B8C  0E00               	movlw	0
  4455  000B8E  6E4E               	movwf	_pwm+1,c
  4456  000B90  0E00               	movlw	0
  4457  000B92  6E4F               	movwf	_pwm+2,c
  4458  000B94  0E00               	movlw	0
  4459  000B96  6E50               	movwf	_pwm+3,c
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 198: PORTAbits.RA2 = 0;
  4463  000B98  9480               	bcf	3968,2,c	;volatile
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;main.c: 199: PORTAbits.RA3 = 0;
  4467  000B9A  9680               	bcf	3968,3,c	;volatile
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;main.c: 201: PORTBbits.RB0 = ~PORTAbits.RA2;
  4471  000B9C  A480               	btfss	3968,2,c	;volatile
  4472  000B9E  D002               	goto	i2u274_40
  4473  000BA0  0E01               	movlw	1
  4474  000BA2  D001               	goto	i2u274_46
  4475  000BA4                     i2u274_40:
  4476  000BA4  0E00               	movlw	0
  4477  000BA6                     i2u274_46:
  4478  000BA6  0AFF               	xorlw	255
  4479  000BA8  6FAF               	movwf	??_interrupcoes& (0+255),b
  4480  000BAA  5081               	movf	3969,w,c	;volatile
  4481  000BAC  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4482  000BAE  0BFE               	andlw	-2
  4483  000BB0  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4484  000BB2  6E81               	movwf	3969,c	;volatile
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;main.c: 202: PORTBbits.RB1 = ~PORTAbits.RA3;
  4488  000BB4  A680               	btfss	3968,3,c	;volatile
  4489  000BB6  D002               	goto	i2u275_40
  4490  000BB8  0E01               	movlw	1
  4491  000BBA  D001               	goto	i2u275_46
  4492  000BBC                     i2u275_40:
  4493  000BBC  0E00               	movlw	0
  4494  000BBE                     i2u275_46:
  4495  000BBE  0AFF               	xorlw	255
  4496  000BC0  6FAF               	movwf	??_interrupcoes& (0+255),b
  4497  000BC2  47AF               	rlncf	??_interrupcoes& (0+255),f,b
  4498  000BC4  5081               	movf	3969,w,c	;volatile
  4499  000BC6  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4500  000BC8  0BFD               	andlw	-3
  4501  000BCA  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4502  000BCC  6E81               	movwf	3969,c	;volatile
  4503  000BCE                     i2l203:
  4504                           
  4505                           ;main.c: 203: }
  4506                           ;main.c: 206: CCPR1L = pwm >> 2;
  4507                           
  4508                           ; BSR set to: 0
  4509  000BCE  0E02               	movlw	2
  4510  000BD0  0100               	movlb	0	; () banked
  4511  000BD2  6FAF               	movwf	??_interrupcoes& (0+255),b
  4512  000BD4  C04D  F0B0         	movff	_pwm,??_interrupcoes+1
  4513  000BD8  C04E  F0B1         	movff	_pwm+1,??_interrupcoes+2
  4514  000BDC  C04F  F0B2         	movff	_pwm+2,??_interrupcoes+3
  4515  000BE0  C050  F0B3         	movff	_pwm+3,??_interrupcoes+4
  4516  000BE4                     i2u276_45:
  4517  000BE4  67AF               	tstfsz	??_interrupcoes& (0+255),b
  4518  000BE6  D001               	goto	i2u276_46
  4519  000BE8  D007               	goto	i2u276_47
  4520  000BEA                     i2u276_46:
  4521  000BEA  35B3               	rlcf	(??_interrupcoes+4)& (0+255),w,b
  4522  000BEC  33B3               	rrcf	(??_interrupcoes+4)& (0+255),f,b
  4523  000BEE  33B2               	rrcf	(??_interrupcoes+3)& (0+255),f,b
  4524  000BF0  33B1               	rrcf	(??_interrupcoes+2)& (0+255),f,b
  4525  000BF2  33B0               	rrcf	(??_interrupcoes+1)& (0+255),f,b
  4526  000BF4  2FAF               	decfsz	??_interrupcoes& (0+255),f,b
  4527  000BF6  D7F6               	goto	i2u276_45
  4528  000BF8                     i2u276_47:
  4529  000BF8  0100               	movlb	0	; () banked
  4530  000BFA  51B0               	movf	(??_interrupcoes+1)& (0+255),w,b
  4531  000BFC  6EBE               	movwf	4030,c	;volatile
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;main.c: 207: CCP1CONbits.DC1B1 = pwm >> 1;
  4535  000BFE  C04D  F0AF         	movff	_pwm,??_interrupcoes
  4536  000C02  C04E  F0B0         	movff	_pwm+1,??_interrupcoes+1
  4537  000C06  C04F  F0B1         	movff	_pwm+2,??_interrupcoes+2
  4538  000C0A  C050  F0B2         	movff	_pwm+3,??_interrupcoes+3
  4539  000C0E  35B2               	rlcf	(??_interrupcoes+3)& (0+255),w,b
  4540  000C10  33B2               	rrcf	(??_interrupcoes+3)& (0+255),f,b
  4541  000C12  33B1               	rrcf	(??_interrupcoes+2)& (0+255),f,b
  4542  000C14  33B0               	rrcf	(??_interrupcoes+1)& (0+255),f,b
  4543  000C16  33AF               	rrcf	??_interrupcoes& (0+255),f,b
  4544  000C18  3BAF               	swapf	??_interrupcoes& (0+255),f,b
  4545  000C1A  47AF               	rlncf	??_interrupcoes& (0+255),f,b
  4546  000C1C  50BD               	movf	4029,w,c	;volatile
  4547  000C1E  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4548  000C20  0BDF               	andlw	-33
  4549  000C22  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4550  000C24  6EBD               	movwf	4029,c	;volatile
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;main.c: 208: CCP1CONbits.DC1B0 = pwm;
  4554  000C26  B04D               	btfsc	_pwm,0,c
  4555  000C28  D002               	bra	i2u277_45
  4556  000C2A  98BD               	bcf	4029,4,c	;volatile
  4557  000C2C  D001               	bra	i2u277_46
  4558  000C2E                     i2u277_45:
  4559  000C2E  88BD               	bsf	4029,4,c	;volatile
  4560  000C30                     i2u277_46:
  4561                           
  4562                           ;main.c: 210: TMR0L = 22 + TMR0L;
  4563  000C30  50D6               	movf	4054,w,c	;volatile
  4564  000C32  0F16               	addlw	22
  4565  000C34  6ED6               	movwf	4054,c	;volatile
  4566                           
  4567                           ;main.c: 211: } else {
  4568  000C36  D01B               	goto	i2l204
  4569  000C38                     i2l188:
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;main.c: 212: PORTAbits.RA2 = 0;
  4573  000C38  9480               	bcf	3968,2,c	;volatile
  4574                           
  4575                           ;main.c: 213: PORTAbits.RA3 = 0;
  4576  000C3A  9680               	bcf	3968,3,c	;volatile
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;main.c: 215: PORTBbits.RB0 = ~PORTAbits.RA2;
  4580  000C3C  A480               	btfss	3968,2,c	;volatile
  4581  000C3E  D002               	goto	i2u278_40
  4582  000C40  0E01               	movlw	1
  4583  000C42  D001               	goto	i2u278_46
  4584  000C44                     i2u278_40:
  4585  000C44  0E00               	movlw	0
  4586  000C46                     i2u278_46:
  4587  000C46  0AFF               	xorlw	255
  4588  000C48  6FAF               	movwf	??_interrupcoes& (0+255),b
  4589  000C4A  5081               	movf	3969,w,c	;volatile
  4590  000C4C  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4591  000C4E  0BFE               	andlw	-2
  4592  000C50  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4593  000C52  6E81               	movwf	3969,c	;volatile
  4594                           
  4595                           ;main.c: 216: PORTBbits.RB1 = ~PORTAbits.RA3;
  4596  000C54  A680               	btfss	3968,3,c	;volatile
  4597  000C56  D002               	goto	i2u279_40
  4598  000C58  0E01               	movlw	1
  4599  000C5A  D001               	goto	i2u279_46
  4600  000C5C                     i2u279_40:
  4601  000C5C  0E00               	movlw	0
  4602  000C5E                     i2u279_46:
  4603  000C5E  0AFF               	xorlw	255
  4604  000C60  6FAF               	movwf	??_interrupcoes& (0+255),b
  4605  000C62  47AF               	rlncf	??_interrupcoes& (0+255),f,b
  4606  000C64  5081               	movf	3969,w,c	;volatile
  4607  000C66  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4608  000C68  0BFD               	andlw	-3
  4609  000C6A  19AF               	xorwf	??_interrupcoes& (0+255),w,b
  4610  000C6C  6E81               	movwf	3969,c	;volatile
  4611  000C6E                     i2l204:
  4612                           
  4613                           ; BSR set to: 0
  4614                           
  4615                           ; BSR set to: 0
  4616  000C6E  C0C5  F062         	movff	??_interrupcoes+22,btemp+3
  4617  000C72  C0C4  F061         	movff	??_interrupcoes+21,btemp+2
  4618  000C76  C0C3  F060         	movff	??_interrupcoes+20,btemp+1
  4619  000C7A  C0C2  F05F         	movff	??_interrupcoes+19,btemp
  4620  000C7E  C0C1  FFF5         	movff	??_interrupcoes+18,tablat
  4621  000C82  C0C0  FFF8         	movff	??_interrupcoes+17,tblptru
  4622  000C86  C0BF  FFF7         	movff	??_interrupcoes+16,tblptrh
  4623  000C8A  C0BE  FFF6         	movff	??_interrupcoes+15,tblptrl
  4624  000C8E  C0BD  FFF4         	movff	??_interrupcoes+14,prodh
  4625  000C92  C0BC  FFF3         	movff	??_interrupcoes+13,prodl
  4626  000C96  C0BB  FFDA         	movff	??_interrupcoes+12,fsr2h
  4627  000C9A  C0BA  FFD9         	movff	??_interrupcoes+11,fsr2l
  4628  000C9E  C0B9  FFE2         	movff	??_interrupcoes+10,fsr1h
  4629  000CA2  C0B8  FFE1         	movff	??_interrupcoes+9,fsr1l
  4630  000CA6  C0B7  FFEA         	movff	??_interrupcoes+8,fsr0h
  4631  000CAA  C0B6  FFE9         	movff	??_interrupcoes+7,fsr0l
  4632  000CAE  C0B5  FFFB         	movff	??_interrupcoes+6,pclatu
  4633  000CB2  C0B4  FFFA         	movff	??_interrupcoes+5,pclath
  4634  000CB6  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4635  000CB8  0011               	retfie		f
  4636  000CBA                     __end_of_interrupcoes:
  4637                           	opt stack 0
  4638                           pclatu	equ	0xFFB
  4639                           pclath	equ	0xFFA
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           intcon	equ	0xFF2
  4647                           intcon2	equ	0xFF1
  4648                           postinc0	equ	0xFEE
  4649                           fsr0h	equ	0xFEA
  4650                           fsr0l	equ	0xFE9
  4651                           wreg	equ	0xFE8
  4652                           fsr1h	equ	0xFE2
  4653                           fsr1l	equ	0xFE1
  4654                           indf2	equ	0xFDF
  4655                           postinc2	equ	0xFDE
  4656                           postdec2	equ	0xFDD
  4657                           fsr2h	equ	0xFDA
  4658                           fsr2l	equ	0xFD9
  4659                           status	equ	0xFD8
  4660                           
  4661 ;; *************** function _PID_set_PF *****************
  4662 ;; Defined at:
  4663 ;;		line 88 in file "main.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;		None
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  4   60[COMRAM] unsigned long 
  4670 ;; Registers used:
  4671 ;;		wreg, status,2, status,0, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4677 ;;      Params:         4       0       0       0       0       0       0       0       0
  4678 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4679 ;;      Temps:          8       0       0       0       0       0       0       0       0
  4680 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4681 ;;Total ram usage:       12 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    2
  4684 ;; This function calls:
  4685 ;;		___altoft
  4686 ;;		___ftadd
  4687 ;;		___ftdiv
  4688 ;;		___lmul
  4689 ;;		i2___ftmul
  4690 ;;		i2___fttol
  4691 ;; This function is called by:
  4692 ;;		_interrupcoes
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696                           	psect	text19
  4697  000F96                     __ptext19:
  4698                           	opt stack 0
  4699  000F96                     _PID_set_PF:
  4700                           	opt stack 23
  4701                           
  4702                           ;main.c: 90: erro0 = ref - fb;
  4703                           
  4704                           ;incstack = 0
  4705  000F96  C074  F041         	movff	_fb,??_PID_set_PF
  4706  000F9A  C075  F042         	movff	_fb+1,??_PID_set_PF+1
  4707  000F9E  C076  F043         	movff	_fb+2,??_PID_set_PF+2
  4708  000FA2  C077  F044         	movff	_fb+3,??_PID_set_PF+3
  4709  000FA6  1E41               	comf	??_PID_set_PF,f,c
  4710  000FA8  1E42               	comf	??_PID_set_PF+1,f,c
  4711  000FAA  1E43               	comf	??_PID_set_PF+2,f,c
  4712  000FAC  1E44               	comf	??_PID_set_PF+3,f,c
  4713  000FAE  2A41               	incf	??_PID_set_PF,f,c
  4714  000FB0  0E00               	movlw	0
  4715  000FB2  2242               	addwfc	??_PID_set_PF+1,f,c
  4716  000FB4  2243               	addwfc	??_PID_set_PF+2,f,c
  4717  000FB6  2244               	addwfc	??_PID_set_PF+3,f,c
  4718  000FB8  0100               	movlb	0	; () banked
  4719  000FBA  5178               	movf	_ref& (0+255),w,b
  4720  000FBC  2441               	addwf	??_PID_set_PF,w,c
  4721  000FBE  6E57               	movwf	_erro0,c
  4722  000FC0  5179               	movf	(_ref+1)& (0+255),w,b
  4723  000FC2  2042               	addwfc	??_PID_set_PF+1,w,c
  4724  000FC4  6E58               	movwf	_erro0+1,c
  4725  000FC6  517A               	movf	(_ref+2)& (0+255),w,b
  4726  000FC8  2043               	addwfc	??_PID_set_PF+2,w,c
  4727  000FCA  6E59               	movwf	_erro0+2,c
  4728  000FCC  517B               	movf	(_ref+3)& (0+255),w,b
  4729  000FCE  2044               	addwfc	??_PID_set_PF+3,w,c
  4730  000FD0  6E5A               	movwf	_erro0+3,c
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;main.c: 91: erro1 = erro0;
  4734  000FD2  C057  F084         	movff	_erro0,_erro1
  4735  000FD6  C058  F085         	movff	_erro0+1,_erro1+1
  4736  000FDA  C059  F086         	movff	_erro0+2,_erro1+2
  4737  000FDE  C05A  F087         	movff	_erro0+3,_erro1+3
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;main.c: 94: integral = integral + (erro0 * T);
  4741  000FE2  C0E6  F016         	movff	_T,i2___ftmul@f2
  4742  000FE6  C0E7  F017         	movff	_T+1,i2___ftmul@f2+1
  4743  000FEA  C0E8  F018         	movff	_T+2,i2___ftmul@f2+2
  4744  000FEE  C057  F009         	movff	_erro0,___altoft@c
  4745  000FF2  C058  F00A         	movff	_erro0+1,___altoft@c+1
  4746  000FF6  C059  F00B         	movff	_erro0+2,___altoft@c+2
  4747  000FFA  C05A  F00C         	movff	_erro0+3,___altoft@c+3
  4748  000FFE  ECA0  F00D         	call	___altoft	;wreg free
  4749  001002  C009  F013         	movff	?___altoft,i2___ftmul@f1
  4750  001006  C00A  F014         	movff	?___altoft+1,i2___ftmul@f1+1
  4751  00100A  C00B  F015         	movff	?___altoft+2,i2___ftmul@f1+2
  4752  00100E  EC04  F00C         	call	i2___ftmul	;wreg free
  4753  001012  C013  F025         	movff	?i2___ftmul,___ftadd@f2
  4754  001016  C014  F026         	movff	?i2___ftmul+1,___ftadd@f2+1
  4755  00101A  C015  F027         	movff	?i2___ftmul+2,___ftadd@f2+2
  4756  00101E  C080  F009         	movff	_integral,___altoft@c
  4757  001022  C081  F00A         	movff	_integral+1,___altoft@c+1
  4758  001026  C082  F00B         	movff	_integral+2,___altoft@c+2
  4759  00102A  C083  F00C         	movff	_integral+3,___altoft@c+3
  4760  00102E  ECA0  F00D         	call	___altoft	;wreg free
  4761  001032  C009  F022         	movff	?___altoft,___ftadd@f1
  4762  001036  C00A  F023         	movff	?___altoft+1,___ftadd@f1+1
  4763  00103A  C00B  F024         	movff	?___altoft+2,___ftadd@f1+2
  4764  00103E  EC07  F009         	call	___ftadd	;wreg free
  4765  001042  C022  F02E         	movff	?___ftadd,i2___fttol@f1
  4766  001046  C023  F02F         	movff	?___ftadd+1,i2___fttol@f1+1
  4767  00104A  C024  F030         	movff	?___ftadd+2,i2___fttol@f1+2
  4768  00104E  EC8A  F00B         	call	i2___fttol	;wreg free
  4769  001052  C02E  F080         	movff	?i2___fttol,_integral
  4770  001056  C02F  F081         	movff	?i2___fttol+1,_integral+1
  4771  00105A  C030  F082         	movff	?i2___fttol+2,_integral+2
  4772  00105E  C031  F083         	movff	?i2___fttol+3,_integral+3
  4773                           
  4774                           ;main.c: 95: derivativo = ((erro0 - erro1) / T);
  4775  001062  C0E6  F016         	movff	_T,___ftdiv@f2
  4776  001066  C0E7  F017         	movff	_T+1,___ftdiv@f2+1
  4777  00106A  C0E8  F018         	movff	_T+2,___ftdiv@f2+2
  4778  00106E  C084  F041         	movff	_erro1,??_PID_set_PF
  4779  001072  C085  F042         	movff	_erro1+1,??_PID_set_PF+1
  4780  001076  C086  F043         	movff	_erro1+2,??_PID_set_PF+2
  4781  00107A  C087  F044         	movff	_erro1+3,??_PID_set_PF+3
  4782  00107E  1E41               	comf	??_PID_set_PF,f,c
  4783  001080  1E42               	comf	??_PID_set_PF+1,f,c
  4784  001082  1E43               	comf	??_PID_set_PF+2,f,c
  4785  001084  1E44               	comf	??_PID_set_PF+3,f,c
  4786  001086  2A41               	incf	??_PID_set_PF,f,c
  4787  001088  0E00               	movlw	0
  4788  00108A  2242               	addwfc	??_PID_set_PF+1,f,c
  4789  00108C  2243               	addwfc	??_PID_set_PF+2,f,c
  4790  00108E  2244               	addwfc	??_PID_set_PF+3,f,c
  4791  001090  5057               	movf	_erro0,w,c
  4792  001092  2441               	addwf	??_PID_set_PF,w,c
  4793  001094  6E09               	movwf	___altoft@c,c
  4794  001096  5058               	movf	_erro0+1,w,c
  4795  001098  2042               	addwfc	??_PID_set_PF+1,w,c
  4796  00109A  6E0A               	movwf	___altoft@c+1,c
  4797  00109C  5059               	movf	_erro0+2,w,c
  4798  00109E  2043               	addwfc	??_PID_set_PF+2,w,c
  4799  0010A0  6E0B               	movwf	___altoft@c+2,c
  4800  0010A2  505A               	movf	_erro0+3,w,c
  4801  0010A4  2044               	addwfc	??_PID_set_PF+3,w,c
  4802  0010A6  6E0C               	movwf	___altoft@c+3,c
  4803  0010A8  ECA0  F00D         	call	___altoft	;wreg free
  4804  0010AC  C009  F013         	movff	?___altoft,___ftdiv@f1
  4805  0010B0  C00A  F014         	movff	?___altoft+1,___ftdiv@f1+1
  4806  0010B4  C00B  F015         	movff	?___altoft+2,___ftdiv@f1+2
  4807  0010B8  EC7E  F00C         	call	___ftdiv	;wreg free
  4808  0010BC  C013  F02E         	movff	?___ftdiv,i2___fttol@f1
  4809  0010C0  C014  F02F         	movff	?___ftdiv+1,i2___fttol@f1+1
  4810  0010C4  C015  F030         	movff	?___ftdiv+2,i2___fttol@f1+2
  4811  0010C8  EC8A  F00B         	call	i2___fttol	;wreg free
  4812  0010CC  C02E  F07C         	movff	?i2___fttol,_derivativo
  4813  0010D0  C02F  F07D         	movff	?i2___fttol+1,_derivativo+1
  4814  0010D4  C030  F07E         	movff	?i2___fttol+2,_derivativo+2
  4815  0010D8  C031  F07F         	movff	?i2___fttol+3,_derivativo+3
  4816                           
  4817                           ;main.c: 96: out0 = ((k1 * erro0)+ (k2 * integral) + (k3 * derivativo));
  4818  0010DC  C090  F001         	movff	_k1,___lmul@multiplier
  4819  0010E0  C091  F002         	movff	_k1+1,___lmul@multiplier+1
  4820  0010E4  C092  F003         	movff	_k1+2,___lmul@multiplier+2
  4821  0010E8  C093  F004         	movff	_k1+3,___lmul@multiplier+3
  4822  0010EC  C057  F005         	movff	_erro0,___lmul@multiplicand
  4823  0010F0  C058  F006         	movff	_erro0+1,___lmul@multiplicand+1
  4824  0010F4  C059  F007         	movff	_erro0+2,___lmul@multiplicand+2
  4825  0010F8  C05A  F008         	movff	_erro0+3,___lmul@multiplicand+3
  4826  0010FC  EC78  F00E         	call	___lmul	;wreg free
  4827  001100  C001  F041         	movff	?___lmul,??_PID_set_PF
  4828  001104  C002  F042         	movff	?___lmul+1,??_PID_set_PF+1
  4829  001108  C003  F043         	movff	?___lmul+2,??_PID_set_PF+2
  4830  00110C  C004  F044         	movff	?___lmul+3,??_PID_set_PF+3
  4831  001110  C08C  F001         	movff	_k2,___lmul@multiplier
  4832  001114  C08D  F002         	movff	_k2+1,___lmul@multiplier+1
  4833  001118  C08E  F003         	movff	_k2+2,___lmul@multiplier+2
  4834  00111C  C08F  F004         	movff	_k2+3,___lmul@multiplier+3
  4835  001120  C080  F005         	movff	_integral,___lmul@multiplicand
  4836  001124  C081  F006         	movff	_integral+1,___lmul@multiplicand+1
  4837  001128  C082  F007         	movff	_integral+2,___lmul@multiplicand+2
  4838  00112C  C083  F008         	movff	_integral+3,___lmul@multiplicand+3
  4839  001130  EC78  F00E         	call	___lmul	;wreg free
  4840  001134  5001               	movf	?___lmul,w,c
  4841  001136  2441               	addwf	??_PID_set_PF,w,c
  4842  001138  6E45               	movwf	(??_PID_set_PF+4)& (0+255),c
  4843  00113A  5002               	movf	?___lmul+1,w,c
  4844  00113C  2042               	addwfc	??_PID_set_PF+1,w,c
  4845  00113E  6E46               	movwf	(??_PID_set_PF+5)& (0+255),c
  4846  001140  5003               	movf	?___lmul+2,w,c
  4847  001142  2043               	addwfc	??_PID_set_PF+2,w,c
  4848  001144  6E47               	movwf	(??_PID_set_PF+6)& (0+255),c
  4849  001146  5004               	movf	?___lmul+3,w,c
  4850  001148  2044               	addwfc	??_PID_set_PF+3,w,c
  4851  00114A  6E48               	movwf	(??_PID_set_PF+7)& (0+255),c
  4852  00114C  C088  F001         	movff	_k3,___lmul@multiplier
  4853  001150  C089  F002         	movff	_k3+1,___lmul@multiplier+1
  4854  001154  C08A  F003         	movff	_k3+2,___lmul@multiplier+2
  4855  001158  C08B  F004         	movff	_k3+3,___lmul@multiplier+3
  4856  00115C  C07C  F005         	movff	_derivativo,___lmul@multiplicand
  4857  001160  C07D  F006         	movff	_derivativo+1,___lmul@multiplicand+1
  4858  001164  C07E  F007         	movff	_derivativo+2,___lmul@multiplicand+2
  4859  001168  C07F  F008         	movff	_derivativo+3,___lmul@multiplicand+3
  4860  00116C  EC78  F00E         	call	___lmul	;wreg free
  4861  001170  5001               	movf	?___lmul,w,c
  4862  001172  2445               	addwf	??_PID_set_PF+4,w,c
  4863  001174  6E53               	movwf	_out0,c
  4864  001176  5002               	movf	?___lmul+1,w,c
  4865  001178  2046               	addwfc	??_PID_set_PF+5,w,c
  4866  00117A  6E54               	movwf	_out0+1,c
  4867  00117C  5003               	movf	?___lmul+2,w,c
  4868  00117E  2047               	addwfc	??_PID_set_PF+6,w,c
  4869  001180  6E55               	movwf	_out0+2,c
  4870  001182  5004               	movf	?___lmul+3,w,c
  4871  001184  2048               	addwfc	??_PID_set_PF+7,w,c
  4872  001186  6E56               	movwf	_out0+3,c
  4873                           
  4874                           ;main.c: 97: out0 = out0 >> 8;
  4875  001188  C054  F041         	movff	_out0+1,??_PID_set_PF
  4876  00118C  C055  F042         	movff	_out0+2,??_PID_set_PF+1
  4877  001190  C056  F043         	movff	_out0+3,??_PID_set_PF+2
  4878  001194  6A44               	clrf	(??_PID_set_PF+3)& (0+255),c
  4879  001196  BE43               	btfsc	(??_PID_set_PF+2)& (0+255),7,c
  4880  001198  6844               	setf	(??_PID_set_PF+3)& (0+255),c
  4881  00119A  C041  F053         	movff	??_PID_set_PF,_out0
  4882  00119E  C042  F054         	movff	??_PID_set_PF+1,_out0+1
  4883  0011A2  C043  F055         	movff	??_PID_set_PF+2,_out0+2
  4884  0011A6  C044  F056         	movff	??_PID_set_PF+3,_out0+3
  4885                           
  4886                           ;main.c: 99: if (out0 < 0x00)
  4887  0011AA  AE56               	btfss	_out0+3,7,c
  4888  0011AC  D008               	goto	i2l179
  4889                           
  4890                           ;main.c: 100: {
  4891                           ;main.c: 101: out0 = out0 * (-1);
  4892  0011AE  1E56               	comf	_out0+3,f,c
  4893  0011B0  1E55               	comf	_out0+2,f,c
  4894  0011B2  1E54               	comf	_out0+1,f,c
  4895  0011B4  6C53               	negf	_out0,c
  4896  0011B6  0E00               	movlw	0
  4897  0011B8  2254               	addwfc	_out0+1,f,c
  4898  0011BA  2255               	addwfc	_out0+2,f,c
  4899  0011BC  2256               	addwfc	_out0+3,f,c
  4900  0011BE                     i2l179:
  4901                           
  4902                           ;main.c: 102: }
  4903                           ;main.c: 103: if (out0 > 1023)
  4904  0011BE  BE56               	btfsc	_out0+3,7,c
  4905  0011C0  D00F               	goto	i2l180
  4906  0011C2  5056               	movf	_out0+3,w,c
  4907  0011C4  1055               	iorwf	_out0+2,w,c
  4908  0011C6  E104               	bnz	i2u225_40
  4909  0011C8  0E04               	movlw	4
  4910  0011CA  5C54               	subwf	_out0+1,w,c
  4911  0011CC  A0D8               	btfss	status,0,c
  4912  0011CE  D008               	goto	i2l180
  4913  0011D0                     i2u225_40:
  4914                           
  4915                           ;main.c: 104: {
  4916                           ;main.c: 105: out0 = 1023;
  4917  0011D0  0EFF               	movlw	255
  4918  0011D2  6E53               	movwf	_out0,c
  4919  0011D4  0E03               	movlw	3
  4920  0011D6  6E54               	movwf	_out0+1,c
  4921  0011D8  0E00               	movlw	0
  4922  0011DA  6E55               	movwf	_out0+2,c
  4923  0011DC  0E00               	movlw	0
  4924  0011DE  6E56               	movwf	_out0+3,c
  4925  0011E0                     i2l180:
  4926                           
  4927                           ;main.c: 106: }
  4928                           ;main.c: 107: if (out0 == 0)
  4929  0011E0  5053               	movf	_out0,w,c
  4930  0011E2  1054               	iorwf	_out0+1,w,c
  4931  0011E4  1055               	iorwf	_out0+2,w,c
  4932  0011E6  1056               	iorwf	_out0+3,w,c
  4933  0011E8  A4D8               	btfss	status,2,c
  4934  0011EA  D008               	goto	i2l181
  4935                           
  4936                           ;main.c: 108: out0 = 0;
  4937  0011EC  0E00               	movlw	0
  4938  0011EE  6E53               	movwf	_out0,c
  4939  0011F0  0E00               	movlw	0
  4940  0011F2  6E54               	movwf	_out0+1,c
  4941  0011F4  0E00               	movlw	0
  4942  0011F6  6E55               	movwf	_out0+2,c
  4943  0011F8  0E00               	movlw	0
  4944  0011FA  6E56               	movwf	_out0+3,c
  4945  0011FC                     i2l181:
  4946                           
  4947                           ;main.c: 109: return out0;
  4948  0011FC  C053  F03D         	movff	_out0,?_PID_set_PF
  4949  001200  C054  F03E         	movff	_out0+1,?_PID_set_PF+1
  4950  001204  C055  F03F         	movff	_out0+2,?_PID_set_PF+2
  4951  001208  C056  F040         	movff	_out0+3,?_PID_set_PF+3
  4952  00120C  0012               	return	
  4953  00120E                     __end_of_PID_set_PF:
  4954                           	opt stack 0
  4955                           pclatu	equ	0xFFB
  4956                           pclath	equ	0xFFA
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           intcon2	equ	0xFF1
  4965                           postinc0	equ	0xFEE
  4966                           fsr0h	equ	0xFEA
  4967                           fsr0l	equ	0xFE9
  4968                           wreg	equ	0xFE8
  4969                           fsr1h	equ	0xFE2
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function i2___fttol *****************
  4979 ;; Defined at:
  4980 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  f1              3   45[COMRAM] float 
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  __fttol         4   55[COMRAM] unsigned long 
  4985 ;;  __fttol         1   59[COMRAM] unsigned char 
  4986 ;;  __fttol         1   54[COMRAM] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  4   45[COMRAM] long 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4996 ;;      Params:         4       0       0       0       0       0       0       0       0
  4997 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4998 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4999 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5000 ;;Total ram usage:       15 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_PID_set_PF
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text20
  5010  001714                     __ptext20:
  5011                           	opt stack 0
  5012  001714                     i2___fttol:
  5013                           	opt stack 24
  5014                           
  5015                           ;incstack = 0
  5016  001714  C030  F032         	movff	i2___fttol@f1+2,??i2___fttol
  5017  001718  6A33               	clrf	(??i2___fttol+1)& (0+255),c
  5018  00171A  6A34               	clrf	(??i2___fttol+2)& (0+255),c
  5019  00171C  342F               	rlcf	i2___fttol@f1+1,w,c
  5020  00171E  3632               	rlcf	??i2___fttol& (0+255),f,c
  5021  001720  E301               	bnc	u212_41
  5022  001722  8033               	bsf	(??i2___fttol+1)& (0+255),0,c
  5023  001724                     u212_41:
  5024  001724  5032               	movf	??i2___fttol,w,c
  5025  001726  6E3C               	movwf	i2___fttol@exp1,c
  5026  001728  503C               	movf	i2___fttol@exp1,w,c
  5027  00172A  A4D8               	btfss	status,2,c
  5028  00172C  D009               	goto	i2l565
  5029  00172E  0E00               	movlw	0
  5030  001730  6E2E               	movwf	?i2___fttol,c
  5031  001732  0E00               	movlw	0
  5032  001734  6E2F               	movwf	?i2___fttol+1,c
  5033  001736  0E00               	movlw	0
  5034  001738  6E30               	movwf	?i2___fttol+2,c
  5035  00173A  0E00               	movlw	0
  5036  00173C  6E31               	movwf	?i2___fttol+3,c
  5037  00173E  0012               	return	
  5038  001740                     i2l565:
  5039  001740  0E17               	movlw	23
  5040  001742  6E32               	movwf	??i2___fttol& (0+255),c
  5041  001744  C02E  F033         	movff	i2___fttol@f1,??i2___fttol+1
  5042  001748  C02F  F034         	movff	i2___fttol@f1+1,??i2___fttol+2
  5043  00174C  C030  F035         	movff	i2___fttol@f1+2,??i2___fttol+3
  5044  001750  2832               	incf	??i2___fttol,w,c
  5045  001752  6E36               	movwf	(??i2___fttol+4)& (0+255),c
  5046  001754  D004               	goto	i2u214_40
  5047  001756                     i2u214_45:
  5048  001756  90D8               	bcf	status,0,c
  5049  001758  3235               	rrcf	??i2___fttol+3,f,c
  5050  00175A  3234               	rrcf	??i2___fttol+2,f,c
  5051  00175C  3233               	rrcf	??i2___fttol+1,f,c
  5052  00175E                     i2u214_40:
  5053  00175E  2E36               	decfsz	(??i2___fttol+4)& (0+255),f,c
  5054  001760  D7FA               	goto	i2u214_45
  5055  001762  5033               	movf	??i2___fttol+1,w,c
  5056  001764  6E37               	movwf	i2___fttol@sign1,c
  5057  001766  8E2F               	bsf	i2___fttol@f1+1,7,c
  5058  001768  0EFF               	movlw	255
  5059  00176A  162E               	andwf	i2___fttol@f1,f,c
  5060  00176C  0EFF               	movlw	255
  5061  00176E  162F               	andwf	i2___fttol@f1+1,f,c
  5062  001770  0E00               	movlw	0
  5063  001772  1630               	andwf	i2___fttol@f1+2,f,c
  5064  001774  502E               	movf	i2___fttol@f1,w,c
  5065  001776  6E38               	movwf	i2___fttol@lval,c
  5066  001778  502F               	movf	i2___fttol@f1+1,w,c
  5067  00177A  6E39               	movwf	i2___fttol@lval+1,c
  5068  00177C  5030               	movf	i2___fttol@f1+2,w,c
  5069  00177E  6E3A               	movwf	i2___fttol@lval+2,c
  5070  001780  6A3B               	clrf	i2___fttol@lval+3,c
  5071  001782  0E8E               	movlw	142
  5072  001784  5E3C               	subwf	i2___fttol@exp1,f,c
  5073  001786  AE3C               	btfss	i2___fttol@exp1,7,c
  5074  001788  D016               	goto	i2l567
  5075  00178A  503C               	movf	i2___fttol@exp1,w,c
  5076  00178C  0A80               	xorlw	128
  5077  00178E  0F8F               	addlw	143
  5078  001790  B0D8               	btfsc	status,0,c
  5079  001792  D009               	goto	i2l568
  5080  001794  0E00               	movlw	0
  5081  001796  6E2E               	movwf	?i2___fttol,c
  5082  001798  0E00               	movlw	0
  5083  00179A  6E2F               	movwf	?i2___fttol+1,c
  5084  00179C  0E00               	movlw	0
  5085  00179E  6E30               	movwf	?i2___fttol+2,c
  5086  0017A0  0E00               	movlw	0
  5087  0017A2  6E31               	movwf	?i2___fttol+3,c
  5088  0017A4  0012               	return	
  5089  0017A6                     i2l568:
  5090  0017A6  90D8               	bcf	status,0,c
  5091  0017A8  323B               	rrcf	i2___fttol@lval+3,f,c
  5092  0017AA  323A               	rrcf	i2___fttol@lval+2,f,c
  5093  0017AC  3239               	rrcf	i2___fttol@lval+1,f,c
  5094  0017AE  3238               	rrcf	i2___fttol@lval,f,c
  5095  0017B0  3E3C               	incfsz	i2___fttol@exp1,f,c
  5096  0017B2  D7F9               	goto	i2l568
  5097  0017B4  D015               	goto	i2u218_40
  5098  0017B6                     i2l567:
  5099  0017B6  0E17               	movlw	23
  5100  0017B8  643C               	cpfsgt	i2___fttol@exp1,c
  5101  0017BA  D00F               	goto	i2l573
  5102  0017BC  0E00               	movlw	0
  5103  0017BE  6E2E               	movwf	?i2___fttol,c
  5104  0017C0  0E00               	movlw	0
  5105  0017C2  6E2F               	movwf	?i2___fttol+1,c
  5106  0017C4  0E00               	movlw	0
  5107  0017C6  6E30               	movwf	?i2___fttol+2,c
  5108  0017C8  0E00               	movlw	0
  5109  0017CA  6E31               	movwf	?i2___fttol+3,c
  5110  0017CC  0012               	return	
  5111  0017CE  90D8               	bcf	status,0,c
  5112  0017D0  3638               	rlcf	i2___fttol@lval,f,c
  5113  0017D2  3639               	rlcf	i2___fttol@lval+1,f,c
  5114  0017D4  363A               	rlcf	i2___fttol@lval+2,f,c
  5115  0017D6  363B               	rlcf	i2___fttol@lval+3,f,c
  5116  0017D8  063C               	decf	i2___fttol@exp1,f,c
  5117  0017DA                     i2l573:
  5118  0017DA  503C               	movf	i2___fttol@exp1,w,c
  5119  0017DC  A4D8               	btfss	status,2,c
  5120  0017DE  D7F7               	goto	i2l574
  5121  0017E0                     i2u218_40:
  5122  0017E0  5037               	movf	i2___fttol@sign1,w,c
  5123  0017E2  B4D8               	btfsc	status,2,c
  5124  0017E4  D008               	goto	i2l576
  5125  0017E6  1E3B               	comf	i2___fttol@lval+3,f,c
  5126  0017E8  1E3A               	comf	i2___fttol@lval+2,f,c
  5127  0017EA  1E39               	comf	i2___fttol@lval+1,f,c
  5128  0017EC  6C38               	negf	i2___fttol@lval,c
  5129  0017EE  0E00               	movlw	0
  5130  0017F0  2239               	addwfc	i2___fttol@lval+1,f,c
  5131  0017F2  223A               	addwfc	i2___fttol@lval+2,f,c
  5132  0017F4  223B               	addwfc	i2___fttol@lval+3,f,c
  5133  0017F6                     i2l576:
  5134  0017F6  C038  F02E         	movff	i2___fttol@lval,?i2___fttol
  5135  0017FA  C039  F02F         	movff	i2___fttol@lval+1,?i2___fttol+1
  5136  0017FE  C03A  F030         	movff	i2___fttol@lval+2,?i2___fttol+2
  5137  001802  C03B  F031         	movff	i2___fttol@lval+3,?i2___fttol+3
  5138  001806  0012               	return	
  5139  001808                     __end_ofi2___fttol:
  5140                           	opt stack 0
  5141                           pclatu	equ	0xFFB
  5142                           pclath	equ	0xFFA
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           intcon	equ	0xFF2
  5150                           intcon2	equ	0xFF1
  5151                           postinc0	equ	0xFEE
  5152                           fsr0h	equ	0xFEA
  5153                           fsr0l	equ	0xFE9
  5154                           wreg	equ	0xFE8
  5155                           fsr1h	equ	0xFE2
  5156                           fsr1l	equ	0xFE1
  5157                           indf2	equ	0xFDF
  5158                           postinc2	equ	0xFDE
  5159                           postdec2	equ	0xFDD
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function i2___ftmul *****************
  5165 ;; Defined at:
  5166 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  f1              3   18[COMRAM] float 
  5169 ;;  f2              3   21[COMRAM] float 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  __ftmul         3   28[COMRAM] unsigned um
  5172 ;;  __ftmul         1   32[COMRAM] unsigned char 
  5173 ;;  __ftmul         1   31[COMRAM] unsigned char 
  5174 ;;  __ftmul         1   27[COMRAM] unsigned char 
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  3   18[COMRAM] float 
  5177 ;; Registers used:
  5178 ;;		wreg, status,2, status,0, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5184 ;;      Params:         6       0       0       0       0       0       0       0       0
  5185 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5186 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5187 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5188 ;;Total ram usage:       15 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    1
  5191 ;; This function calls:
  5192 ;;		i2___ftpack
  5193 ;; This function is called by:
  5194 ;;		_PID_set_PF
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text21
  5199  001808                     __ptext21:
  5200                           	opt stack 0
  5201  001808                     i2___ftmul:
  5202                           	opt stack 23
  5203                           
  5204                           ;incstack = 0
  5205  001808  C015  F019         	movff	i2___ftmul@f1+2,??i2___ftmul
  5206  00180C  6A1A               	clrf	(??i2___ftmul+1)& (0+255),c
  5207  00180E  6A1B               	clrf	(??i2___ftmul+2)& (0+255),c
  5208  001810  3414               	rlcf	i2___ftmul@f1+1,w,c
  5209  001812  3619               	rlcf	??i2___ftmul& (0+255),f,c
  5210  001814  E301               	bnc	u206_41
  5211  001816  801A               	bsf	(??i2___ftmul+1)& (0+255),0,c
  5212  001818                     u206_41:
  5213  001818  5019               	movf	??i2___ftmul,w,c
  5214  00181A  6E1C               	movwf	i2___ftmul@exp,c
  5215  00181C  501C               	movf	i2___ftmul@exp,w,c
  5216  00181E  A4D8               	btfss	status,2,c
  5217  001820  D007               	goto	i2l544
  5218  001822  0E00               	movlw	0
  5219  001824  6E13               	movwf	?i2___ftmul,c
  5220  001826  0E00               	movlw	0
  5221  001828  6E14               	movwf	?i2___ftmul+1,c
  5222  00182A  0E00               	movlw	0
  5223  00182C  6E15               	movwf	?i2___ftmul+2,c
  5224  00182E  0012               	return	
  5225  001830                     i2l544:
  5226  001830  C018  F019         	movff	i2___ftmul@f2+2,??i2___ftmul
  5227  001834  6A1A               	clrf	(??i2___ftmul+1)& (0+255),c
  5228  001836  6A1B               	clrf	(??i2___ftmul+2)& (0+255),c
  5229  001838  3417               	rlcf	i2___ftmul@f2+1,w,c
  5230  00183A  3619               	rlcf	??i2___ftmul& (0+255),f,c
  5231  00183C  E301               	bnc	u208_41
  5232  00183E  801A               	bsf	(??i2___ftmul+1)& (0+255),0,c
  5233  001840                     u208_41:
  5234  001840  5019               	movf	??i2___ftmul,w,c
  5235  001842  6E21               	movwf	i2___ftmul@sign,c
  5236  001844  5021               	movf	i2___ftmul@sign,w,c
  5237  001846  A4D8               	btfss	status,2,c
  5238  001848  D007               	goto	i2l546
  5239  00184A  0E00               	movlw	0
  5240  00184C  6E13               	movwf	?i2___ftmul,c
  5241  00184E  0E00               	movlw	0
  5242  001850  6E14               	movwf	?i2___ftmul+1,c
  5243  001852  0E00               	movlw	0
  5244  001854  6E15               	movwf	?i2___ftmul+2,c
  5245  001856  0012               	return	
  5246  001858                     i2l546:
  5247  001858  5021               	movf	i2___ftmul@sign,w,c
  5248  00185A  0F7B               	addlw	123
  5249  00185C  261C               	addwf	i2___ftmul@exp,f,c
  5250  00185E  C015  F021         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  5251  001862  5018               	movf	i2___ftmul@f2+2,w,c
  5252  001864  1A21               	xorwf	i2___ftmul@sign,f,c
  5253  001866  0E80               	movlw	128
  5254  001868  1621               	andwf	i2___ftmul@sign,f,c
  5255  00186A  8E14               	bsf	i2___ftmul@f1+1,7,c
  5256  00186C  8E17               	bsf	i2___ftmul@f2+1,7,c
  5257  00186E  0EFF               	movlw	255
  5258  001870  1616               	andwf	i2___ftmul@f2,f,c
  5259  001872  0EFF               	movlw	255
  5260  001874  1617               	andwf	i2___ftmul@f2+1,f,c
  5261  001876  0E00               	movlw	0
  5262  001878  1618               	andwf	i2___ftmul@f2+2,f,c
  5263  00187A  0E00               	movlw	0
  5264  00187C  6E1D               	movwf	i2___ftmul@f3_as_product,c
  5265  00187E  0E00               	movlw	0
  5266  001880  6E1E               	movwf	i2___ftmul@f3_as_product+1,c
  5267  001882  0E00               	movlw	0
  5268  001884  6E1F               	movwf	i2___ftmul@f3_as_product+2,c
  5269  001886  0E07               	movlw	7
  5270  001888  6E20               	movwf	i2___ftmul@cntr,c
  5271  00188A  A013               	btfss	i2___ftmul@f1,0,c
  5272  00188C  D006               	goto	i2l548
  5273  00188E  5016               	movf	i2___ftmul@f2,w,c
  5274  001890  261D               	addwf	i2___ftmul@f3_as_product,f,c
  5275  001892  5017               	movf	i2___ftmul@f2+1,w,c
  5276  001894  221E               	addwfc	i2___ftmul@f3_as_product+1,f,c
  5277  001896  5018               	movf	i2___ftmul@f2+2,w,c
  5278  001898  221F               	addwfc	i2___ftmul@f3_as_product+2,f,c
  5279  00189A                     i2l548:
  5280  00189A  90D8               	bcf	status,0,c
  5281  00189C  3215               	rrcf	i2___ftmul@f1+2,f,c
  5282  00189E  3214               	rrcf	i2___ftmul@f1+1,f,c
  5283  0018A0  3213               	rrcf	i2___ftmul@f1,f,c
  5284  0018A2  90D8               	bcf	status,0,c
  5285  0018A4  3616               	rlcf	i2___ftmul@f2,f,c
  5286  0018A6  3617               	rlcf	i2___ftmul@f2+1,f,c
  5287  0018A8  3618               	rlcf	i2___ftmul@f2+2,f,c
  5288  0018AA  2E20               	decfsz	i2___ftmul@cntr,f,c
  5289  0018AC  D7EE               	goto	i2l547
  5290  0018AE  0E09               	movlw	9
  5291  0018B0  6E20               	movwf	i2___ftmul@cntr,c
  5292  0018B2  A013               	btfss	i2___ftmul@f1,0,c
  5293  0018B4  D006               	goto	i2l551
  5294  0018B6  5016               	movf	i2___ftmul@f2,w,c
  5295  0018B8  261D               	addwf	i2___ftmul@f3_as_product,f,c
  5296  0018BA  5017               	movf	i2___ftmul@f2+1,w,c
  5297  0018BC  221E               	addwfc	i2___ftmul@f3_as_product+1,f,c
  5298  0018BE  5018               	movf	i2___ftmul@f2+2,w,c
  5299  0018C0  221F               	addwfc	i2___ftmul@f3_as_product+2,f,c
  5300  0018C2                     i2l551:
  5301  0018C2  90D8               	bcf	status,0,c
  5302  0018C4  3215               	rrcf	i2___ftmul@f1+2,f,c
  5303  0018C6  3214               	rrcf	i2___ftmul@f1+1,f,c
  5304  0018C8  3213               	rrcf	i2___ftmul@f1,f,c
  5305  0018CA  90D8               	bcf	status,0,c
  5306  0018CC  321F               	rrcf	i2___ftmul@f3_as_product+2,f,c
  5307  0018CE  321E               	rrcf	i2___ftmul@f3_as_product+1,f,c
  5308  0018D0  321D               	rrcf	i2___ftmul@f3_as_product,f,c
  5309  0018D2  2E20               	decfsz	i2___ftmul@cntr,f,c
  5310  0018D4  D7EE               	goto	i2l550
  5311  0018D6  C01D  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  5312  0018DA  C01E  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  5313  0018DE  C01F  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  5314  0018E2  C01C  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  5315  0018E6  C021  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  5316  0018EA  EC49  F00D         	call	i2___ftpack	;wreg free
  5317  0018EE  C001  F013         	movff	?i2___ftpack,?i2___ftmul
  5318  0018F2  C002  F014         	movff	?i2___ftpack+1,?i2___ftmul+1
  5319  0018F6  C003  F015         	movff	?i2___ftpack+2,?i2___ftmul+2
  5320  0018FA  0012               	return	
  5321  0018FC                     __end_ofi2___ftmul:
  5322                           	opt stack 0
  5323                           pclatu	equ	0xFFB
  5324                           pclath	equ	0xFFA
  5325                           tblptru	equ	0xFF8
  5326                           tblptrh	equ	0xFF7
  5327                           tblptrl	equ	0xFF6
  5328                           tablat	equ	0xFF5
  5329                           prodh	equ	0xFF4
  5330                           prodl	equ	0xFF3
  5331                           intcon	equ	0xFF2
  5332                           intcon2	equ	0xFF1
  5333                           postinc0	equ	0xFEE
  5334                           fsr0h	equ	0xFEA
  5335                           fsr0l	equ	0xFE9
  5336                           wreg	equ	0xFE8
  5337                           fsr1h	equ	0xFE2
  5338                           fsr1l	equ	0xFE1
  5339                           indf2	equ	0xFDF
  5340                           postinc2	equ	0xFDE
  5341                           postdec2	equ	0xFDD
  5342                           fsr2h	equ	0xFDA
  5343                           fsr2l	equ	0xFD9
  5344                           status	equ	0xFD8
  5345                           
  5346 ;; *************** function ___lmul *****************
  5347 ;; Defined at:
  5348 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  multiplier      4    0[COMRAM] unsigned long 
  5351 ;;  multiplicand    4    4[COMRAM] unsigned long 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  product         4    8[COMRAM] unsigned long 
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  4    0[COMRAM] unsigned long 
  5356 ;; Registers used:
  5357 ;;		wreg, status,2, status,0
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5363 ;;      Params:         8       0       0       0       0       0       0       0       0
  5364 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5366 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5367 ;;Total ram usage:       12 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; This function calls:
  5370 ;;		Nothing
  5371 ;; This function is called by:
  5372 ;;		_PID_set_PF
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text22
  5377  001CF0                     __ptext22:
  5378                           	opt stack 0
  5379  001CF0                     ___lmul:
  5380                           	opt stack 24
  5381                           
  5382                           ;incstack = 0
  5383  001CF0  0E00               	movlw	0
  5384  001CF2  6E09               	movwf	___lmul@product,c
  5385  001CF4  0E00               	movlw	0
  5386  001CF6  6E0A               	movwf	___lmul@product+1,c
  5387  001CF8  0E00               	movlw	0
  5388  001CFA  6E0B               	movwf	___lmul@product+2,c
  5389  001CFC  0E00               	movlw	0
  5390  001CFE  6E0C               	movwf	___lmul@product+3,c
  5391  001D00  A001               	btfss	___lmul@multiplier,0,c
  5392  001D02  D008               	goto	i2l263
  5393  001D04  5005               	movf	___lmul@multiplicand,w,c
  5394  001D06  2609               	addwf	___lmul@product,f,c
  5395  001D08  5006               	movf	___lmul@multiplicand+1,w,c
  5396  001D0A  220A               	addwfc	___lmul@product+1,f,c
  5397  001D0C  5007               	movf	___lmul@multiplicand+2,w,c
  5398  001D0E  220B               	addwfc	___lmul@product+2,f,c
  5399  001D10  5008               	movf	___lmul@multiplicand+3,w,c
  5400  001D12  220C               	addwfc	___lmul@product+3,f,c
  5401  001D14                     i2l263:
  5402  001D14  90D8               	bcf	status,0,c
  5403  001D16  3605               	rlcf	___lmul@multiplicand,f,c
  5404  001D18  3606               	rlcf	___lmul@multiplicand+1,f,c
  5405  001D1A  3607               	rlcf	___lmul@multiplicand+2,f,c
  5406  001D1C  3608               	rlcf	___lmul@multiplicand+3,f,c
  5407  001D1E  90D8               	bcf	status,0,c
  5408  001D20  3204               	rrcf	___lmul@multiplier+3,f,c
  5409  001D22  3203               	rrcf	___lmul@multiplier+2,f,c
  5410  001D24  3202               	rrcf	___lmul@multiplier+1,f,c
  5411  001D26  3201               	rrcf	___lmul@multiplier,f,c
  5412  001D28  5001               	movf	___lmul@multiplier,w,c
  5413  001D2A  1002               	iorwf	___lmul@multiplier+1,w,c
  5414  001D2C  1003               	iorwf	___lmul@multiplier+2,w,c
  5415  001D2E  1004               	iorwf	___lmul@multiplier+3,w,c
  5416  001D30  A4D8               	btfss	status,2,c
  5417  001D32  D7E6               	goto	i2l262
  5418  001D34  C009  F001         	movff	___lmul@product,?___lmul
  5419  001D38  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  5420  001D3C  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  5421  001D40  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  5422  001D44  0012               	return		;funcret
  5423  001D46                     __end_of___lmul:
  5424                           	opt stack 0
  5425                           pclatu	equ	0xFFB
  5426                           pclath	equ	0xFFA
  5427                           tblptru	equ	0xFF8
  5428                           tblptrh	equ	0xFF7
  5429                           tblptrl	equ	0xFF6
  5430                           tablat	equ	0xFF5
  5431                           prodh	equ	0xFF4
  5432                           prodl	equ	0xFF3
  5433                           intcon	equ	0xFF2
  5434                           intcon2	equ	0xFF1
  5435                           postinc0	equ	0xFEE
  5436                           fsr0h	equ	0xFEA
  5437                           fsr0l	equ	0xFE9
  5438                           wreg	equ	0xFE8
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function ___ftdiv *****************
  5449 ;; Defined at:
  5450 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  f1              3   18[COMRAM] float 
  5453 ;;  f2              3   21[COMRAM] float 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  f3              3   28[COMRAM] float 
  5456 ;;  sign            1   32[COMRAM] unsigned char 
  5457 ;;  exp             1   31[COMRAM] unsigned char 
  5458 ;;  cntr            1   27[COMRAM] unsigned char 
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  3   18[COMRAM] float 
  5461 ;; Registers used:
  5462 ;;		wreg, status,2, status,0, cstack
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5468 ;;      Params:         6       0       0       0       0       0       0       0       0
  5469 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5470 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5471 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5472 ;;Total ram usage:       15 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    1
  5475 ;; This function calls:
  5476 ;;		i2___ftpack
  5477 ;; This function is called by:
  5478 ;;		_PID_set_PF
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text23
  5483  0018FC                     __ptext23:
  5484                           	opt stack 0
  5485  0018FC                     ___ftdiv:
  5486                           	opt stack 23
  5487                           
  5488                           ;incstack = 0
  5489  0018FC  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  5490  001900  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  5491  001902  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  5492  001904  3414               	rlcf	___ftdiv@f1+1,w,c
  5493  001906  3619               	rlcf	??___ftdiv& (0+255),f,c
  5494  001908  E301               	bnc	u195_41
  5495  00190A  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  5496  00190C                     u195_41:
  5497  00190C  5019               	movf	??___ftdiv,w,c
  5498  00190E  6E20               	movwf	___ftdiv@exp,c
  5499  001910  5020               	movf	___ftdiv@exp,w,c
  5500  001912  A4D8               	btfss	status,2,c
  5501  001914  D007               	goto	i2l529
  5502  001916  0E00               	movlw	0
  5503  001918  6E13               	movwf	?___ftdiv,c
  5504  00191A  0E00               	movlw	0
  5505  00191C  6E14               	movwf	?___ftdiv+1,c
  5506  00191E  0E00               	movlw	0
  5507  001920  6E15               	movwf	?___ftdiv+2,c
  5508  001922  0012               	return	
  5509  001924                     i2l529:
  5510  001924  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  5511  001928  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  5512  00192A  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  5513  00192C  3417               	rlcf	___ftdiv@f2+1,w,c
  5514  00192E  3619               	rlcf	??___ftdiv& (0+255),f,c
  5515  001930  E301               	bnc	u197_41
  5516  001932  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  5517  001934                     u197_41:
  5518  001934  5019               	movf	??___ftdiv,w,c
  5519  001936  6E21               	movwf	___ftdiv@sign,c
  5520  001938  5021               	movf	___ftdiv@sign,w,c
  5521  00193A  A4D8               	btfss	status,2,c
  5522  00193C  D007               	goto	i2l531
  5523  00193E  0E00               	movlw	0
  5524  001940  6E13               	movwf	?___ftdiv,c
  5525  001942  0E00               	movlw	0
  5526  001944  6E14               	movwf	?___ftdiv+1,c
  5527  001946  0E00               	movlw	0
  5528  001948  6E15               	movwf	?___ftdiv+2,c
  5529  00194A  0012               	return	
  5530  00194C                     i2l531:
  5531  00194C  0E00               	movlw	0
  5532  00194E  6E1D               	movwf	___ftdiv@f3,c
  5533  001950  0E00               	movlw	0
  5534  001952  6E1E               	movwf	___ftdiv@f3+1,c
  5535  001954  0E00               	movlw	0
  5536  001956  6E1F               	movwf	___ftdiv@f3+2,c
  5537  001958  5021               	movf	___ftdiv@sign,w,c
  5538  00195A  0F89               	addlw	137
  5539  00195C  5E20               	subwf	___ftdiv@exp,f,c
  5540  00195E  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  5541  001962  5018               	movf	___ftdiv@f2+2,w,c
  5542  001964  1A21               	xorwf	___ftdiv@sign,f,c
  5543  001966  0E80               	movlw	128
  5544  001968  1621               	andwf	___ftdiv@sign,f,c
  5545  00196A  8E14               	bsf	___ftdiv@f1+1,7,c
  5546  00196C  0EFF               	movlw	255
  5547  00196E  1613               	andwf	___ftdiv@f1,f,c
  5548  001970  0EFF               	movlw	255
  5549  001972  1614               	andwf	___ftdiv@f1+1,f,c
  5550  001974  0E00               	movlw	0
  5551  001976  1615               	andwf	___ftdiv@f1+2,f,c
  5552  001978  8E17               	bsf	___ftdiv@f2+1,7,c
  5553  00197A  0EFF               	movlw	255
  5554  00197C  1616               	andwf	___ftdiv@f2,f,c
  5555  00197E  0EFF               	movlw	255
  5556  001980  1617               	andwf	___ftdiv@f2+1,f,c
  5557  001982  0E00               	movlw	0
  5558  001984  1618               	andwf	___ftdiv@f2+2,f,c
  5559  001986  0E18               	movlw	24
  5560  001988  6E1C               	movwf	___ftdiv@cntr,c
  5561  00198A  90D8               	bcf	status,0,c
  5562  00198C  361D               	rlcf	___ftdiv@f3,f,c
  5563  00198E  361E               	rlcf	___ftdiv@f3+1,f,c
  5564  001990  361F               	rlcf	___ftdiv@f3+2,f,c
  5565  001992  5016               	movf	___ftdiv@f2,w,c
  5566  001994  5C13               	subwf	___ftdiv@f1,w,c
  5567  001996  5017               	movf	___ftdiv@f2+1,w,c
  5568  001998  5814               	subwfb	___ftdiv@f1+1,w,c
  5569  00199A  5018               	movf	___ftdiv@f2+2,w,c
  5570  00199C  5815               	subwfb	___ftdiv@f1+2,w,c
  5571  00199E  A0D8               	btfss	status,0,c
  5572  0019A0  D007               	goto	i2l533
  5573  0019A2  5016               	movf	___ftdiv@f2,w,c
  5574  0019A4  5E13               	subwf	___ftdiv@f1,f,c
  5575  0019A6  5017               	movf	___ftdiv@f2+1,w,c
  5576  0019A8  5A14               	subwfb	___ftdiv@f1+1,f,c
  5577  0019AA  5018               	movf	___ftdiv@f2+2,w,c
  5578  0019AC  5A15               	subwfb	___ftdiv@f1+2,f,c
  5579  0019AE  801D               	bsf	___ftdiv@f3,0,c
  5580  0019B0                     i2l533:
  5581  0019B0  90D8               	bcf	status,0,c
  5582  0019B2  3613               	rlcf	___ftdiv@f1,f,c
  5583  0019B4  3614               	rlcf	___ftdiv@f1+1,f,c
  5584  0019B6  3615               	rlcf	___ftdiv@f1+2,f,c
  5585  0019B8  2E1C               	decfsz	___ftdiv@cntr,f,c
  5586  0019BA  D7E7               	goto	i2l532
  5587  0019BC  C01D  F001         	movff	___ftdiv@f3,i2___ftpack@arg
  5588  0019C0  C01E  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
  5589  0019C4  C01F  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
  5590  0019C8  C020  F004         	movff	___ftdiv@exp,i2___ftpack@exp
  5591  0019CC  C021  F005         	movff	___ftdiv@sign,i2___ftpack@sign
  5592  0019D0  EC49  F00D         	call	i2___ftpack	;wreg free
  5593  0019D4  C001  F013         	movff	?i2___ftpack,?___ftdiv
  5594  0019D8  C002  F014         	movff	?i2___ftpack+1,?___ftdiv+1
  5595  0019DC  C003  F015         	movff	?i2___ftpack+2,?___ftdiv+2
  5596  0019E0  0012               	return	
  5597  0019E2                     __end_of___ftdiv:
  5598                           	opt stack 0
  5599                           pclatu	equ	0xFFB
  5600                           pclath	equ	0xFFA
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           intcon2	equ	0xFF1
  5609                           postinc0	equ	0xFEE
  5610                           fsr0h	equ	0xFEA
  5611                           fsr0l	equ	0xFE9
  5612                           wreg	equ	0xFE8
  5613                           fsr1h	equ	0xFE2
  5614                           fsr1l	equ	0xFE1
  5615                           indf2	equ	0xFDF
  5616                           postinc2	equ	0xFDE
  5617                           postdec2	equ	0xFDD
  5618                           fsr2h	equ	0xFDA
  5619                           fsr2l	equ	0xFD9
  5620                           status	equ	0xFD8
  5621                           
  5622 ;; *************** function ___ftadd *****************
  5623 ;; Defined at:
  5624 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  f1              3   33[COMRAM] float 
  5627 ;;  f2              3   36[COMRAM] float 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  exp1            1   44[COMRAM] unsigned char 
  5630 ;;  exp2            1   43[COMRAM] unsigned char 
  5631 ;;  sign            1   42[COMRAM] unsigned char 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  3   33[COMRAM] float 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0, cstack
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5641 ;;      Params:         6       0       0       0       0       0       0       0       0
  5642 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5643 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5644 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5645 ;;Total ram usage:       12 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:    1
  5648 ;; This function calls:
  5649 ;;		i2___ftpack
  5650 ;; This function is called by:
  5651 ;;		_PID_set_PF
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text24
  5656  00120E                     __ptext24:
  5657                           	opt stack 0
  5658  00120E                     ___ftadd:
  5659                           	opt stack 23
  5660                           
  5661                           ;incstack = 0
  5662  00120E  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  5663  001212  6A29               	clrf	(??___ftadd+1)& (0+255),c
  5664  001214  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  5665  001216  3423               	rlcf	___ftadd@f1+1,w,c
  5666  001218  3628               	rlcf	??___ftadd& (0+255),f,c
  5667  00121A  E301               	bnc	u174_41
  5668  00121C  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  5669  00121E                     u174_41:
  5670  00121E  5028               	movf	??___ftadd,w,c
  5671  001220  6E2D               	movwf	___ftadd@exp1,c
  5672  001222  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  5673  001226  6A29               	clrf	(??___ftadd+1)& (0+255),c
  5674  001228  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  5675  00122A  3426               	rlcf	___ftadd@f2+1,w,c
  5676  00122C  3628               	rlcf	??___ftadd& (0+255),f,c
  5677  00122E  E301               	bnc	u175_41
  5678  001230  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  5679  001232                     u175_41:
  5680  001232  5028               	movf	??___ftadd,w,c
  5681  001234  6E2C               	movwf	___ftadd@exp2,c
  5682  001236  502D               	movf	___ftadd@exp1,w,c
  5683  001238  B4D8               	btfsc	status,2,c
  5684  00123A  D00B               	goto	i2u178_40
  5685  00123C  502C               	movf	___ftadd@exp2,w,c
  5686  00123E  5C2D               	subwf	___ftadd@exp1,w,c
  5687  001240  B0D8               	btfsc	status,0,c
  5688  001242  D00E               	goto	i2l496
  5689  001244  502D               	movf	___ftadd@exp1,w,c
  5690  001246  0800               	sublw	0
  5691  001248  242C               	addwf	___ftadd@exp2,w,c
  5692  00124A  6E28               	movwf	??___ftadd& (0+255),c
  5693  00124C  0E18               	movlw	24
  5694  00124E  6428               	cpfsgt	??___ftadd,c
  5695  001250  D007               	goto	i2l496
  5696  001252                     i2u178_40:
  5697  001252  C025  F022         	movff	___ftadd@f2,?___ftadd
  5698  001256  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  5699  00125A  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  5700  00125E  0012               	return	
  5701  001260                     i2l496:
  5702  001260  502C               	movf	___ftadd@exp2,w,c
  5703  001262  B4D8               	btfsc	status,2,c
  5704  001264  D00B               	goto	i2u181_40
  5705  001266  502D               	movf	___ftadd@exp1,w,c
  5706  001268  5C2C               	subwf	___ftadd@exp2,w,c
  5707  00126A  B0D8               	btfsc	status,0,c
  5708  00126C  D00E               	goto	i2l500
  5709  00126E  502C               	movf	___ftadd@exp2,w,c
  5710  001270  0800               	sublw	0
  5711  001272  242D               	addwf	___ftadd@exp1,w,c
  5712  001274  6E28               	movwf	??___ftadd& (0+255),c
  5713  001276  0E18               	movlw	24
  5714  001278  6428               	cpfsgt	??___ftadd,c
  5715  00127A  D007               	goto	i2l500
  5716  00127C                     i2u181_40:
  5717  00127C  C022  F022         	movff	___ftadd@f1,?___ftadd
  5718  001280  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  5719  001284  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  5720  001288  0012               	return	
  5721  00128A                     i2l500:
  5722  00128A  0E06               	movlw	6
  5723  00128C  6E2B               	movwf	___ftadd@sign,c
  5724  00128E  BE24               	btfsc	___ftadd@f1+2,7,c
  5725  001290  8E2B               	bsf	___ftadd@sign,7,c
  5726  001292  BE27               	btfsc	___ftadd@f2+2,7,c
  5727  001294  8C2B               	bsf	___ftadd@sign,6,c
  5728  001296  8E23               	bsf	___ftadd@f1+1,7,c
  5729  001298  0EFF               	movlw	255
  5730  00129A  1622               	andwf	___ftadd@f1,f,c
  5731  00129C  0EFF               	movlw	255
  5732  00129E  1623               	andwf	___ftadd@f1+1,f,c
  5733  0012A0  0E00               	movlw	0
  5734  0012A2  1624               	andwf	___ftadd@f1+2,f,c
  5735  0012A4  8E26               	bsf	___ftadd@f2+1,7,c
  5736  0012A6  0EFF               	movlw	255
  5737  0012A8  1625               	andwf	___ftadd@f2,f,c
  5738  0012AA  0EFF               	movlw	255
  5739  0012AC  1626               	andwf	___ftadd@f2+1,f,c
  5740  0012AE  0E00               	movlw	0
  5741  0012B0  1627               	andwf	___ftadd@f2+2,f,c
  5742  0012B2  502C               	movf	___ftadd@exp2,w,c
  5743  0012B4  5C2D               	subwf	___ftadd@exp1,w,c
  5744  0012B6  B0D8               	btfsc	status,0,c
  5745  0012B8  D01B               	goto	i2l505
  5746  0012BA                     i2u184_40:
  5747  0012BA  90D8               	bcf	status,0,c
  5748  0012BC  3625               	rlcf	___ftadd@f2,f,c
  5749  0012BE  3626               	rlcf	___ftadd@f2+1,f,c
  5750  0012C0  3627               	rlcf	___ftadd@f2+2,f,c
  5751  0012C2  062C               	decf	___ftadd@exp2,f,c
  5752  0012C4  502D               	movf	___ftadd@exp1,w,c
  5753  0012C6  182C               	xorwf	___ftadd@exp2,w,c
  5754  0012C8  B4D8               	btfsc	status,2,c
  5755  0012CA  D00D               	goto	i2l510
  5756  0012CC  062B               	decf	___ftadd@sign,f,c
  5757  0012CE  C02B  F028         	movff	___ftadd@sign,??___ftadd
  5758  0012D2  0E07               	movlw	7
  5759  0012D4  1628               	andwf	??___ftadd,f,c
  5760  0012D6  B4D8               	btfsc	status,2,c
  5761  0012D8  D006               	goto	i2l510
  5762  0012DA  D7EF               	goto	i2u184_40
  5763  0012DC  90D8               	bcf	status,0,c
  5764  0012DE  3224               	rrcf	___ftadd@f1+2,f,c
  5765  0012E0  3223               	rrcf	___ftadd@f1+1,f,c
  5766  0012E2  3222               	rrcf	___ftadd@f1,f,c
  5767  0012E4  2A2D               	incf	___ftadd@exp1,f,c
  5768  0012E6                     i2l510:
  5769  0012E6  502C               	movf	___ftadd@exp2,w,c
  5770  0012E8  182D               	xorwf	___ftadd@exp1,w,c
  5771  0012EA  B4D8               	btfsc	status,2,c
  5772  0012EC  D01F               	goto	i2u191_40
  5773  0012EE  D7F6               	goto	i2l511
  5774  0012F0                     i2l505:
  5775  0012F0  502D               	movf	___ftadd@exp1,w,c
  5776  0012F2  5C2C               	subwf	___ftadd@exp2,w,c
  5777  0012F4  B0D8               	btfsc	status,0,c
  5778  0012F6  D01A               	goto	i2u191_40
  5779  0012F8                     i2u188_40:
  5780  0012F8  90D8               	bcf	status,0,c
  5781  0012FA  3622               	rlcf	___ftadd@f1,f,c
  5782  0012FC  3623               	rlcf	___ftadd@f1+1,f,c
  5783  0012FE  3624               	rlcf	___ftadd@f1+2,f,c
  5784  001300  062D               	decf	___ftadd@exp1,f,c
  5785  001302  502D               	movf	___ftadd@exp1,w,c
  5786  001304  182C               	xorwf	___ftadd@exp2,w,c
  5787  001306  B4D8               	btfsc	status,2,c
  5788  001308  D00D               	goto	i2l519
  5789  00130A  062B               	decf	___ftadd@sign,f,c
  5790  00130C  C02B  F028         	movff	___ftadd@sign,??___ftadd
  5791  001310  0E07               	movlw	7
  5792  001312  1628               	andwf	??___ftadd,f,c
  5793  001314  B4D8               	btfsc	status,2,c
  5794  001316  D006               	goto	i2l519
  5795  001318  D7EF               	goto	i2u188_40
  5796  00131A  90D8               	bcf	status,0,c
  5797  00131C  3227               	rrcf	___ftadd@f2+2,f,c
  5798  00131E  3226               	rrcf	___ftadd@f2+1,f,c
  5799  001320  3225               	rrcf	___ftadd@f2,f,c
  5800  001322  2A2C               	incf	___ftadd@exp2,f,c
  5801  001324                     i2l519:
  5802  001324  502C               	movf	___ftadd@exp2,w,c
  5803  001326  182D               	xorwf	___ftadd@exp1,w,c
  5804  001328  A4D8               	btfss	status,2,c
  5805  00132A  D7F7               	goto	i2l520
  5806  00132C                     i2u191_40:
  5807  00132C  AE2B               	btfss	___ftadd@sign,7,c
  5808  00132E  D00C               	goto	i2l522
  5809  001330  0EFF               	movlw	255
  5810  001332  1A22               	xorwf	___ftadd@f1,f,c
  5811  001334  0EFF               	movlw	255
  5812  001336  1A23               	xorwf	___ftadd@f1+1,f,c
  5813  001338  0EFF               	movlw	255
  5814  00133A  1A24               	xorwf	___ftadd@f1+2,f,c
  5815  00133C  0E01               	movlw	1
  5816  00133E  2622               	addwf	___ftadd@f1,f,c
  5817  001340  0E00               	movlw	0
  5818  001342  2223               	addwfc	___ftadd@f1+1,f,c
  5819  001344  0E00               	movlw	0
  5820  001346  2224               	addwfc	___ftadd@f1+2,f,c
  5821  001348                     i2l522:
  5822  001348  AC2B               	btfss	___ftadd@sign,6,c
  5823  00134A  D00C               	goto	i2l523
  5824  00134C  0EFF               	movlw	255
  5825  00134E  1A25               	xorwf	___ftadd@f2,f,c
  5826  001350  0EFF               	movlw	255
  5827  001352  1A26               	xorwf	___ftadd@f2+1,f,c
  5828  001354  0EFF               	movlw	255
  5829  001356  1A27               	xorwf	___ftadd@f2+2,f,c
  5830  001358  0E01               	movlw	1
  5831  00135A  2625               	addwf	___ftadd@f2,f,c
  5832  00135C  0E00               	movlw	0
  5833  00135E  2226               	addwfc	___ftadd@f2+1,f,c
  5834  001360  0E00               	movlw	0
  5835  001362  2227               	addwfc	___ftadd@f2+2,f,c
  5836  001364                     i2l523:
  5837  001364  0E00               	movlw	0
  5838  001366  6E2B               	movwf	___ftadd@sign,c
  5839  001368  5022               	movf	___ftadd@f1,w,c
  5840  00136A  2625               	addwf	___ftadd@f2,f,c
  5841  00136C  5023               	movf	___ftadd@f1+1,w,c
  5842  00136E  2226               	addwfc	___ftadd@f2+1,f,c
  5843  001370  5024               	movf	___ftadd@f1+2,w,c
  5844  001372  2227               	addwfc	___ftadd@f2+2,f,c
  5845  001374  AE27               	btfss	___ftadd@f2+2,7,c
  5846  001376  D00E               	goto	i2l524
  5847  001378  0EFF               	movlw	255
  5848  00137A  1A25               	xorwf	___ftadd@f2,f,c
  5849  00137C  0EFF               	movlw	255
  5850  00137E  1A26               	xorwf	___ftadd@f2+1,f,c
  5851  001380  0EFF               	movlw	255
  5852  001382  1A27               	xorwf	___ftadd@f2+2,f,c
  5853  001384  0E01               	movlw	1
  5854  001386  2625               	addwf	___ftadd@f2,f,c
  5855  001388  0E00               	movlw	0
  5856  00138A  2226               	addwfc	___ftadd@f2+1,f,c
  5857  00138C  0E00               	movlw	0
  5858  00138E  2227               	addwfc	___ftadd@f2+2,f,c
  5859  001390  0E01               	movlw	1
  5860  001392  6E2B               	movwf	___ftadd@sign,c
  5861  001394                     i2l524:
  5862  001394  C025  F001         	movff	___ftadd@f2,i2___ftpack@arg
  5863  001398  C026  F002         	movff	___ftadd@f2+1,i2___ftpack@arg+1
  5864  00139C  C027  F003         	movff	___ftadd@f2+2,i2___ftpack@arg+2
  5865  0013A0  C02D  F004         	movff	___ftadd@exp1,i2___ftpack@exp
  5866  0013A4  C02B  F005         	movff	___ftadd@sign,i2___ftpack@sign
  5867  0013A8  EC49  F00D         	call	i2___ftpack	;wreg free
  5868  0013AC  C001  F022         	movff	?i2___ftpack,?___ftadd
  5869  0013B0  C002  F023         	movff	?i2___ftpack+1,?___ftadd+1
  5870  0013B4  C003  F024         	movff	?i2___ftpack+2,?___ftadd+2
  5871  0013B8  0012               	return	
  5872  0013BA                     __end_of___ftadd:
  5873                           	opt stack 0
  5874                           pclatu	equ	0xFFB
  5875                           pclath	equ	0xFFA
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           intcon2	equ	0xFF1
  5884                           postinc0	equ	0xFEE
  5885                           fsr0h	equ	0xFEA
  5886                           fsr0l	equ	0xFE9
  5887                           wreg	equ	0xFE8
  5888                           fsr1h	equ	0xFE2
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function ___altoft *****************
  5898 ;; Defined at:
  5899 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  c               4    8[COMRAM] long 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  sign            1   17[COMRAM] unsigned char 
  5904 ;;  exp             1   16[COMRAM] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  3    8[COMRAM] float 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5914 ;;      Params:         4       0       0       0       0       0       0       0       0
  5915 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5916 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5917 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5918 ;;Total ram usage:       10 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    1
  5921 ;; This function calls:
  5922 ;;		i2___ftpack
  5923 ;; This function is called by:
  5924 ;;		_PID_set_PF
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text25
  5929  001B40                     __ptext25:
  5930                           	opt stack 0
  5931  001B40                     ___altoft:
  5932                           	opt stack 23
  5933                           
  5934                           ;incstack = 0
  5935  001B40  0E00               	movlw	0
  5936  001B42  6E12               	movwf	___altoft@sign,c
  5937  001B44  0E8E               	movlw	142
  5938  001B46  6E11               	movwf	___altoft@exp,c
  5939  001B48  AE0C               	btfss	___altoft@c+3,7,c
  5940  001B4A  D011               	goto	i2l335
  5941  001B4C  1E0C               	comf	___altoft@c+3,f,c
  5942  001B4E  1E0B               	comf	___altoft@c+2,f,c
  5943  001B50  1E0A               	comf	___altoft@c+1,f,c
  5944  001B52  6C09               	negf	___altoft@c,c
  5945  001B54  0E00               	movlw	0
  5946  001B56  220A               	addwfc	___altoft@c+1,f,c
  5947  001B58  220B               	addwfc	___altoft@c+2,f,c
  5948  001B5A  220C               	addwfc	___altoft@c+3,f,c
  5949  001B5C  0E01               	movlw	1
  5950  001B5E  6E12               	movwf	___altoft@sign,c
  5951  001B60  D006               	goto	i2l335
  5952  001B62  90D8               	bcf	status,0,c
  5953  001B64  320C               	rrcf	___altoft@c+3,f,c
  5954  001B66  320B               	rrcf	___altoft@c+2,f,c
  5955  001B68  320A               	rrcf	___altoft@c+1,f,c
  5956  001B6A  3209               	rrcf	___altoft@c,f,c
  5957  001B6C  2A11               	incf	___altoft@exp,f,c
  5958  001B6E                     i2l335:
  5959  001B6E  0E00               	movlw	0
  5960  001B70  1409               	andwf	___altoft@c,w,c
  5961  001B72  6E0D               	movwf	??___altoft& (0+255),c
  5962  001B74  0E00               	movlw	0
  5963  001B76  140A               	andwf	___altoft@c+1,w,c
  5964  001B78  6E0E               	movwf	(??___altoft+1)& (0+255),c
  5965  001B7A  0E00               	movlw	0
  5966  001B7C  140B               	andwf	___altoft@c+2,w,c
  5967  001B7E  6E0F               	movwf	(??___altoft+2)& (0+255),c
  5968  001B80  0EFF               	movlw	255
  5969  001B82  140C               	andwf	___altoft@c+3,w,c
  5970  001B84  6E10               	movwf	(??___altoft+3)& (0+255),c
  5971  001B86  500D               	movf	??___altoft,w,c
  5972  001B88  100E               	iorwf	??___altoft+1,w,c
  5973  001B8A  100F               	iorwf	??___altoft+2,w,c
  5974  001B8C  1010               	iorwf	??___altoft+3,w,c
  5975  001B8E  A4D8               	btfss	status,2,c
  5976  001B90  D7E8               	goto	i2l336
  5977  001B92  C009  F001         	movff	___altoft@c,i2___ftpack@arg
  5978  001B96  C00A  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
  5979  001B9A  C00B  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
  5980  001B9E  C011  F004         	movff	___altoft@exp,i2___ftpack@exp
  5981  001BA2  C012  F005         	movff	___altoft@sign,i2___ftpack@sign
  5982  001BA6  EC49  F00D         	call	i2___ftpack	;wreg free
  5983  001BAA  C001  F009         	movff	?i2___ftpack,?___altoft
  5984  001BAE  C002  F00A         	movff	?i2___ftpack+1,?___altoft+1
  5985  001BB2  C003  F00B         	movff	?i2___ftpack+2,?___altoft+2
  5986  001BB6  0012               	return	
  5987  001BB8                     __end_of___altoft:
  5988                           	opt stack 0
  5989                           pclatu	equ	0xFFB
  5990                           pclath	equ	0xFFA
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           intcon2	equ	0xFF1
  5999                           postinc0	equ	0xFEE
  6000                           fsr0h	equ	0xFEA
  6001                           fsr0l	equ	0xFE9
  6002                           wreg	equ	0xFE8
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function i2___ftpack *****************
  6013 ;; Defined at:
  6014 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  arg             3    0[COMRAM] unsigned um
  6017 ;;  exp             1    3[COMRAM] unsigned char 
  6018 ;;  sign            1    4[COMRAM] unsigned char 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;		None
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  3    0[COMRAM] float 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6030 ;;      Params:         5       0       0       0       0       0       0       0       0
  6031 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6032 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6033 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6034 ;;Total ram usage:        8 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; This function calls:
  6037 ;;		Nothing
  6038 ;; This function is called by:
  6039 ;;		___altoft
  6040 ;;		___ftadd
  6041 ;;		___ftdiv
  6042 ;;		i2___ftmul
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text26
  6047  001A92                     __ptext26:
  6048                           	opt stack 0
  6049  001A92                     i2___ftpack:
  6050                           	opt stack 23
  6051                           
  6052                           ;incstack = 0
  6053  001A92  5004               	movf	i2___ftpack@exp,w,c
  6054  001A94  B4D8               	btfsc	status,2,c
  6055  001A96  D005               	goto	i2u155_40
  6056  001A98  5001               	movf	i2___ftpack@arg,w,c
  6057  001A9A  1002               	iorwf	i2___ftpack@arg+1,w,c
  6058  001A9C  1003               	iorwf	i2___ftpack@arg+2,w,c
  6059  001A9E  A4D8               	btfss	status,2,c
  6060  001AA0  D00C               	goto	i2l465
  6061  001AA2                     i2u155_40:
  6062  001AA2  0E00               	movlw	0
  6063  001AA4  6E01               	movwf	?i2___ftpack,c
  6064  001AA6  0E00               	movlw	0
  6065  001AA8  6E02               	movwf	?i2___ftpack+1,c
  6066  001AAA  0E00               	movlw	0
  6067  001AAC  6E03               	movwf	?i2___ftpack+2,c
  6068  001AAE  0012               	return	
  6069  001AB0  2A04               	incf	i2___ftpack@exp,f,c
  6070  001AB2  90D8               	bcf	status,0,c
  6071  001AB4  3203               	rrcf	i2___ftpack@arg+2,f,c
  6072  001AB6  3202               	rrcf	i2___ftpack@arg+1,f,c
  6073  001AB8  3201               	rrcf	i2___ftpack@arg,f,c
  6074  001ABA                     i2l465:
  6075  001ABA  0E00               	movlw	0
  6076  001ABC  1401               	andwf	i2___ftpack@arg,w,c
  6077  001ABE  6E06               	movwf	??i2___ftpack& (0+255),c
  6078  001AC0  0E00               	movlw	0
  6079  001AC2  1402               	andwf	i2___ftpack@arg+1,w,c
  6080  001AC4  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  6081  001AC6  0EFE               	movlw	254
  6082  001AC8  1403               	andwf	i2___ftpack@arg+2,w,c
  6083  001ACA  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  6084  001ACC  5006               	movf	??i2___ftpack,w,c
  6085  001ACE  1007               	iorwf	??i2___ftpack+1,w,c
  6086  001AD0  1008               	iorwf	??i2___ftpack+2,w,c
  6087  001AD2  B4D8               	btfsc	status,2,c
  6088  001AD4  D00C               	goto	i2l468
  6089  001AD6  D7EC               	goto	i2l466
  6090  001AD8  2A04               	incf	i2___ftpack@exp,f,c
  6091  001ADA  0E01               	movlw	1
  6092  001ADC  2601               	addwf	i2___ftpack@arg,f,c
  6093  001ADE  0E00               	movlw	0
  6094  001AE0  2202               	addwfc	i2___ftpack@arg+1,f,c
  6095  001AE2  0E00               	movlw	0
  6096  001AE4  2203               	addwfc	i2___ftpack@arg+2,f,c
  6097  001AE6  90D8               	bcf	status,0,c
  6098  001AE8  3203               	rrcf	i2___ftpack@arg+2,f,c
  6099  001AEA  3202               	rrcf	i2___ftpack@arg+1,f,c
  6100  001AEC  3201               	rrcf	i2___ftpack@arg,f,c
  6101  001AEE                     i2l468:
  6102  001AEE  0E00               	movlw	0
  6103  001AF0  1401               	andwf	i2___ftpack@arg,w,c
  6104  001AF2  6E06               	movwf	??i2___ftpack& (0+255),c
  6105  001AF4  0E00               	movlw	0
  6106  001AF6  1402               	andwf	i2___ftpack@arg+1,w,c
  6107  001AF8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  6108  001AFA  0EFF               	movlw	255
  6109  001AFC  1403               	andwf	i2___ftpack@arg+2,w,c
  6110  001AFE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  6111  001B00  5006               	movf	??i2___ftpack,w,c
  6112  001B02  1007               	iorwf	??i2___ftpack+1,w,c
  6113  001B04  1008               	iorwf	??i2___ftpack+2,w,c
  6114  001B06  B4D8               	btfsc	status,2,c
  6115  001B08  D006               	goto	i2l471
  6116  001B0A  D7E6               	goto	i2l469
  6117  001B0C  0604               	decf	i2___ftpack@exp,f,c
  6118  001B0E  90D8               	bcf	status,0,c
  6119  001B10  3601               	rlcf	i2___ftpack@arg,f,c
  6120  001B12  3602               	rlcf	i2___ftpack@arg+1,f,c
  6121  001B14  3603               	rlcf	i2___ftpack@arg+2,f,c
  6122  001B16                     i2l471:
  6123  001B16  BE02               	btfsc	i2___ftpack@arg+1,7,c
  6124  001B18  D003               	goto	i2u159_40
  6125  001B1A  0E02               	movlw	2
  6126  001B1C  6004               	cpfslt	i2___ftpack@exp,c
  6127  001B1E  D7F6               	goto	i2l472
  6128  001B20                     i2u159_40:
  6129  001B20  A004               	btfss	i2___ftpack@exp,0,c
  6130  001B22  9E02               	bcf	i2___ftpack@arg+1,7,c
  6131  001B24  90D8               	bcf	status,0,c
  6132  001B26  3204               	rrcf	i2___ftpack@exp,f,c
  6133  001B28  5004               	movf	i2___ftpack@exp,w,c
  6134  001B2A  1203               	iorwf	i2___ftpack@arg+2,f,c
  6135  001B2C  5005               	movf	i2___ftpack@sign,w,c
  6136  001B2E  A4D8               	btfss	status,2,c
  6137  001B30  8E03               	bsf	i2___ftpack@arg+2,7,c
  6138  001B32  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  6139  001B36  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  6140  001B3A  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  6141  001B3E  0012               	return	
  6142  001B40                     __end_ofi2___ftpack:
  6143                           	opt stack 0
  6144                           pclatu	equ	0xFFB
  6145                           pclath	equ	0xFFA
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           prodh	equ	0xFF4
  6151                           prodl	equ	0xFF3
  6152                           intcon	equ	0xFF2
  6153                           intcon2	equ	0xFF1
  6154                           postinc0	equ	0xFEE
  6155                           fsr0h	equ	0xFEA
  6156                           fsr0l	equ	0xFE9
  6157                           wreg	equ	0xFE8
  6158                           fsr1h	equ	0xFE2
  6159                           fsr1l	equ	0xFE1
  6160                           indf2	equ	0xFDF
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167 ;; *************** function _ADC_read *****************
  6168 ;; Defined at:
  6169 ;;		line 78 in file "main.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  canal           1    wreg     unsigned char 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  canal           1    4[COMRAM] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  2    0[COMRAM] unsigned int 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6183 ;;      Params:         2       0       0       0       0       0       0       0       0
  6184 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6185 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6186 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6187 ;;Total ram usage:        5 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; This function calls:
  6190 ;;		Nothing
  6191 ;; This function is called by:
  6192 ;;		_interrupcoes
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           	psect	text27
  6197  001F38                     __ptext27:
  6198                           	opt stack 0
  6199  001F38                     _ADC_read:
  6200                           	opt stack 25
  6201                           
  6202                           ;incstack = 0
  6203                           ;ADC_read@canal stored from wreg
  6204  001F38  6E05               	movwf	ADC_read@canal,c
  6205                           
  6206                           ;main.c: 79: ADCON0 = canal;
  6207  001F3A  C005  FFC2         	movff	ADC_read@canal,4034	;volatile
  6208                           
  6209                           ;main.c: 80: _delay((unsigned long)((10)*(20000000/4000000.0)));
  6210  001F3E  0E10               	movlw	16
  6211  001F40                     i2u344_47:
  6212  001F40  2EE8               	decfsz	wreg,f,c
  6213  001F42  D7FE               	bra	i2u344_47
  6214  001F44  D000               	nop2	
  6215                           
  6216                           ;main.c: 81: ADCON0bits.GODONE = 1;
  6217  001F46  82C2               	bsf	4034,1,c	;volatile
  6218  001F48  B2C2               	btfsc	4034,1,c	;volatile
  6219  001F4A  D7FE               	goto	i2l174
  6220                           
  6221                           ;main.c: 83: {
  6222                           ;main.c: 84: }
  6223                           ;main.c: 85: return ((ADRESH << 8) + ADRESL);
  6224  001F4C  50C4               	movf	4036,w,c	;volatile
  6225  001F4E  6E04               	movwf	(??_ADC_read+1)& (0+255),c
  6226  001F50  6A03               	clrf	??_ADC_read& (0+255),c
  6227  001F52  50C3               	movf	4035,w,c	;volatile
  6228  001F54  2403               	addwf	??_ADC_read,w,c
  6229  001F56  6E01               	movwf	?_ADC_read,c
  6230  001F58  0E00               	movlw	0
  6231  001F5A  2004               	addwfc	??_ADC_read+1,w,c
  6232  001F5C  6E02               	movwf	?_ADC_read+1,c
  6233  001F5E  0012               	return	
  6234  001F60                     __end_of_ADC_read:
  6235                           	opt stack 0
  6236                           pclatu	equ	0xFFB
  6237                           pclath	equ	0xFFA
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           intcon	equ	0xFF2
  6245                           intcon2	equ	0xFF1
  6246                           postinc0	equ	0xFEE
  6247                           fsr0h	equ	0xFEA
  6248                           fsr0l	equ	0xFE9
  6249                           wreg	equ	0xFE8
  6250                           fsr1h	equ	0xFE2
  6251                           fsr1l	equ	0xFE1
  6252                           indf2	equ	0xFDF
  6253                           postinc2	equ	0xFDE
  6254                           postdec2	equ	0xFDD
  6255                           fsr2h	equ	0xFDA
  6256                           fsr2l	equ	0xFD9
  6257                           status	equ	0xFD8
  6258                           pclatu	equ	0xFFB
  6259                           pclath	equ	0xFFA
  6260                           tblptru	equ	0xFF8
  6261                           tblptrh	equ	0xFF7
  6262                           tblptrl	equ	0xFF6
  6263                           tablat	equ	0xFF5
  6264                           prodh	equ	0xFF4
  6265                           prodl	equ	0xFF3
  6266                           intcon	equ	0xFF2
  6267                           intcon2	equ	0xFF1
  6268                           postinc0	equ	0xFEE
  6269                           fsr0h	equ	0xFEA
  6270                           fsr0l	equ	0xFE9
  6271                           wreg	equ	0xFE8
  6272                           fsr1h	equ	0xFE2
  6273                           fsr1l	equ	0xFE1
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281                           	psect	rparam
  6282  0000                     pclatu	equ	0xFFB
  6283                           pclath	equ	0xFFA
  6284                           tblptru	equ	0xFF8
  6285                           tblptrh	equ	0xFF7
  6286                           tblptrl	equ	0xFF6
  6287                           tablat	equ	0xFF5
  6288                           prodh	equ	0xFF4
  6289                           prodl	equ	0xFF3
  6290                           intcon	equ	0xFF2
  6291                           intcon2	equ	0xFF1
  6292                           postinc0	equ	0xFEE
  6293                           fsr0h	equ	0xFEA
  6294                           fsr0l	equ	0xFE9
  6295                           wreg	equ	0xFE8
  6296                           fsr1h	equ	0xFE2
  6297                           fsr1l	equ	0xFE1
  6298                           indf2	equ	0xFDF
  6299                           postinc2	equ	0xFDE
  6300                           postdec2	equ	0xFDD
  6301                           fsr2h	equ	0xFDA
  6302                           fsr2l	equ	0xFD9
  6303                           status	equ	0xFD8
  6304                           
  6305                           	psect	temp
  6306  00005F                     btemp:
  6307                           	opt stack 0
  6308  00005F                     	ds	1
  6309  0000                     int$flags	set	btemp
  6310  0000                     wtemp6	set	btemp+1
  6311                           pclatu	equ	0xFFB
  6312                           pclath	equ	0xFFA
  6313                           tblptru	equ	0xFF8
  6314                           tblptrh	equ	0xFF7
  6315                           tblptrl	equ	0xFF6
  6316                           tablat	equ	0xFF5
  6317                           prodh	equ	0xFF4
  6318                           prodl	equ	0xFF3
  6319                           intcon	equ	0xFF2
  6320                           intcon2	equ	0xFF1
  6321                           postinc0	equ	0xFEE
  6322                           fsr0h	equ	0xFEA
  6323                           fsr0l	equ	0xFE9
  6324                           wreg	equ	0xFE8
  6325                           fsr1h	equ	0xFE2
  6326                           fsr1l	equ	0xFE1
  6327                           indf2	equ	0xFDF
  6328                           postinc2	equ	0xFDE
  6329                           postdec2	equ	0xFDD
  6330                           fsr2h	equ	0xFDA
  6331                           fsr2l	equ	0xFD9
  6332                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    10
    Data        6
    BSS         113
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     72      94
    BANK0           160     55     137
    BANK1           256      9      25
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> buf2(BANK1[16]), buf(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> buf2(BANK1[16]), buf(BANK0[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interrupcoes in COMRAM

    _interrupcoes->_PID_set_PF
    _PID_set_PF->i2___fttol
    i2___fttol->___ftadd
    i2___ftmul->___altoft
    ___ftdiv->___altoft
    ___ftadd->i2___ftmul
    ___altoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd
    ___fttol->___ftmul
    ___ftmul->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_atraso_us
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_atraso_ms

Critical Paths under _interrupcoes in BANK0

    None.

Critical Paths under _main in BANK1

    _main->___fttol

Critical Paths under _interrupcoes in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcoes in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupcoes in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupcoes in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupcoes in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupcoes in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupcoes in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   11242
                                              6 BANK1      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftmul
                            ___fttol
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    17      8    2249
                                             35 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             30 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             23 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1271
                           _ADC_init
                           _Lcd_Init
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             0     0      0    1271
                            _Lcd_Cmd
                           _Lcd_Port
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     751
                                             46 BANK0      9     5      4
                                              0 BANK1      6     6      0
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    3856
                                             31 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2578
                                             23 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     2      2    1060
                                             31 BANK0      4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     570
                                             28 BANK0      3     3      0
                           _Lcd_Port
                          _atraso_us
 ---------------------------------------------------------------------------------
 (3) _atraso_us                                            5     3      2     316
                                             23 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1401
                                             29 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     651
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              1     1      0     651
                                             28 BANK0      1     1      0
                           _Lcd_Port
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2     496
                                             23 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _interrupcoes                                        23    23      0    5718
                                              0 BANK0     23    23      0
                           _ADC_read
                         _PID_set_PF
 ---------------------------------------------------------------------------------
 (6) _PID_set_PF                                          12     8      4    5696
                                             60 COMRAM    12     8      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                             ___lmul
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (7) i2___fttol                                           15    11      4     304
                                             45 COMRAM    15    11      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___ftmul                                           15     9      6     921
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    1101
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    1787
                                             33 COMRAM    12     6      6
                           ___altoft (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4     909
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) i2___ftpack                                           8     3      5     543
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _ADC_read                                             5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
       _atraso_ms
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
       _atraso_ms
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
       _atraso_us
   ___ftmul
     ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
   _setup
     _ADC_init
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
         _atraso_ms
       _Lcd_Port
       _atraso_ms
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _interrupcoes (ROOT)
   _ADC_read
   _PID_set_PF
     ___altoft
       i2___ftpack
     ___ftadd
       ___altoft (ARG)
         i2___ftpack
       i2___ftmul (ARG)
         ___altoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     ___lmul
     i2___ftmul
       ___altoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     i2___fttol
       ___altoft (ARG)
         i2___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           ___altoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftmul (ARG)
         ___altoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      9      19       7        9.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     37      89       5       85.6%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     48      5E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     100      20        0.0%
DATA                 0      0     100       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 18 10:28:18 2018

             ___altoft@exp 0011                          _T 00E6                          _d 02F0  
            ___altoft@sign 0012                         l61 1E90                         l62 1E70  
                       l70 1EE2                         l63 1E7C                         l71 1EEE  
                       l80 1F22                         l81 1F2A                         l82 1F2C  
                       l83 1F34                         l77 1F16                         l69 1EFA  
                       l78 1F18                         l94 1CC4                         l79 1F20  
                       _k1 0090                         _k2 008C                         _k3 0088  
                       _fb 0074                         _kd 0094                         _ki 0097  
                       _kp 009A                __CFG_BORV$3 000000                 i2___ftpack 1A92  
               _BandaMorta 005B               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000               ___ftadd@exp1 002D  
             ___ftadd@exp2 002C                __CFG_LVP$ON 000000               ___ftadd@sign 002B  
                      l106 1EC2                        l107 1EAA                        l213 0DCE  
                      l214 0DDC                        l215 0DEA                        l232 13C6  
                      l216 0E0A                        l241 1432                        l233 13E0  
                      l218 0E6A                        l245 147E                        l246 14DA  
                      l247 1484                        l239 140A                        l550 16CA  
                      l471 1A68                        l551 16DA                        l472 1A5E  
                      l544 1648                        l465 1A0C                        l466 1A02  
                      l546 1670                        l547 16A2                        l468 1A40  
                      l548 16B2                        l469 1A2A                        l573 15EE  
                      l565 153A                        l574 15E0                        l654 1D66  
                      l567 15C6                        l655 1D5E                        l576 160C  
                      l568 15B4                        l664 1DFC                        l665 1DF4  
                      l658 1D86                        l659 1D90                        l668 1E14  
                      l669 1E1E               __CFG_CPB$OFF 000000                        _PR2 000FCB  
             __CFG_CPD$OFF 000000               __CFG_BOR$OFF 000000                        _enS 009D  
                      _buf 009F                        _aux 0051                        _ref 0078  
                      _pwm 004D                        wreg 000FE8               __CFG_FOSC$HS 000000  
             ___ftdiv@cntr 001C               ___ftdiv@sign 0021               __CFG_WDT$OFF 000000  
                     l2640 1E74                       l2672 1EE6                       l2894 1436  
                     STR_1 081A                       STR_2 0815                       STR_3 0810  
                     STR_4 080B                       u3020 1A72                       u3200 14E2  
                     u3210 14FA                       u3300 155A                       u3060 1D6A  
                     u3221 1630                       u3241 1658                       u3305 1552  
                     u3090 1E00                       u3410 0E54                       u3340 15F6  
                     u3180 1462                       u3416 0E56                       u3281 151A  
                     u2950 1EF6                       u2880 1E8C                       u2980 19F4  
                     _Lmax 005D                       _Lmin 005C                       _buf2 0100  
        ?_Lcd_Write_String 00CE                       _main 0CBA               ___ftpack@arg 00C6  
                     _out0 0053               ___ftpack@exp 00C9                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 005F                       prodh 000FF4                       prodl 000FF3  
                     start 000E         ??_Lcd_Write_String 00D0           __end_of_ADC_init 1F9A  
         __end_of_ADC_read 1F60              __CFG_IESO$OFF 000000            __end_of_Lcd_Cmd 1F82  
            __CFG_MCLRE$ON 000000               ___ftmul@cntr 00DB               i2___ftmul@f1 0013  
             i2___ftmul@f2 0016               ___param_bank 000000               ___ftmul@sign 00DC  
             i2___fttol@f1 002E              ADC_read@canal 0005               ___fttol@exp1 0115  
             ___fttol@lval 0111              __CFG_PLLDIV$1 000000             __CFG_CCP2MX$ON 000000  
              ?_PID_set_PF 003D                      ?_main 0001            __end_of___ftadd 13BA  
          __end_of___ftdiv 19E2                atraso_ms@i1 00C8                      _CMCON 000FB4  
              atraso_ms@j1 00CA            __end_of___ftmul 1714            __end_of___fttol 161E  
                    _T2CON 000FCA            __end_of___lwdiv 1D9A                      i2l200 0A88  
          __end_of___lwmod 1E28                      i2l202 0B4A                      i2l203 0BCE  
                    i2l204 0C6E                      i2l500 128A                      i2l180 11E0  
                    i2l181 11FC                      i2l174 1F48                      i2l510 12E6  
                    i2l262 1D00                      i2l190 0930                      i2l335 1B6E  
                    i2l511 12DC                      i2l263 1D14                      i2l191 0986  
                    i2l336 1B62                      i2l520 131A                      i2l505 12F0  
                    i2l522 1348                      i2l194 09F0                      i2l523 1364  
                    i2l531 194C                      i2l179 11BE                      i2l524 1394  
                    i2l532 198A                      i2l196 0A28                      i2l188 0C38  
                    i2l533 19B0                      i2l197 0A46                      i2l189 0900  
                    i2l550 18B2                      i2l198 0A4E                      i2l471 1B16  
                    i2l519 1324                      i2l551 18C2                      i2l199 0B46  
                    i2l472 1B0C                      i2l544 1830                      i2l465 1ABA  
                    i2l529 1924                      i2l466 1AB0                      i2l546 1858  
                    i2l547 188A                      i2l468 1AEE                      i2l548 189A  
                    i2l469 1AD8                      i2l573 17DA                      i2l565 1740  
                    i2l574 17CE                      i2l567 17B6                      i2l496 1260  
                    i2l576 17F6                      i2l568 17A6                      _TMR0L 000FD6  
                    _PORTB 000F81              __CFG_USBDIV$1 000000    __size_of_Lcd_Set_Cursor 005A  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
      ___lmul@multiplicand 0005              __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000            __end_of_dpowers 080B  
                    _erro0 0057                      _erro1 0084              ___ftpack@sign 00CA  
                    _setup 1E28             __pbitbssCOMRAM 02F0                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8                      wtemp6 0060  
          __end_of_sprintf 1508             __CFG_ICPRT$OFF 000000             __CFG_PBADEN$ON 000000  
       __size_ofi2___ftmul 00F4         __size_ofi2___fttol 00F4           __end_of_Lcd_Init 1C96  
         __end_of_Lcd_Port 1F38            __initialization 1BB8               __end_of_main 0F96  
            i2___ftmul@exp 001C                ?i2___ftpack 0001                     ??_main 0116  
            ___fttol@sign1 0110         __size_of_Lcd_Clear 000E              __activetblptr 000002  
                   _ADCON0 000FC2                     _ADCON1 000FC1                     _ADCON2 000FC0  
         __end_of___altoft 1BB8                     _ADRESH 000FC4                     _ADRESL 000FC3  
                   _CCPR1L 000FBE                     ?_setup 0001           __end_of___ftpack 1A92  
             atraso_ms@val 00C6                     u212_41 1724                     u206_41 1818  
                   u208_41 1840                     u174_41 121E                     u175_41 1232  
                   u195_41 190C                     u197_41 1934                  ??_Lcd_Cmd 00CB  
  __size_of_Lcd_Write_Char 004A        __size_of_PID_set_PF 0278             __CFG_XINST$OFF 000000  
                   ___lmul 1CF0                  ??___ftadd 0028             __CFG_STVREN$ON 000000  
                ??___ftdiv 0019                  ??___ftmul 00D4                  ??___fttol 00E1  
                ??___lwdiv 00CA                  ??___lwmod 00D1                     clear_0 1BFA  
                   clear_1 1C06                     clear_2 1C14      ___ftmul@f3_as_product 00D8  
             __pdataCOMRAM 005B          __end_ofi2___ftmul 18FC          __end_ofi2___fttol 1808  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ?_ADC_init 0001                  ?_ADC_read 0001  
                ??_sprintf 00DA            Lcd_Set_Cursor@a 00CD            Lcd_Set_Cursor@b 00CC  
          Lcd_Set_Cursor@y 00CF            Lcd_Set_Cursor@z 00CE                 __accesstop 0060  
  __end_of__initialization 1C1A                 ___altoft@c 0009                 ___ftadd@f1 0022  
               ___ftadd@f2 0025        __size_ofi2___ftpack 00AE          __end_of_Lcd_Clear 1F90  
            ___rparam_used 000001                 ___ftdiv@f1 0013                 ___ftdiv@f2 0016  
               ___ftdiv@f3 001D             i2___ftpack@arg 0001             i2___ftpack@exp 0004  
               ___ftmul@f1 00CE                 ___ftmul@f2 00D1                 ___fttol@f1 00DD  
           __pcstackCOMRAM 0001              ?_interrupcoes 0001               __pidataBANK0 1F9D  
           i2___ftmul@cntr 0020             i2___ftmul@sign 0021              __end_of_setup 1E64  
           i2___fttol@exp1 003C             i2___fttol@lval 0038             _Lcd_Set_Cursor 1C96  
               ??_ADC_init 00C6                 ??_ADC_read 0003                  ?_Lcd_Init 0001  
                ?_Lcd_Port 0001                    ??_setup 00CC         __size_of_atraso_ms 003A  
       __size_of_atraso_us 0032                 __pbssBANK0 0060                 __pbssBANK1 0100  
           ??_interrupcoes 00AF                    ?___lmul 0001                    _CCP1CON 000FBD  
                ?___altoft 0009             ___lmul@product 0009  __size_of_Lcd_Write_String 0038  
                ?___ftpack 00C6     __end_of_Lcd_Set_Cursor 1CF0               ??_PID_set_PF 0041  
               _derivativo 007C                 ??_Lcd_Init 00CC                 ??_Lcd_Port 00C6  
          __CFG_VREGEN$OFF 000000             _Lcd_Write_Char 1D9A                    _Lcd_Cmd 1F60  
       __end_of_PID_set_PF 120E                    __Hparam 0000                    __Lparam 0000  
          __size_of___lmul 0056                    ___ftadd 120E                    ___ftdiv 18FC  
                  ___ftmul 161E                    ___fttol 1508                    ___lwdiv 1D46  
                  ___lwmod 1DE4          __end_of_atraso_ms 1E9E          __end_of_atraso_us 1F08  
             __psmallconst 0800                 ??___altoft 000D                    __pcinit 1BB8  
             ??i2___ftpack 0006                 ??___ftpack 00CB    i2___ftmul@f3_as_product 001D  
                  __ramtop 0800            ?_Lcd_Set_Cursor 00CC                    __ptext0 0CBA  
                  __ptext1 13BA                    __ptext2 1DE4                    __ptext3 1D46  
                  __ptext4 1E28                    __ptext5 1C28                    __ptext6 1F90  
                  __ptext7 1508                    __ptext8 161E                    __ptext9 19E2  
                _T0CONbits 000FD5                    _dpowers 0801                    _sprintf 13BA  
   __end_of_Lcd_Write_Char 1DE4             __pintcode_body 0820       end_of_initialization 1C1A  
            __Lmediumconst 0000                    int_func 0820         __end_ofi2___ftpack 1B40  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                Lcd_Port@a 00C6                  _PORTAbits 000F80                  _PORTBbits 000F81  
                _PORTDbits 000F83                  _PORTEbits 000F84       __end_of_interrupcoes 0CBA  
                i2___ftmul 1808                  i2___fttol 1714            ?_Lcd_Write_Char 0001  
        __size_of_ADC_init 000A          __size_of_ADC_read 0028          Lcd_Write_String@a 00CE  
        Lcd_Write_String@i 00D0                _CCP1CONbits 000FBD                ___ftdiv@exp 0020  
               main@estado 0117            i2___ftpack@sign 0005                ___ftmul@exp 00D7  
                _Lcd_Clear 1F82             __end_of___lmul 1D46                 atraso_us@i 00C8  
               atraso_us@j 00CA           _Lcd_Write_String 1E9E              __pidataCOMRAM 1F9A  
      start_initialization 1BB8            i2___fttol@sign1 0037                 ?i2___ftmul 0013  
               ?i2___fttol 002E          __size_of_Lcd_Init 006E          __size_of_Lcd_Port 0030  
               ?_Lcd_Clear 0001                   ??___lmul 0009                __pdataBANK0 00E6  
         __CFG_LPT1OSC$OFF 000000            Lcd_Write_Char@a 00CD            Lcd_Write_Char@y 00CC  
        __size_of___altoft 0078          __size_of___ftpack 00B0                __pbssCOMRAM 0049  
            __pcstackBANK0 00AF              __pcstackBANK1 0110                   ?_Lcd_Cmd 0001  
              sprintf@flag 00DD                  _delay1000 0060                sprintf@prec 00DE  
         ___lwdiv@dividend 00C6           ??_Lcd_Set_Cursor 00CD                  __pintcode 0008  
                 ?___ftadd 0022                   ?___ftdiv 0013                   ?___ftmul 00CE  
                 ?___fttol 00DD                   ?___lwdiv 00C6                   ?___lwmod 00CD  
    __size_of_interrupcoes 0CB2                  _atraso_ms 1E64                  _atraso_us 1ED6  
              __smallconst 0800                   _ADC_init 1F90                   _ADC_read 1F38  
         ___lwdiv@quotient 00CB                   ?_sprintf 00D2                ??i2___ftmul 0019  
              ??i2___fttol 0032             __size_of_setup 003C                   i2u214_40 175E  
                 i2u214_45 1756                   i2u225_40 11D0                   i2u218_40 17E0  
                 i2u250_40 087A                   Lcd_Cmd@a 00CB                   i2u155_40 1AA2  
                 i2u251_48 087E                   i2u181_40 127C                   i2u270_45 0AF8  
                 i2u270_46 0AFE                   i2u270_47 0B0C                   i2u159_40 1B20  
                 i2u191_40 132C                   i2u271_45 0B42                   i2u271_46 0B44  
                 i2u343_47 08B6                   i2u184_40 12BA                   i2u256_40 096E  
                 i2u256_46 0970                   i2u344_47 1F40                   i2u257_41 0982  
                 i2u178_40 1252                   i2u274_40 0BA4                   i2u258_40 0992  
                 i2u274_46 0BA6                   i2u258_46 0994                   i2u275_40 0BBC  
                 i2u275_46 0BBE                   i2u259_46 09A8                   i2u188_40 12F8  
                 i2u268_40 0ABA                   i2u276_45 0BE4                   i2u276_46 0BEA  
                 i2u268_46 0ABC                   i2u276_47 0BF8                   i2u269_40 0AD2  
                 i2u277_45 0C2E                   i2u277_46 0C30                   i2u269_46 0AD4  
                 i2u278_40 0C44                  _tick_time 0049                   i2u278_46 0C46  
                 i2u279_40 0C5C             atraso_us@valor 00C6                   i2u279_46 0C5E  
              ??_Lcd_Clear 00CC                   _RCONbits 000FD0           __CFG_WDTPS$32768 000000  
             _interrupcoes 0008                 _ADCON0bits 000FC2                 ?_atraso_ms 00C6  
               ?_atraso_us 00C6           ??_Lcd_Write_Char 00CB                   _Lcd_Init 1C28  
                 _Lcd_Port 1F08          ___lmul@multiplier 0001                _INTCON2bits 000FF1  
 __end_of_Lcd_Write_String 1ED6           __size_of_Lcd_Cmd 0022                   __Hrparam 0000  
                 __Lrparam 0000           __size_of___ftadd 01AC           __size_of___ftdiv 00E6  
                 ___altoft 1B40           __size_of___ftmul 00F6           __size_of___fttol 0116  
         __size_of___lwdiv 0054           __size_of___lwmod 0044                   ___ftpack 19E2  
                 _delay100 0070                   _delay500 006C                   _delay501 0068  
                 _delay502 0064                 sprintf@val 00DF            ___lwdiv@divisor 00C8  
          ___lwdiv@counter 00CA                   __ptext10 1E9E                   __ptext11 1D9A  
                 __ptext20 1714                   __ptext12 1ED6                   __ptext21 1808  
                 __ptext13 1C96                   __ptext22 1CF0                   __ptext14 1F82  
                 __ptext23 18FC                   __ptext15 1F60                   __ptext24 120E  
                 __ptext16 1E64                   __ptext25 1B40                   __ptext17 1F08  
                 __ptext26 1A92                   __ptext27 1F38                   __ptext19 0F96  
         __size_of_sprintf 014E              __size_of_main 02DC                   _integral 0080  
                 int$flags 005F      __CFG_CPUDIV$OSC1_PLL2 000000                ??_atraso_ms 00C8  
              ??_atraso_us 00C8                 _INTCONbits 000FF2         Lcd_Write_Char@temp 00CB  
                 intlevel2 0000                  sprintf@ap 00DB                  sprintf@sp 00D2  
         ___lwmod@dividend 00CD         Lcd_Set_Cursor@temp 00D0                 _PID_set_PF 0F96  
                 sprintf@c 00E1                   sprintf@f 00D4            ___lwmod@divisor 00CF  
          ___lwmod@counter 00D1  
